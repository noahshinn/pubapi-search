[{"title": "AppDynamics API", "content": {"openapi": "3.0.0", "info": {"title": "AppDynamics API", "description": "API for interacting with AppDynamics Application Performance Management platform", "version": "1.0.0", "contact": {"name": "AppDynamics Support", "url": "https://www.appdynamics.com/support", "email": "support@appdynamics.com"}}, "servers": [{"url": "https://your-account.saas.appdynamics.com/controller/rest"}], "paths": {"/applications": {"get": {"summary": "Get all applications", "description": "Retrieve a list of all applications monitored by AppDynamics", "operationId": "getAllApplications", "tags": ["Applications"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Application"}}}}}}}}, "/applications/{applicationId}": {"get": {"summary": "Get application by ID", "description": "Retrieve details of a specific application", "operationId": "getApplicationById", "tags": ["Applications"], "parameters": [{"name": "applicationId", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Application"}}}}, "404": {"description": "Application not found"}}}}, "/applications/{applicationId}/metrics": {"get": {"summary": "Get application metrics", "description": "Retrieve metrics for a specific application", "operationId": "getApplicationMetrics", "tags": ["Metrics"], "parameters": [{"name": "applicationId", "in": "path", "required": true, "schema": {"type": "integer"}}, {"name": "metric-path", "in": "query", "required": true, "schema": {"type": "string"}}, {"name": "time-range-type", "in": "query", "required": true, "schema": {"type": "string", "enum": ["BEFORE_NOW", "BEFORE_TIME", "AFTER_TIME", "BETWEEN_TIMES"]}}, {"name": "duration-in-mins", "in": "query", "schema": {"type": "integer"}}, {"name": "start-time", "in": "query", "schema": {"type": "string", "format": "date-time"}}, {"name": "end-time", "in": "query", "schema": {"type": "string", "format": "date-time"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MetricData"}}}}, "404": {"description": "Application or metric not found"}}}}, "/applications/{applicationId}/business-transactions": {"get": {"summary": "Get business transactions", "description": "Retrieve business transactions for a specific application", "operationId": "getBusinessTransactions", "tags": ["Business Transactions"], "parameters": [{"name": "applicationId", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/BusinessTransaction"}}}}}, "404": {"description": "Application not found"}}}}, "/applications/{applicationId}/nodes": {"get": {"summary": "Get application nodes", "description": "Retrieve nodes for a specific application", "operationId": "getApplicationNodes", "tags": ["Nodes"], "parameters": [{"name": "applicationId", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Node"}}}}}, "404": {"description": "Application not found"}}}}, "/applications/{applicationId}/events": {"get": {"summary": "Get application events", "description": "Retrieve events for a specific application", "operationId": "getApplicationEvents", "tags": ["Events"], "parameters": [{"name": "applicationId", "in": "path", "required": true, "schema": {"type": "integer"}}, {"name": "event-types", "in": "query", "schema": {"type": "string"}}, {"name": "severities", "in": "query", "schema": {"type": "string"}}, {"name": "time-range-type", "in": "query", "required": true, "schema": {"type": "string", "enum": ["BEFORE_NOW", "BEFORE_TIME", "AFTER_TIME", "BETWEEN_TIMES"]}}, {"name": "duration-in-mins", "in": "query", "schema": {"type": "integer"}}, {"name": "start-time", "in": "query", "schema": {"type": "string", "format": "date-time"}}, {"name": "end-time", "in": "query", "schema": {"type": "string", "format": "date-time"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Event"}}}}}, "404": {"description": "Application not found"}}}}}, "components": {"schemas": {"Application": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "description": {"type": "string"}}}, "MetricData": {"type": "object", "properties": {"metricPath": {"type": "string"}, "frequency": {"type": "string"}, "metricValues": {"type": "array", "items": {"$ref": "#/components/schemas/MetricValue"}}}}, "MetricValue": {"type": "object", "properties": {"startTimeInMillis": {"type": "integer"}, "value": {"type": "number"}, "min": {"type": "number"}, "max": {"type": "number"}, "current": {"type": "number"}, "sum": {"type": "number"}, "count": {"type": "integer"}}}, "BusinessTransaction": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "entryPointType": {"type": "string"}, "internalName": {"type": "string"}, "tierId": {"type": "integer"}, "tierName": {"type": "string"}}}, "Node": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "type": {"type": "string"}, "tierId": {"type": "integer"}, "tierName": {"type": "string"}, "machineId": {"type": "integer"}, "machineName": {"type": "string"}, "machineOSType": {"type": "string"}, "machineAgentPresent": {"type": "boolean"}, "machineAgentVersion": {"type": "string"}, "appAgentPresent": {"type": "boolean"}, "appAgentVersion": {"type": "string"}}}, "Event": {"type": "object", "properties": {"id": {"type": "integer"}, "type": {"type": "string"}, "subType": {"type": "string"}, "severity": {"type": "string"}, "summary": {"type": "string"}, "eventTime": {"type": "string", "format": "date-time"}, "affectedEntityType": {"type": "string"}, "affectedEntityName": {"type": "string"}, "affectedEntityId": {"type": "integer"}}}}, "securitySchemes": {"basicAuth": {"type": "http", "scheme": "basic"}}}, "security": [{"basicAuth": []}]}}, {"title": "Redfin API", "content": {"openapi": "3.0.0", "info": {"title": "Redfin API", "description": "API for interacting with Redfin's real estate services", "version": "1.0.0", "contact": {"name": "Redfin API Support", "url": "https://www.redfin.com/api-support", "email": "api-support@redfin.com"}}, "servers": [{"url": "https://api.redfin.com/v1"}], "paths": {"/properties/search": {"get": {"summary": "Search for properties", "description": "Search for properties based on various criteria", "parameters": [{"name": "location", "in": "query", "description": "Location to search (city, zip code, or address)", "required": true, "schema": {"type": "string"}}, {"name": "minPrice", "in": "query", "description": "Minimum price", "schema": {"type": "integer"}}, {"name": "maxPrice", "in": "query", "description": "Maximum price", "schema": {"type": "integer"}}, {"name": "bedrooms", "in": "query", "description": "Number of bedrooms", "schema": {"type": "integer"}}, {"name": "bathrooms", "in": "query", "description": "Number of bathrooms", "schema": {"type": "number"}}, {"name": "propertyType", "in": "query", "description": "Type of property", "schema": {"type": "string", "enum": ["house", "condo", "townhouse", "multi-family", "land"]}}, {"name": "page", "in": "query", "description": "Page number for pagination", "schema": {"type": "integer", "default": 1}}, {"name": "limit", "in": "query", "description": "Number of results per page", "schema": {"type": "integer", "default": 20, "maximum": 100}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"results": {"type": "array", "items": {"$ref": "#/components/schemas/PropertySummary"}}, "totalResults": {"type": "integer"}, "page": {"type": "integer"}, "totalPages": {"type": "integer"}}}}}}, "400": {"description": "Bad request"}}}}, "/properties/{propertyId}": {"get": {"summary": "Get property details", "description": "Retrieve detailed information about a specific property", "parameters": [{"name": "propertyId", "in": "path", "required": true, "description": "Unique identifier of the property", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PropertyDetail"}}}}, "404": {"description": "Property not found"}}}}, "/users/register": {"post": {"summary": "Register a new user", "description": "Create a new user account", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRegistration"}}}}, "responses": {"201": {"description": "User created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Invalid input"}}}}, "/users/login": {"post": {"summary": "User login", "description": "Authenticate a user and receive an access token", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserLogin"}}}}, "responses": {"200": {"description": "Successful login", "content": {"application/json": {"schema": {"type": "object", "properties": {"accessToken": {"type": "string"}, "user": {"$ref": "#/components/schemas/User"}}}}}}, "401": {"description": "Invalid credentials"}}}}, "/users/{userId}/favorites": {"get": {"summary": "Get user's favorite properties", "description": "Retrieve a list of properties favorited by the user", "parameters": [{"name": "userId", "in": "path", "required": true, "description": "Unique identifier of the user", "schema": {"type": "string"}}], "security": [{"bearerAuth": []}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PropertySummary"}}}}}, "401": {"description": "Unauthorized"}, "404": {"description": "User not found"}}}, "post": {"summary": "Add property to favorites", "description": "Add a property to the user's list of favorites", "parameters": [{"name": "userId", "in": "path", "required": true, "description": "Unique identifier of the user", "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"propertyId": {"type": "string"}}, "required": ["propertyId"]}}}}, "security": [{"bearerAuth": []}], "responses": {"201": {"description": "Property added to favorites"}, "401": {"description": "Unauthorized"}, "404": {"description": "User or property not found"}}}}, "/tours": {"post": {"summary": "Schedule a property tour", "description": "Schedule a tour for a specific property", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TourRequest"}}}}, "security": [{"bearerAuth": []}], "responses": {"201": {"description": "Tour scheduled successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tour"}}}}, "400": {"description": "Invalid input"}, "401": {"description": "Unauthorized"}, "404": {"description": "Property not found"}}}}, "/tours/{tourId}": {"get": {"summary": "Get tour details", "description": "Retrieve details of a specific tour", "parameters": [{"name": "tourId", "in": "path", "required": true, "description": "Unique identifier of the tour", "schema": {"type": "string"}}], "security": [{"bearerAuth": []}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tour"}}}}, "401": {"description": "Unauthorized"}, "404": {"description": "Tour not found"}}}, "delete": {"summary": "Cancel a tour", "description": "Cancel a previously scheduled tour", "parameters": [{"name": "tourId", "in": "path", "required": true, "description": "Unique identifier of the tour", "schema": {"type": "string"}}], "security": [{"bearerAuth": []}], "responses": {"204": {"description": "Tour cancelled successfully"}, "401": {"description": "Unauthorized"}, "404": {"description": "Tour not found"}}}}}, "components": {"schemas": {"PropertySummary": {"type": "object", "properties": {"id": {"type": "string"}, "address": {"type": "string"}, "price": {"type": "number"}, "bedrooms": {"type": "integer"}, "bathrooms": {"type": "number"}, "squareFeet": {"type": "integer"}, "propertyType": {"type": "string"}, "yearBuilt": {"type": "integer"}, "listingDate": {"type": "string", "format": "date"}, "thumbnailUrl": {"type": "string"}}}, "PropertyDetail": {"type": "object", "properties": {"id": {"type": "string"}, "address": {"type": "string"}, "price": {"type": "number"}, "bedrooms": {"type": "integer"}, "bathrooms": {"type": "number"}, "squareFeet": {"type": "integer"}, "propertyType": {"type": "string"}, "yearBuilt": {"type": "integer"}, "listingDate": {"type": "string", "format": "date"}, "description": {"type": "string"}, "features": {"type": "array", "items": {"type": "string"}}, "schools": {"type": "array", "items": {"type": "object", "properties": {"name": {"type": "string"}, "rating": {"type": "number"}, "type": {"type": "string"}}}}, "taxHistory": {"type": "array", "items": {"type": "object", "properties": {"year": {"type": "integer"}, "amount": {"type": "number"}}}}, "priceHistory": {"type": "array", "items": {"type": "object", "properties": {"date": {"type": "string", "format": "date"}, "price": {"type": "number"}, "event": {"type": "string"}}}}, "images": {"type": "array", "items": {"type": "string"}}, "latitude": {"type": "number"}, "longitude": {"type": "number"}}}, "UserRegistration": {"type": "object", "properties": {"email": {"type": "string", "format": "email"}, "password": {"type": "string", "minLength": 8}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}}, "required": ["email", "password", "firstName", "lastName"]}, "UserLogin": {"type": "object", "properties": {"email": {"type": "string", "format": "email"}, "password": {"type": "string"}}, "required": ["email", "password"]}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}}}, "TourRequest": {"type": "object", "properties": {"propertyId": {"type": "string"}, "date": {"type": "string", "format": "date"}, "time": {"type": "string", "format": "time"}, "notes": {"type": "string"}}, "required": ["propertyId", "date", "time"]}, "Tour": {"type": "object", "properties": {"id": {"type": "string"}, "propertyId": {"type": "string"}, "userId": {"type": "string"}, "date": {"type": "string", "format": "date"}, "time": {"type": "string", "format": "time"}, "notes": {"type": "string"}, "status": {"type": "string", "enum": ["scheduled", "completed", "cancelled"]}, "createdAt": {"type": "string", "format": "date-time"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}}}, {"title": "Fastly API", "content": {"openapi": "3.0.0", "info": {"title": "Fastly API", "description": "The Fastly API for managing CDN services and configurations", "version": "1.0.0", "contact": {"name": "Fastly Support", "url": "https://www.fastly.com/support", "email": "support@fastly.com"}}, "servers": [{"url": "https://api.fastly.com"}], "paths": {"/service": {"get": {"summary": "List services", "description": "List all services for the authenticated user", "tags": ["Services"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Service"}}}}}}, "security": [{"APIKeyAuth": []}]}, "post": {"summary": "Create a service", "description": "Create a new service", "tags": ["Services"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceCreate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Service"}}}}}, "security": [{"APIKeyAuth": []}]}}, "/service/{service_id}": {"get": {"summary": "Get a service", "description": "Get details of a specific service", "tags": ["Services"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Service"}}}}}, "security": [{"APIKeyAuth": []}]}, "put": {"summary": "Update a service", "description": "Update an existing service", "tags": ["Services"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Service"}}}}}, "security": [{"APIKeyAuth": []}]}, "delete": {"summary": "Delete a service", "description": "Delete an existing service", "tags": ["Services"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Successful response"}}, "security": [{"APIKeyAuth": []}]}}, "/service/{service_id}/version": {"get": {"summary": "List service versions", "description": "List all versions of a service", "tags": ["Versions"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Version"}}}}}}, "security": [{"APIKeyAuth": []}]}, "post": {"summary": "Create a service version", "description": "Create a new version of a service", "tags": ["Versions"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Version"}}}}}, "security": [{"APIKeyAuth": []}]}}, "/service/{service_id}/version/{version_id}": {"get": {"summary": "Get a service version", "description": "Get details of a specific service version", "tags": ["Versions"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "version_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Version"}}}}}, "security": [{"APIKeyAuth": []}]}}, "/service/{service_id}/version/{version_id}/activate": {"put": {"summary": "Activate a service version", "description": "Activate a specific version of a service", "tags": ["Versions"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "version_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Version"}}}}}, "security": [{"APIKeyAuth": []}]}}, "/service/{service_id}/version/{version_id}/backend": {"get": {"summary": "List backends", "description": "List all backends for a service version", "tags": ["Backends"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "version_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Backend"}}}}}}, "security": [{"APIKeyAuth": []}]}, "post": {"summary": "Create a backend", "description": "Create a new backend for a service version", "tags": ["Backends"], "parameters": [{"name": "service_id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "version_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BackendCreate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Backend"}}}}}, "security": [{"APIKeyAuth": []}]}}}, "components": {"schemas": {"Service": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "customer_id": {"type": "string"}, "type": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}}}, "ServiceCreate": {"type": "object", "required": ["name"], "properties": {"name": {"type": "string"}, "type": {"type": "string"}}}, "ServiceUpdate": {"type": "object", "properties": {"name": {"type": "string"}}}, "Version": {"type": "object", "properties": {"number": {"type": "integer"}, "service_id": {"type": "string"}, "active": {"type": "boolean"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}}}, "Backend": {"type": "object", "properties": {"name": {"type": "string"}, "address": {"type": "string"}, "port": {"type": "integer"}, "use_ssl": {"type": "boolean"}, "ssl_check_cert": {"type": "boolean"}, "ssl_cert_hostname": {"type": "string"}, "shield": {"type": "string"}, "weight": {"type": "integer"}, "max_conn": {"type": "integer"}, "connect_timeout": {"type": "integer"}, "first_byte_timeout": {"type": "integer"}, "between_bytes_timeout": {"type": "integer"}}}, "BackendCreate": {"type": "object", "required": ["name", "address"], "properties": {"name": {"type": "string"}, "address": {"type": "string"}, "port": {"type": "integer"}, "use_ssl": {"type": "boolean"}, "ssl_check_cert": {"type": "boolean"}, "ssl_cert_hostname": {"type": "string"}, "shield": {"type": "string"}, "weight": {"type": "integer"}, "max_conn": {"type": "integer"}, "connect_timeout": {"type": "integer"}, "first_byte_timeout": {"type": "integer"}, "between_bytes_timeout": {"type": "integer"}}}}, "securitySchemes": {"APIKeyAuth": {"type": "apiKey", "in": "header", "name": "Fastly-Key"}}}}}, {"title": "Booking.com API", "content": {"openapi": "3.0.0", "info": {"title": "Booking.com API", "description": "API for interacting with Booking.com services", "version": "1.0.0", "contact": {"name": "Booking.com API Support", "url": "https://www.booking.com/content/api.html", "email": "api-support@booking.com"}}, "servers": [{"url": "https://api.booking.com/v1"}], "tags": [{"name": "hotels", "description": "Hotel-related operations"}, {"name": "bookings", "description": "Booking-related operations"}, {"name": "users", "description": "User account operations"}, {"name": "reviews", "description": "Review-related operations"}], "paths": {"/hotels": {"get": {"summary": "Search for hotels", "tags": ["hotels"], "parameters": [{"name": "city", "in": "query", "required": true, "schema": {"type": "string"}}, {"name": "checkIn", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}}, {"name": "checkOut", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}}, {"name": "guests", "in": "query", "required": true, "schema": {"type": "integer", "minimum": 1}}, {"name": "rooms", "in": "query", "required": true, "schema": {"type": "integer", "minimum": 1}}, {"name": "priceMin", "in": "query", "schema": {"type": "number"}}, {"name": "priceMax", "in": "query", "schema": {"type": "number"}}, {"name": "starRating", "in": "query", "schema": {"type": "integer", "minimum": 1, "maximum": 5}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Hotel"}}}}}, "400": {"description": "Bad request"}}}}, "/hotels/{hotelId}": {"get": {"summary": "Get hotel details", "tags": ["hotels"], "parameters": [{"name": "hotelId", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Hotel"}}}}, "404": {"description": "Hotel not found"}}}}, "/bookings": {"post": {"summary": "Create a new booking", "tags": ["bookings"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BookingRequest"}}}}, "responses": {"201": {"description": "Booking created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Booking"}}}}, "400": {"description": "Bad request"}}}, "get": {"summary": "Get user's bookings", "tags": ["bookings"], "parameters": [{"name": "userId", "in": "query", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Booking"}}}}}, "404": {"description": "User not found"}}}}, "/bookings/{bookingId}": {"get": {"summary": "Get booking details", "tags": ["bookings"], "parameters": [{"name": "bookingId", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Booking"}}}}, "404": {"description": "Booking not found"}}}, "put": {"summary": "Update a booking", "tags": ["bookings"], "parameters": [{"name": "bookingId", "in": "path", "required": true, "schema": {"type": "integer"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BookingUpdateRequest"}}}}, "responses": {"200": {"description": "Booking updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Booking"}}}}, "400": {"description": "Bad request"}, "404": {"description": "Booking not found"}}}, "delete": {"summary": "Cancel a booking", "tags": ["bookings"], "parameters": [{"name": "bookingId", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"204": {"description": "Booking cancelled"}, "404": {"description": "Booking not found"}}}}, "/users": {"post": {"summary": "Create a new user account", "tags": ["users"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"201": {"description": "User created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Bad request"}}}}, "/users/{userId}": {"get": {"summary": "Get user details", "tags": ["users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}}, "put": {"summary": "Update user details", "tags": ["users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "integer"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"200": {"description": "User updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Bad request"}, "404": {"description": "User not found"}}}}, "/reviews": {"post": {"summary": "Create a new review", "tags": ["reviews"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReviewCreate"}}}}, "responses": {"201": {"description": "Review created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Review"}}}}, "400": {"description": "Bad request"}}}}, "/hotels/{hotelId}/reviews": {"get": {"summary": "Get reviews for a hotel", "tags": ["reviews"], "parameters": [{"name": "hotelId", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Review"}}}}}, "404": {"description": "Hotel not found"}}}}}, "components": {"schemas": {"Hotel": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "address": {"type": "string"}, "city": {"type": "string"}, "country": {"type": "string"}, "starRating": {"type": "integer"}, "description": {"type": "string"}, "amenities": {"type": "array", "items": {"type": "string"}}, "images": {"type": "array", "items": {"type": "string"}}, "price": {"type": "number"}, "availableRooms": {"type": "integer"}}}, "BookingRequest": {"type": "object", "properties": {"hotelId": {"type": "integer"}, "userId": {"type": "integer"}, "checkIn": {"type": "string", "format": "date"}, "checkOut": {"type": "string", "format": "date"}, "guests": {"type": "integer"}, "rooms": {"type": "integer"}}, "required": ["hotelId", "userId", "checkIn", "checkOut", "guests", "rooms"]}, "Booking": {"type": "object", "properties": {"id": {"type": "integer"}, "hotelId": {"type": "integer"}, "userId": {"type": "integer"}, "checkIn": {"type": "string", "format": "date"}, "checkOut": {"type": "string", "format": "date"}, "guests": {"type": "integer"}, "rooms": {"type": "integer"}, "totalPrice": {"type": "number"}, "status": {"type": "string", "enum": ["confirmed", "cancelled", "completed"]}}}, "BookingUpdateRequest": {"type": "object", "properties": {"checkIn": {"type": "string", "format": "date"}, "checkOut": {"type": "string", "format": "date"}, "guests": {"type": "integer"}, "rooms": {"type": "integer"}}}, "UserCreate": {"type": "object", "properties": {"email": {"type": "string", "format": "email"}, "password": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}}, "required": ["email", "password", "firstName", "lastName"]}, "User": {"type": "object", "properties": {"id": {"type": "integer"}, "email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}}}, "UserUpdate": {"type": "object", "properties": {"email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}}}, "ReviewCreate": {"type": "object", "properties": {"hotelId": {"type": "integer"}, "userId": {"type": "integer"}, "rating": {"type": "integer", "minimum": 1, "maximum": 10}, "comment": {"type": "string"}}, "required": ["hotelId", "userId", "rating"]}, "Review": {"type": "object", "properties": {"id": {"type": "integer"}, "hotelId": {"type": "integer"}, "userId": {"type": "integer"}, "rating": {"type": "integer"}, "comment": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}}}}}}}, {"title": "Elasticsearch API", "content": {"openapi": "3.0.0", "info": {"title": "Elasticsearch API", "version": "7.x", "description": "API specification for Elasticsearch", "contact": {"name": "Elastic", "url": "https://www.elastic.co"}}, "servers": [{"url": "http://localhost:9200", "description": "Local Elasticsearch instance"}], "paths": {"/_cluster/health": {"get": {"summary": "Get cluster health", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ClusterHealth"}}}}}}}, "/{index}": {"put": {"summary": "Create an index", "parameters": [{"name": "index", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IndexSettings"}}}}, "responses": {"200": {"description": "Successful response"}}}, "delete": {"summary": "Delete an index", "parameters": [{"name": "index", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response"}}}}, "/{index}/_doc": {"post": {"summary": "Index a document", "parameters": [{"name": "index", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"type": "object"}}}}, "responses": {"201": {"description": "Document indexed"}}}}, "/{index}/_doc/{id}": {"get": {"summary": "Get a document by ID", "parameters": [{"name": "index", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Document"}}}}}}, "put": {"summary": "Index or update a document", "parameters": [{"name": "index", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"type": "object"}}}}, "responses": {"200": {"description": "Document indexed or updated"}}}, "delete": {"summary": "Delete a document", "parameters": [{"name": "index", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Document deleted"}}}}, "/{index}/_search": {"post": {"summary": "Search documents", "parameters": [{"name": "index", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SearchQuery"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SearchResponse"}}}}}}}, "/_bulk": {"post": {"summary": "Perform bulk operations", "requestBody": {"content": {"application/x-ndjson": {"schema": {"type": "string"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BulkResponse"}}}}}}}, "/_cat/indices": {"get": {"summary": "Get information about indices", "parameters": [{"name": "format", "in": "query", "schema": {"type": "string", "enum": ["json", "text"]}}], "responses": {"200": {"description": "Successful response"}}}}}, "components": {"schemas": {"ClusterHealth": {"type": "object", "properties": {"cluster_name": {"type": "string"}, "status": {"type": "string", "enum": ["green", "yellow", "red"]}, "number_of_nodes": {"type": "integer"}, "number_of_data_nodes": {"type": "integer"}, "active_primary_shards": {"type": "integer"}, "active_shards": {"type": "integer"}, "relocating_shards": {"type": "integer"}, "initializing_shards": {"type": "integer"}, "unassigned_shards": {"type": "integer"}}}, "IndexSettings": {"type": "object", "properties": {"settings": {"type": "object"}, "mappings": {"type": "object"}}}, "Document": {"type": "object", "properties": {"_index": {"type": "string"}, "_type": {"type": "string"}, "_id": {"type": "string"}, "_version": {"type": "integer"}, "_source": {"type": "object"}}}, "SearchQuery": {"type": "object", "properties": {"query": {"type": "object"}, "from": {"type": "integer"}, "size": {"type": "integer"}, "sort": {"type": "array", "items": {"type": "object"}}}}, "SearchResponse": {"type": "object", "properties": {"took": {"type": "integer"}, "timed_out": {"type": "boolean"}, "_shards": {"type": "object"}, "hits": {"type": "object", "properties": {"total": {"type": "object"}, "max_score": {"type": "number"}, "hits": {"type": "array", "items": {"$ref": "#/components/schemas/Document"}}}}}}, "BulkResponse": {"type": "object", "properties": {"took": {"type": "integer"}, "errors": {"type": "boolean"}, "items": {"type": "array", "items": {"type": "object"}}}}}}}}, {"title": "Yelp Fusion API", "content": {"openapi": "3.0.0", "info": {"title": "Yelp Fusion API", "description": "The Yelp Fusion API allows you to get the best local content and user reviews from millions of businesses across 32 countries.", "version": "v3", "termsOfService": "https://www.yelp.com/developers/api_terms", "contact": {"name": "Yelp API Support", "url": "https://www.yelp.com/developers/support", "email": "api@yelp.com"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "https://api.yelp.com/v3"}], "paths": {"/businesses/search": {"get": {"summary": "Search for businesses", "description": "This endpoint returns up to 1000 businesses based on the provided search criteria.", "parameters": [{"name": "term", "in": "query", "description": "Search term (e.g. 'food', 'restaurants')", "schema": {"type": "string"}}, {"name": "location", "in": "query", "description": "The location to search for businesses", "schema": {"type": "string"}}, {"name": "latitude", "in": "query", "description": "Latitude of the location", "schema": {"type": "number", "format": "float"}}, {"name": "longitude", "in": "query", "description": "Longitude of the location", "schema": {"type": "number", "format": "float"}}, {"name": "radius", "in": "query", "description": "Search radius in meters", "schema": {"type": "integer", "maximum": 40000}}, {"name": "categories", "in": "query", "description": "Categories to filter the search results", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Number of business results to return", "schema": {"type": "integer", "default": 20, "maximum": 50}}, {"name": "offset", "in": "query", "description": "Offset the list of returned business results", "schema": {"type": "integer", "default": 0, "maximum": 1000}}, {"name": "sort_by", "in": "query", "description": "Sort the results by one of the these modes: best_match, rating, review_count or distance", "schema": {"type": "string", "enum": ["best_match", "rating", "review_count", "distance"], "default": "best_match"}}, {"name": "price", "in": "query", "description": "Pricing levels to filter the search result", "schema": {"type": "string", "enum": ["1", "2", "3", "4"]}}, {"name": "open_now", "in": "query", "description": "Filter for businesses open now", "schema": {"type": "boolean"}}, {"name": "open_at", "in": "query", "description": "Filter for businesses open at a certain time", "schema": {"type": "integer"}}, {"name": "attributes", "in": "query", "description": "Additional filters to search businesses", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessSearchResponse"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}}, "/businesses/{id}": {"get": {"summary": "Get business details", "description": "This endpoint returns detailed business content for a given business alias or ID.", "parameters": [{"name": "id", "in": "path", "description": "The business ID or alias", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Business"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "404": {"description": "Business not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}}, "/businesses/{id}/reviews": {"get": {"summary": "Get business reviews", "description": "This endpoint returns up to three review excerpts for a given business.", "parameters": [{"name": "id", "in": "path", "description": "The business ID", "required": true, "schema": {"type": "string"}}, {"name": "locale", "in": "query", "description": "The locale to return the reviews in", "schema": {"type": "string", "default": "en_US"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReviewsResponse"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "404": {"description": "Business not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}}, "/autocomplete": {"get": {"summary": "Autocomplete", "description": "This endpoint returns autocomplete suggestions for search keywords, businesses and categories.", "parameters": [{"name": "text", "in": "query", "description": "Text to autocomplete", "required": true, "schema": {"type": "string"}}, {"name": "latitude", "in": "query", "description": "Latitude of the location", "schema": {"type": "number", "format": "float"}}, {"name": "longitude", "in": "query", "description": "Longitude of the location", "schema": {"type": "number", "format": "float"}}, {"name": "locale", "in": "query", "description": "The locale to return the autocomplete results in", "schema": {"type": "string", "default": "en_US"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AutocompleteResponse"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}}}, "components": {"securitySchemes": {"api_key": {"type": "apiKey", "name": "Authorization", "in": "header"}}, "schemas": {"BusinessSearchResponse": {"type": "object", "properties": {"businesses": {"type": "array", "items": {"$ref": "#/components/schemas/Business"}}, "total": {"type": "integer"}, "region": {"$ref": "#/components/schemas/Region"}}}, "Business": {"type": "object", "properties": {"id": {"type": "string"}, "alias": {"type": "string"}, "name": {"type": "string"}, "image_url": {"type": "string"}, "is_closed": {"type": "boolean"}, "url": {"type": "string"}, "review_count": {"type": "integer"}, "categories": {"type": "array", "items": {"$ref": "#/components/schemas/Category"}}, "rating": {"type": "number", "format": "float"}, "coordinates": {"$ref": "#/components/schemas/Coordinates"}, "transactions": {"type": "array", "items": {"type": "string"}}, "price": {"type": "string"}, "location": {"$ref": "#/components/schemas/Location"}, "phone": {"type": "string"}, "display_phone": {"type": "string"}, "distance": {"type": "number", "format": "float"}}}, "Category": {"type": "object", "properties": {"alias": {"type": "string"}, "title": {"type": "string"}}}, "Coordinates": {"type": "object", "properties": {"latitude": {"type": "number", "format": "float"}, "longitude": {"type": "number", "format": "float"}}}, "Location": {"type": "object", "properties": {"address1": {"type": "string"}, "address2": {"type": "string"}, "address3": {"type": "string"}, "city": {"type": "string"}, "zip_code": {"type": "string"}, "country": {"type": "string"}, "state": {"type": "string"}, "display_address": {"type": "array", "items": {"type": "string"}}}}, "Region": {"type": "object", "properties": {"center": {"$ref": "#/components/schemas/Coordinates"}}}, "ReviewsResponse": {"type": "object", "properties": {"reviews": {"type": "array", "items": {"$ref": "#/components/schemas/Review"}}, "total": {"type": "integer"}, "possible_languages": {"type": "array", "items": {"type": "string"}}}}, "Review": {"type": "object", "properties": {"id": {"type": "string"}, "url": {"type": "string"}, "text": {"type": "string"}, "rating": {"type": "integer"}, "time_created": {"type": "string"}, "user": {"$ref": "#/components/schemas/User"}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "profile_url": {"type": "string"}, "image_url": {"type": "string"}, "name": {"type": "string"}}}, "AutocompleteResponse": {"type": "object", "properties": {"terms": {"type": "array", "items": {"$ref": "#/components/schemas/Term"}}, "businesses": {"type": "array", "items": {"$ref": "#/components/schemas/AutocompleteBusiness"}}, "categories": {"type": "array", "items": {"$ref": "#/components/schemas/Category"}}}}, "Term": {"type": "object", "properties": {"text": {"type": "string"}}}, "AutocompleteBusiness": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}}}, "ErrorResponse": {"type": "object", "properties": {"error": {"type": "object", "properties": {"code": {"type": "string"}, "description": {"type": "string"}}}}}}}}}, {"title": "Apple API", "content": {"openapi": "3.0.0", "info": {"title": "Apple API", "description": "API for interacting with Apple products, services, and information", "version": "1.0.0", "contact": {"name": "Apple Developer Support", "url": "https://developer.apple.com/support/", "email": "devsupport@apple.com"}}, "servers": [{"url": "https://api.apple.com/v1"}], "tags": [{"name": "devices", "description": "Apple hardware devices"}, {"name": "software", "description": "Apple software and operating systems"}, {"name": "services", "description": "Apple online services"}, {"name": "store", "description": "Apple Store operations"}], "paths": {"/devices": {"get": {"summary": "List all Apple devices", "tags": ["devices"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Device"}}}}}}}}, "/devices/{deviceId}": {"get": {"summary": "Get device details", "tags": ["devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}, "404": {"description": "Device not found"}}}}, "/software": {"get": {"summary": "List all Apple software", "tags": ["software"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software"}}}}}}}}, "/software/{softwareId}": {"get": {"summary": "Get software details", "tags": ["software"], "parameters": [{"name": "softwareId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software"}}}}, "404": {"description": "Software not found"}}}}, "/services": {"get": {"summary": "List all Apple services", "tags": ["services"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Service"}}}}}}}}, "/services/{serviceId}": {"get": {"summary": "Get service details", "tags": ["services"], "parameters": [{"name": "serviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Service"}}}}, "404": {"description": "Service not found"}}}}, "/store/products": {"get": {"summary": "List all products in the Apple Store", "tags": ["store"], "parameters": [{"name": "category", "in": "query", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}}}}}, "/store/products/{productId}": {"get": {"summary": "Get product details", "tags": ["store"], "parameters": [{"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}}, "/store/orders": {"post": {"summary": "Place an order", "tags": ["store"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}, "responses": {"201": {"description": "Order created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrderConfirmation"}}}}, "400": {"description": "Invalid order data"}}}}}, "components": {"schemas": {"Device": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "category": {"type": "string", "enum": ["iPhone", "iPad", "Mac", "Apple Watch", "Apple TV", "AirPods"]}, "releaseDate": {"type": "string", "format": "date"}, "specifications": {"type": "object"}}}, "Software": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "version": {"type": "string"}, "compatibleDevices": {"type": "array", "items": {"type": "string"}}, "releaseDate": {"type": "string", "format": "date"}, "features": {"type": "array", "items": {"type": "string"}}}}, "Service": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "pricing": {"type": "object", "properties": {"amount": {"type": "number"}, "currency": {"type": "string"}, "billingCycle": {"type": "string"}}}, "features": {"type": "array", "items": {"type": "string"}}}}, "Product": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "category": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "description": {"type": "string"}, "inStock": {"type": "boolean"}}}, "Order": {"type": "object", "properties": {"products": {"type": "array", "items": {"type": "object", "properties": {"productId": {"type": "string"}, "quantity": {"type": "integer"}}}}, "shippingAddress": {"$ref": "#/components/schemas/Address"}, "billingAddress": {"$ref": "#/components/schemas/Address"}, "paymentMethod": {"type": "string"}}}, "Address": {"type": "object", "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "street": {"type": "string"}, "city": {"type": "string"}, "state": {"type": "string"}, "postalCode": {"type": "string"}, "country": {"type": "string"}}}, "OrderConfirmation": {"type": "object", "properties": {"orderId": {"type": "string"}, "orderDate": {"type": "string", "format": "date-time"}, "totalAmount": {"type": "number"}, "currency": {"type": "string"}, "estimatedDeliveryDate": {"type": "string", "format": "date"}}}}}}}, {"title": "Adobe API", "content": {"openapi": "3.0.0", "info": {"title": "Adobe API", "description": "API for interacting with various Adobe services and products", "version": "1.0.0", "contact": {"name": "Adobe API Support", "url": "https://www.adobe.com/api-support", "email": "api-support@adobe.com"}}, "servers": [{"url": "https://api.adobe.com/v1"}], "paths": {"/auth/token": {"post": {"summary": "Get access token", "description": "Obtain an access token for API authentication", "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"client_id": {"type": "string"}, "client_secret": {"type": "string"}, "grant_type": {"type": "string", "enum": ["client_credentials"]}}, "required": ["client_id", "client_secret", "grant_type"]}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"access_token": {"type": "string"}, "token_type": {"type": "string"}, "expires_in": {"type": "integer"}}}}}}}}}, "/creative-cloud/assets": {"get": {"summary": "List Creative Cloud assets", "description": "Retrieve a list of assets from Creative Cloud", "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"assets": {"type": "array", "items": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}}}}, "total": {"type": "integer"}}}}}}}, "security": [{"BearerAuth": []}]}, "post": {"summary": "Upload Creative Cloud asset", "description": "Upload a new asset to Creative Cloud", "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"type": "object", "properties": {"file": {"type": "string", "format": "binary"}, "name": {"type": "string"}}, "required": ["file", "name"]}}}}, "responses": {"201": {"description": "Asset created successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}}}}}}}, "security": [{"BearerAuth": []}]}}, "/creative-cloud/assets/{asset_id}": {"get": {"summary": "Get Creative Cloud asset", "description": "Retrieve details of a specific Creative Cloud asset", "parameters": [{"name": "asset_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "modified_at": {"type": "string", "format": "date-time"}, "size": {"type": "integer"}}}}}}}, "security": [{"BearerAuth": []}]}, "delete": {"summary": "Delete Creative Cloud asset", "description": "Delete a specific Creative Cloud asset", "parameters": [{"name": "asset_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Asset deleted successfully"}}, "security": [{"BearerAuth": []}]}}, "/photoshop/edit": {"post": {"summary": "Edit image with Photoshop", "description": "Apply Photoshop edits to an image", "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"image_url": {"type": "string"}, "edits": {"type": "array", "items": {"type": "object", "properties": {"type": {"type": "string", "enum": ["crop", "resize", "filter", "adjust"]}, "params": {"type": "object"}}, "required": ["type", "params"]}}}, "required": ["image_url", "edits"]}}}}, "responses": {"200": {"description": "Edited image", "content": {"application/json": {"schema": {"type": "object", "properties": {"edited_image_url": {"type": "string"}}}}}}}, "security": [{"BearerAuth": []}]}}, "/illustrator/create": {"post": {"summary": "Create vector graphic", "description": "Create a vector graphic using Illustrator", "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"elements": {"type": "array", "items": {"type": "object", "properties": {"type": {"type": "string", "enum": ["shape", "path", "text"]}, "properties": {"type": "object"}}, "required": ["type", "properties"]}}}, "required": ["elements"]}}}}, "responses": {"200": {"description": "Created vector graphic", "content": {"application/json": {"schema": {"type": "object", "properties": {"graphic_url": {"type": "string"}}}}}}}, "security": [{"BearerAuth": []}]}}, "/acrobat/pdf": {"post": {"summary": "Create PDF", "description": "Create a PDF from various file formats", "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"type": "object", "properties": {"file": {"type": "string", "format": "binary"}, "output_type": {"type": "string", "enum": ["pdf"]}}, "required": ["file", "output_type"]}}}}, "responses": {"200": {"description": "Created PDF", "content": {"application/json": {"schema": {"type": "object", "properties": {"pdf_url": {"type": "string"}}}}}}}, "security": [{"BearerAuth": []}]}}, "/acrobat/pdf/{pdf_id}/edit": {"post": {"summary": "Edit PDF", "description": "Edit an existing PDF document", "parameters": [{"name": "pdf_id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"operations": {"type": "array", "items": {"type": "object", "properties": {"type": {"type": "string", "enum": ["add_text", "add_image", "remove_page", "merge"]}, "params": {"type": "object"}}, "required": ["type", "params"]}}}, "required": ["operations"]}}}}, "responses": {"200": {"description": "Edited PDF", "content": {"application/json": {"schema": {"type": "object", "properties": {"edited_pdf_url": {"type": "string"}}}}}}}, "security": [{"BearerAuth": []}]}}}, "components": {"securitySchemes": {"BearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "Intuit API", "content": {"openapi": "3.0.0", "info": {"title": "Intuit API", "description": "API for Intuit services including QuickBooks Online, Payments, and User Management", "version": "1.0.0", "contact": {"name": "Intuit Developer Support", "url": "https://developer.intuit.com/support", "email": "developer_support@intuit.com"}}, "servers": [{"url": "https://api.intuit.com/v1"}], "tags": [{"name": "Authentication", "description": "Authentication operations"}, {"name": "QuickBooks", "description": "QuickBooks Online operations"}, {"name": "Payments", "description": "Payment processing operations"}, {"name": "Users", "description": "User management operations"}], "paths": {"/oauth2/token": {"post": {"tags": ["Authentication"], "summary": "Get OAuth2 token", "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"grant_type": {"type": "string", "enum": ["authorization_code", "refresh_token"]}, "code": {"type": "string"}, "redirect_uri": {"type": "string"}, "client_id": {"type": "string"}, "client_secret": {"type": "string"}}, "required": ["grant_type", "client_id", "client_secret"]}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"access_token": {"type": "string"}, "token_type": {"type": "string"}, "expires_in": {"type": "integer"}, "refresh_token": {"type": "string"}}}}}}}}}, "/quickbooks/v3/company/{realmId}/customer": {"get": {"tags": ["QuickBooks"], "summary": "Get customers", "parameters": [{"name": "realmId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"Customer": {"type": "array", "items": {"$ref": "#/components/schemas/Customer"}}}}}}}}, "security": [{"OAuth2": ["com.intuit.quickbooks.accounting"]}]}, "post": {"tags": ["QuickBooks"], "summary": "Create customer", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Customer"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Customer"}}}}}, "security": [{"OAuth2": ["com.intuit.quickbooks.accounting"]}]}}, "/quickbooks/v3/company/{realmId}/invoice": {"get": {"tags": ["QuickBooks"], "summary": "Get invoices", "parameters": [{"name": "realmId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"Invoice": {"type": "array", "items": {"$ref": "#/components/schemas/Invoice"}}}}}}}}, "security": [{"OAuth2": ["com.intuit.quickbooks.accounting"]}]}, "post": {"tags": ["QuickBooks"], "summary": "Create invoice", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Invoice"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Invoice"}}}}}, "security": [{"OAuth2": ["com.intuit.quickbooks.accounting"]}]}}, "/payments/v3/charges": {"post": {"tags": ["Payments"], "summary": "Create charge", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Charge"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChargeResponse"}}}}}, "security": [{"OAuth2": ["com.intuit.quickbooks.payment"]}]}}, "/payments/v3/refunds": {"post": {"tags": ["Payments"], "summary": "Create refund", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Refund"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefundResponse"}}}}}, "security": [{"OAuth2": ["com.intuit.quickbooks.payment"]}]}}, "/users/v1": {"get": {"tags": ["Users"], "summary": "Get user info", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"OAuth2": ["openid", "profile", "email"]}]}}}, "components": {"schemas": {"Customer": {"type": "object", "properties": {"Id": {"type": "string"}, "DisplayName": {"type": "string"}, "GivenName": {"type": "string"}, "FamilyName": {"type": "string"}, "PrimaryEmailAddr": {"type": "object", "properties": {"Address": {"type": "string"}}}, "PrimaryPhone": {"type": "object", "properties": {"FreeFormNumber": {"type": "string"}}}}}, "Invoice": {"type": "object", "properties": {"Id": {"type": "string"}, "CustomerRef": {"type": "object", "properties": {"value": {"type": "string"}}}, "TxnDate": {"type": "string", "format": "date"}, "DueDate": {"type": "string", "format": "date"}, "TotalAmt": {"type": "number"}, "Line": {"type": "array", "items": {"type": "object", "properties": {"Amount": {"type": "number"}, "Description": {"type": "string"}, "DetailType": {"type": "string"}}}}}}, "Charge": {"type": "object", "properties": {"amount": {"type": "number"}, "currency": {"type": "string"}, "card": {"type": "object", "properties": {"number": {"type": "string"}, "expMonth": {"type": "string"}, "expYear": {"type": "string"}, "cvc": {"type": "string"}}}, "context": {"type": "object", "properties": {"mobile": {"type": "boolean"}, "isEcommerce": {"type": "boolean"}}}}}, "ChargeResponse": {"type": "object", "properties": {"id": {"type": "string"}, "status": {"type": "string"}, "amount": {"type": "number"}, "currency": {"type": "string"}, "created": {"type": "string", "format": "date-time"}}}, "Refund": {"type": "object", "properties": {"amount": {"type": "number"}, "chargeId": {"type": "string"}}}, "RefundResponse": {"type": "object", "properties": {"id": {"type": "string"}, "amount": {"type": "number"}, "status": {"type": "string"}, "created": {"type": "string", "format": "date-time"}}}, "User": {"type": "object", "properties": {"sub": {"type": "string"}, "givenName": {"type": "string"}, "familyName": {"type": "string"}, "email": {"type": "string"}}}}, "securitySchemes": {"OAuth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://appcenter.intuit.com/connect/oauth2", "tokenUrl": "https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer", "scopes": {"com.intuit.quickbooks.accounting": "QuickBooks Online Accounting API", "com.intuit.quickbooks.payment": "QuickBooks Payments API", "openid": "OpenID Connect", "profile": "User profile information", "email": "User email address"}}}}}}}}, {"title": "Cisco Network Management API", "content": {"openapi": "3.0.0", "info": {"title": "Cisco Network Management API", "description": "API for managing Cisco networking devices, configurations, and monitoring", "version": "1.0.0", "contact": {"name": "Cisco API Support", "url": "https://www.cisco.com/support", "email": "api-support@cisco.com"}}, "servers": [{"url": "https://api.cisco.com/v1"}], "tags": [{"name": "Devices", "description": "Operations related to networking devices"}, {"name": "Configurations", "description": "Operations related to device configurations"}, {"name": "Monitoring", "description": "Operations related to device monitoring"}, {"name": "Users", "description": "Operations related to user management"}], "paths": {"/devices": {"get": {"summary": "List all devices", "tags": ["Devices"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Device"}}}}}}}, "post": {"summary": "Add a new device", "tags": ["Devices"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceInput"}}}}, "responses": {"201": {"description": "Device created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}}, "/devices/{deviceId}": {"get": {"summary": "Get device details", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}, "put": {"summary": "Update device details", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceInput"}}}}, "responses": {"200": {"description": "Device updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}, "delete": {"summary": "Delete a device", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Device deleted successfully"}}}}, "/devices/{deviceId}/config": {"get": {"summary": "Get device configuration", "tags": ["Configurations"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Configuration"}}}}}}, "put": {"summary": "Update device configuration", "tags": ["Configurations"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationInput"}}}}, "responses": {"200": {"description": "Configuration updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Configuration"}}}}}}}, "/devices/{deviceId}/status": {"get": {"summary": "Get device status", "tags": ["Monitoring"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceStatus"}}}}}}}, "/devices/{deviceId}/interfaces": {"get": {"summary": "List device interfaces", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Interface"}}}}}}}}, "/users": {"get": {"summary": "List all users", "tags": ["Users"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}}}, "post": {"summary": "Create a new user", "tags": ["Users"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserInput"}}}}, "responses": {"201": {"description": "User created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}}, "/users/{userId}": {"get": {"summary": "Get user details", "tags": ["Users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}, "put": {"summary": "Update user details", "tags": ["Users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserInput"}}}}, "responses": {"200": {"description": "User updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}, "delete": {"summary": "Delete a user", "tags": ["Users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "User deleted successfully"}}}}}, "components": {"schemas": {"Device": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}, "model": {"type": "string"}, "serialNumber": {"type": "string"}, "ipAddress": {"type": "string"}, "firmwareVersion": {"type": "string"}}}, "DeviceInput": {"type": "object", "required": ["name", "type", "ipAddress"], "properties": {"name": {"type": "string"}, "type": {"type": "string"}, "model": {"type": "string"}, "serialNumber": {"type": "string"}, "ipAddress": {"type": "string"}}}, "Configuration": {"type": "object", "properties": {"id": {"type": "string"}, "deviceId": {"type": "string"}, "content": {"type": "string"}, "lastModified": {"type": "string", "format": "date-time"}}}, "ConfigurationInput": {"type": "object", "required": ["content"], "properties": {"content": {"type": "string"}}}, "DeviceStatus": {"type": "object", "properties": {"deviceId": {"type": "string"}, "status": {"type": "string", "enum": ["online", "offline", "maintenance"]}, "cpuUsage": {"type": "number"}, "memoryUsage": {"type": "number"}, "uptime": {"type": "number"}, "lastChecked": {"type": "string", "format": "date-time"}}}, "Interface": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}, "speed": {"type": "string"}, "status": {"type": "string", "enum": ["up", "down"]}, "ipAddress": {"type": "string"}, "macAddress": {"type": "string"}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "username": {"type": "string"}, "email": {"type": "string"}, "role": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}, "lastLogin": {"type": "string", "format": "date-time"}}}, "UserInput": {"type": "object", "required": ["username", "email", "password"], "properties": {"username": {"type": "string"}, "email": {"type": "string"}, "password": {"type": "string"}, "role": {"type": "string"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}, "security": [{"bearerAuth": []}]}}, {"title": "GitLab API", "content": {"openapi": "3.0.0", "info": {"title": "GitLab API", "description": "API specification for GitLab, a web-based DevOps lifecycle tool", "version": "4.0.0", "contact": {"name": "GitLab", "url": "https://gitlab.com", "email": "support@gitlab.com"}, "license": {"name": "MIT", "url": "https://opensource.org/licenses/MIT"}}, "servers": [{"url": "https://gitlab.com/api/v4", "description": "GitLab.com API"}, {"url": "https://{custom_url}/api/v4", "description": "Self-hosted GitLab instance", "variables": {"custom_url": {"default": "gitlab.example.com", "description": "Your GitLab instance URL"}}}], "paths": {"/projects": {"get": {"summary": "List projects", "description": "Get a list of projects accessible by the authenticated user", "tags": ["Projects"], "parameters": [{"name": "membership", "in": "query", "description": "Limit by projects that the current user is a member of", "schema": {"type": "boolean"}}, {"name": "search", "in": "query", "description": "Return list of projects matching the search criteria", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}}}}, "post": {"summary": "Create project", "description": "Creates a new project owned by the authenticated user", "tags": ["Projects"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectCreate"}}}}, "responses": {"201": {"description": "Project created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}}}}, "/projects/{id}": {"get": {"summary": "Get project", "description": "Get a specific project", "tags": ["Projects"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "The ID or URL-encoded path of the project", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}}}, "delete": {"summary": "Delete project", "description": "Marks a project to be deleted", "tags": ["Projects"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "The ID or URL-encoded path of the project", "schema": {"type": "string"}}], "responses": {"202": {"description": "Project deletion scheduled"}}}}, "/projects/{id}/repository/branches": {"get": {"summary": "List branches", "description": "Get a list of repository branches from a project", "tags": ["Branches"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "The ID or URL-encoded path of the project", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Branch"}}}}}}}, "post": {"summary": "Create branch", "description": "Creates a new branch in the repository", "tags": ["Branches"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "The ID or URL-encoded path of the project", "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BranchCreate"}}}}, "responses": {"201": {"description": "Branch created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Branch"}}}}}}}, "/projects/{id}/merge_requests": {"get": {"summary": "List merge requests", "description": "Get all merge requests for this project", "tags": ["Merge Requests"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "The ID or URL-encoded path of the project", "schema": {"type": "string"}}, {"name": "state", "in": "query", "description": "Return all merge requests or just those that are opened, closed, or merged", "schema": {"type": "string", "enum": ["opened", "closed", "merged", "all"]}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/MergeRequest"}}}}}}}, "post": {"summary": "Create merge request", "description": "Creates a new merge request", "tags": ["Merge Requests"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "The ID or URL-encoded path of the project", "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MergeRequestCreate"}}}}, "responses": {"201": {"description": "Merge request created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MergeRequest"}}}}}}}, "/projects/{id}/issues": {"get": {"summary": "List project issues", "description": "Get a list of project issues", "tags": ["Issues"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "The ID or URL-encoded path of the project", "schema": {"type": "string"}}, {"name": "state", "in": "query", "description": "Return all issues or just those that are opened or closed", "schema": {"type": "string", "enum": ["opened", "closed", "all"]}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Issue"}}}}}}}, "post": {"summary": "Create issue", "description": "Creates a new project issue", "tags": ["Issues"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "The ID or URL-encoded path of the project", "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IssueCreate"}}}}, "responses": {"201": {"description": "Issue created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Issue"}}}}}}}}, "components": {"schemas": {"Project": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "description": {"type": "string"}, "web_url": {"type": "string"}, "avatar_url": {"type": "string"}, "star_count": {"type": "integer"}, "forks_count": {"type": "integer"}, "created_at": {"type": "string", "format": "date-time"}, "last_activity_at": {"type": "string", "format": "date-time"}}}, "ProjectCreate": {"type": "object", "required": ["name"], "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "visibility": {"type": "string", "enum": ["private", "internal", "public"]}, "initialize_with_readme": {"type": "boolean"}}}, "Branch": {"type": "object", "properties": {"name": {"type": "string"}, "protected": {"type": "boolean"}, "merged": {"type": "boolean"}, "developers_can_push": {"type": "boolean"}, "developers_can_merge": {"type": "boolean"}, "commit": {"$ref": "#/components/schemas/Commit"}}}, "BranchCreate": {"type": "object", "required": ["branch", "ref"], "properties": {"branch": {"type": "string", "description": "The name of the new branch"}, "ref": {"type": "string", "description": "The branch name or commit SHA to create branch from"}}}, "Commit": {"type": "object", "properties": {"id": {"type": "string"}, "short_id": {"type": "string"}, "title": {"type": "string"}, "author_name": {"type": "string"}, "author_email": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}}}, "MergeRequest": {"type": "object", "properties": {"id": {"type": "integer"}, "iid": {"type": "integer"}, "project_id": {"type": "integer"}, "title": {"type": "string"}, "description": {"type": "string"}, "state": {"type": "string", "enum": ["opened", "closed", "merged"]}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}, "source_branch": {"type": "string"}, "target_branch": {"type": "string"}, "author": {"$ref": "#/components/schemas/User"}}}, "MergeRequestCreate": {"type": "object", "required": ["source_branch", "target_branch", "title"], "properties": {"source_branch": {"type": "string"}, "target_branch": {"type": "string"}, "title": {"type": "string"}, "description": {"type": "string"}, "assignee_id": {"type": "integer"}, "remove_source_branch": {"type": "boolean"}}}, "Issue": {"type": "object", "properties": {"id": {"type": "integer"}, "iid": {"type": "integer"}, "project_id": {"type": "integer"}, "title": {"type": "string"}, "description": {"type": "string"}, "state": {"type": "string", "enum": ["opened", "closed"]}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}, "author": {"$ref": "#/components/schemas/User"}, "assignees": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "IssueCreate": {"type": "object", "required": ["title"], "properties": {"title": {"type": "string"}, "description": {"type": "string"}, "assignee_ids": {"type": "array", "items": {"type": "integer"}}, "milestone_id": {"type": "integer"}, "labels": {"type": "string", "description": "Comma-separated label names"}}}, "User": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "username": {"type": "string"}, "avatar_url": {"type": "string"}, "web_url": {"type": "string"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}, "security": [{"bearerAuth": []}]}}, {"title": "AMD API", "content": {"openapi": "3.0.0", "info": {"title": "AMD API", "description": "API for Advanced Micro Devices (AMD) product information, financials, stock data, and company details", "version": "1.0.0", "contact": {"name": "AMD API Support", "email": "api-support@amd.com", "url": "https://www.amd.com/en/support"}}, "servers": [{"url": "https://api.amd.com/v1"}], "paths": {"/products": {"get": {"summary": "List all AMD products", "description": "Returns a list of all AMD products", "parameters": [{"name": "category", "in": "query", "description": "Filter products by category", "schema": {"type": "string", "enum": ["cpu", "gpu", "apu", "embedded"]}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "minimum": 1, "maximum": 100, "default": 20}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}}}}}, "/products/{productId}": {"get": {"summary": "Get product details", "description": "Returns details for a specific AMD product", "parameters": [{"name": "productId", "in": "path", "required": true, "description": "ID of the product to retrieve", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}}, "/financials": {"get": {"summary": "Get financial information", "description": "Returns AMD's financial information", "parameters": [{"name": "year", "in": "query", "description": "Filter financials by year", "schema": {"type": "integer"}}, {"name": "quarter", "in": "query", "description": "Filter financials by quarter", "schema": {"type": "integer", "minimum": 1, "maximum": 4}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Financials"}}}}}}}, "/stock": {"get": {"summary": "Get stock information", "description": "Returns current AMD stock information", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StockInfo"}}}}}}}, "/company": {"get": {"summary": "Get company information", "description": "Returns general information about AMD", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CompanyInfo"}}}}}}}}, "components": {"schemas": {"Product": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "category": {"type": "string", "enum": ["cpu", "gpu", "apu", "embedded"]}, "description": {"type": "string"}, "specifications": {"type": "object"}, "price": {"type": "number"}, "releaseDate": {"type": "string", "format": "date"}}}, "Financials": {"type": "object", "properties": {"year": {"type": "integer"}, "quarter": {"type": "integer"}, "revenue": {"type": "number"}, "netIncome": {"type": "number"}, "eps": {"type": "number"}, "cashFlow": {"type": "number"}}}, "StockInfo": {"type": "object", "properties": {"symbol": {"type": "string"}, "currentPrice": {"type": "number"}, "change": {"type": "number"}, "changePercentage": {"type": "number"}, "volume": {"type": "integer"}, "marketCap": {"type": "number"}, "lastUpdated": {"type": "string", "format": "date-time"}}}, "CompanyInfo": {"type": "object", "properties": {"name": {"type": "string"}, "founded": {"type": "string", "format": "date"}, "headquarters": {"type": "string"}, "ceo": {"type": "string"}, "employees": {"type": "integer"}, "description": {"type": "string"}, "website": {"type": "string", "format": "uri"}}}}}}}, {"title": "Atlassian API", "content": {"openapi": "3.0.0", "info": {"title": "Atlassian API", "description": "API for interacting with Atlassian products (Jira and Trello)", "version": "1.0.0", "contact": {"name": "Atlassian Support", "url": "https://support.atlassian.com"}}, "servers": [{"url": "https://api.atlassian.com/v1"}], "tags": [{"name": "Jira", "description": "Jira-related operations"}, {"name": "Trello", "description": "Trello-related operations"}], "paths": {"/jira/issues": {"get": {"summary": "Get Jira issues", "tags": ["Jira"], "parameters": [{"name": "project", "in": "query", "schema": {"type": "string"}, "description": "Project key"}, {"name": "status", "in": "query", "schema": {"type": "string"}, "description": "Issue status"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/JiraIssue"}}}}}}}, "post": {"summary": "Create a new Jira issue", "tags": ["Jira"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JiraIssueCreate"}}}}, "responses": {"201": {"description": "Issue created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JiraIssue"}}}}}}}, "/jira/issues/{issueId}": {"get": {"summary": "Get a specific Jira issue", "tags": ["Jira"], "parameters": [{"name": "issueId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JiraIssue"}}}}}}, "put": {"summary": "Update a Jira issue", "tags": ["Jira"], "parameters": [{"name": "issueId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JiraIssueUpdate"}}}}, "responses": {"200": {"description": "Issue updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JiraIssue"}}}}}}, "delete": {"summary": "Delete a Jira issue", "tags": ["Jira"], "parameters": [{"name": "issueId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Issue deleted successfully"}}}}, "/trello/boards": {"get": {"summary": "Get Trello boards", "tags": ["Trello"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TrelloBoard"}}}}}}}, "post": {"summary": "Create a new Trello board", "tags": ["Trello"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrelloBoardCreate"}}}}, "responses": {"201": {"description": "Board created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrelloBoard"}}}}}}}, "/trello/boards/{boardId}": {"get": {"summary": "Get a specific Trello board", "tags": ["Trello"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrelloBoard"}}}}}}, "put": {"summary": "Update a Trello board", "tags": ["Trello"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrelloBoardUpdate"}}}}, "responses": {"200": {"description": "Board updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrelloBoard"}}}}}}, "delete": {"summary": "Delete a Trello board", "tags": ["Trello"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Board deleted successfully"}}}}}, "components": {"schemas": {"JiraIssue": {"type": "object", "properties": {"id": {"type": "string"}, "key": {"type": "string"}, "summary": {"type": "string"}, "description": {"type": "string"}, "status": {"type": "string"}, "assignee": {"type": "string"}, "reporter": {"type": "string"}, "created": {"type": "string", "format": "date-time"}, "updated": {"type": "string", "format": "date-time"}}}, "JiraIssueCreate": {"type": "object", "required": ["summary", "projectKey", "issueType"], "properties": {"summary": {"type": "string"}, "description": {"type": "string"}, "projectKey": {"type": "string"}, "issueType": {"type": "string"}, "assignee": {"type": "string"}}}, "JiraIssueUpdate": {"type": "object", "properties": {"summary": {"type": "string"}, "description": {"type": "string"}, "status": {"type": "string"}, "assignee": {"type": "string"}}}, "TrelloBoard": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "url": {"type": "string"}, "closed": {"type": "boolean"}, "organizationId": {"type": "string"}, "created": {"type": "string", "format": "date-time"}, "updated": {"type": "string", "format": "date-time"}}}, "TrelloBoardCreate": {"type": "object", "required": ["name"], "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "organizationId": {"type": "string"}}}, "TrelloBoardUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "closed": {"type": "boolean"}}}}, "securitySchemes": {"BearerAuth": {"type": "http", "scheme": "bearer"}}}, "security": [{"BearerAuth": []}]}}, {"title": "Stripe API", "content": {"openapi": "3.0.0", "info": {"title": "Stripe API", "description": "The Stripe REST API. Please see https://stripe.com/docs/api for more details.", "version": "2020-08-27", "contact": {"name": "Stripe Support", "url": "https://support.stripe.com/", "email": "support@stripe.com"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "https://api.stripe.com/v1"}], "tags": [{"name": "Charges", "description": "Create and manage one-time charges"}, {"name": "Customers", "description": "Create and manage customers"}, {"name": "Products", "description": "Create and manage products"}, {"name": "Prices", "description": "Create and manage prices for products"}, {"name": "PaymentIntents", "description": "Create and manage payment intents"}, {"name": "PaymentMethods", "description": "Create and manage payment methods"}, {"name": "Subscriptions", "description": "Create and manage subscriptions"}, {"name": "Invoices", "description": "Create and manage invoices"}, {"name": "Refunds", "description": "Create and manage refunds"}, {"name": "Disputes", "description": "Manage disputes"}, {"name": "Tokens", "description": "Create tokens for sensitive information"}, {"name": "Balance", "description": "Retrieve account balance"}, {"name": "Events", "description": "Retrieve events"}], "paths": {"/charges": {"post": {"tags": ["Charges"], "summary": "Create a charge", "description": "To charge a credit card or other payment source, you create a Charge object.", "operationId": "createCharge", "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CreateChargeRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Charge"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"bearerAuth": []}]}, "get": {"tags": ["Charges"], "summary": "List all charges", "description": "Returns a list of charges you've previously created.", "operationId": "listCharges", "parameters": [{"name": "limit", "in": "query", "description": "A limit on the number of objects to be returned.", "schema": {"type": "integer"}}, {"name": "starting_after", "in": "query", "description": "A cursor for use in pagination.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Charge"}}, "has_more": {"type": "boolean"}, "url": {"type": "string"}}}}}}}, "security": [{"bearerAuth": []}]}}, "/charges/{charge_id}": {"get": {"tags": ["Charges"], "summary": "Retrieve a charge", "description": "Retrieves the details of a charge that has previously been created.", "operationId": "retrieveCharge", "parameters": [{"name": "charge_id", "in": "path", "required": true, "description": "Unique identifier of the charge to be retrieved", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Charge"}}}}, "404": {"description": "Not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"bearerAuth": []}]}}, "/customers": {"post": {"tags": ["Customers"], "summary": "Create a customer", "description": "Creates a new customer object.", "operationId": "createCustomer", "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CreateCustomerRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Customer"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"bearerAuth": []}]}, "get": {"tags": ["Customers"], "summary": "List all customers", "description": "Returns a list of your customers.", "operationId": "listCustomers", "parameters": [{"name": "limit", "in": "query", "description": "A limit on the number of objects to be returned.", "schema": {"type": "integer"}}, {"name": "starting_after", "in": "query", "description": "A cursor for use in pagination.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Customer"}}, "has_more": {"type": "boolean"}, "url": {"type": "string"}}}}}}}, "security": [{"bearerAuth": []}]}}, "/payment_intents": {"post": {"tags": ["PaymentIntents"], "summary": "Create a PaymentIntent", "description": "Creates a PaymentIntent object.", "operationId": "createPaymentIntent", "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CreatePaymentIntentRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaymentIntent"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"bearerAuth": []}]}}, "/subscriptions": {"post": {"tags": ["Subscriptions"], "summary": "Create a subscription", "description": "Creates a new subscription on an existing customer.", "operationId": "createSubscription", "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CreateSubscriptionRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Subscription"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"bearerAuth": []}]}}, "/balance": {"get": {"tags": ["Balance"], "summary": "Retrieve balance", "description": "Retrieves the current account balance.", "operationId": "retrieveBalance", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Balance"}}}}}, "security": [{"bearerAuth": []}]}}}, "components": {"schemas": {"CreateChargeRequest": {"type": "object", "required": ["amount", "currency", "source"], "properties": {"amount": {"type": "integer", "description": "Amount in cents to be charged"}, "currency": {"type": "string", "description": "Three-letter ISO currency code"}, "source": {"type": "string", "description": "A payment source to be charged, such as a credit card"}, "description": {"type": "string", "description": "An arbitrary string attached to the object"}}}, "Charge": {"type": "object", "properties": {"id": {"type": "string"}, "object": {"type": "string", "enum": ["charge"]}, "amount": {"type": "integer"}, "amount_refunded": {"type": "integer"}, "balance_transaction": {"type": "string"}, "captured": {"type": "boolean"}, "created": {"type": "integer"}, "currency": {"type": "string"}, "customer": {"type": "string"}, "description": {"type": "string"}, "paid": {"type": "boolean"}, "payment_method": {"type": "string"}, "refunded": {"type": "boolean"}, "status": {"type": "string", "enum": ["succeeded", "pending", "failed"]}}}, "CreateCustomerRequest": {"type": "object", "properties": {"email": {"type": "string", "description": "Customer's email address"}, "name": {"type": "string", "description": "Customer's full name or business name"}, "description": {"type": "string", "description": "An arbitrary string that you can attach to a customer object"}, "source": {"type": "string", "description": "The source can either be a token, like the ones returned by Stripe.js, or a dictionary containing a user's credit card details"}}}, "Customer": {"type": "object", "properties": {"id": {"type": "string"}, "object": {"type": "string", "enum": ["customer"]}, "created": {"type": "integer"}, "email": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "default_source": {"type": "string"}}}, "CreatePaymentIntentRequest": {"type": "object", "required": ["amount", "currency"], "properties": {"amount": {"type": "integer", "description": "Amount intended to be collected by this PaymentIntent"}, "currency": {"type": "string", "description": "Three-letter ISO currency code"}, "payment_method_types": {"type": "array", "items": {"type": "string"}, "description": "The list of payment method types that this PaymentIntent is allowed to use"}}}, "PaymentIntent": {"type": "object", "properties": {"id": {"type": "string"}, "object": {"type": "string", "enum": ["payment_intent"]}, "amount": {"type": "integer"}, "currency": {"type": "string"}, "client_secret": {"type": "string"}, "status": {"type": "string", "enum": ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"]}}}, "CreateSubscriptionRequest": {"type": "object", "required": ["customer", "items"], "properties": {"customer": {"type": "string", "description": "The identifier of the customer to subscribe"}, "items": {"type": "array", "items": {"type": "object", "properties": {"price": {"type": "string", "description": "The identifier of the price to subscribe to"}}}, "description": "A list of prices and quantities that this subscription should contain"}}}, "Subscription": {"type": "object", "properties": {"id": {"type": "string"}, "object": {"type": "string", "enum": ["subscription"]}, "current_period_end": {"type": "integer"}, "current_period_start": {"type": "integer"}, "customer": {"type": "string"}, "items": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "object", "properties": {"id": {"type": "string"}, "price": {"type": "object", "properties": {"id": {"type": "string"}}}}}}}}, "status": {"type": "string", "enum": ["trialing", "active", "past_due", "canceled", "unpaid"]}}}, "Balance": {"type": "object", "properties": {"object": {"type": "string", "enum": ["balance"]}, "available": {"type": "array", "items": {"type": "object", "properties": {"amount": {"type": "integer"}, "currency": {"type": "string"}}}}, "pending": {"type": "array", "items": {"type": "object", "properties": {"amount": {"type": "integer"}, "currency": {"type": "string"}}}}}}, "Error": {"type": "object", "properties": {"error": {"type": "object", "properties": {"type": {"type": "string"}, "message": {"type": "string"}, "code": {"type": "string"}}}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}}}, {"title": "Box API", "content": {"openapi": "3.0.0", "info": {"title": "Box API", "description": "The Box Content API gives you access to secure content management and content experience features for use in your own app.", "version": "2.0.0", "contact": {"name": "Box Developer Support", "url": "https://developer.box.com", "email": "developers@box.com"}}, "servers": [{"url": "https://api.box.com/2.0"}], "paths": {"/folders/{folder_id}": {"get": {"summary": "Get folder information", "description": "Retrieves details for a specific folder.", "parameters": [{"name": "folder_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Folder"}}}}}, "security": [{"OAuth2": ["root_readonly"]}]}, "put": {"summary": "Update folder", "description": "Updates information for a folder.", "parameters": [{"name": "folder_id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FolderUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Folder"}}}}}, "security": [{"OAuth2": ["root_readwrite"]}]}, "delete": {"summary": "Delete folder", "description": "Deletes a folder.", "parameters": [{"name": "folder_id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "recursive", "in": "query", "schema": {"type": "boolean"}}], "responses": {"204": {"description": "No content"}}, "security": [{"OAuth2": ["root_readwrite"]}]}}, "/folders": {"post": {"summary": "Create folder", "description": "Creates a new folder.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FolderCreate"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Folder"}}}}}, "security": [{"OAuth2": ["root_readwrite"]}]}}, "/files/{file_id}": {"get": {"summary": "Get file information", "description": "Retrieves details for a specific file.", "parameters": [{"name": "file_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/File"}}}}}, "security": [{"OAuth2": ["root_readonly"]}]}, "put": {"summary": "Update file", "description": "Updates information for a file.", "parameters": [{"name": "file_id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FileUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/File"}}}}}, "security": [{"OAuth2": ["root_readwrite"]}]}, "delete": {"summary": "Delete file", "description": "Deletes a file.", "parameters": [{"name": "file_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "No content"}}, "security": [{"OAuth2": ["root_readwrite"]}]}}, "/files/{file_id}/content": {"get": {"summary": "Download file", "description": "Retrieves the actual data of the file.", "parameters": [{"name": "file_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/octet-stream": {"schema": {"type": "string", "format": "binary"}}}}}, "security": [{"OAuth2": ["root_readonly"]}]}}, "/files/content": {"post": {"summary": "Upload file", "description": "Uploads a new file.", "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"type": "object", "properties": {"attributes": {"$ref": "#/components/schemas/FileUpload"}, "file": {"type": "string", "format": "binary"}}}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/File"}}}}}, "security": [{"OAuth2": ["root_readwrite"]}]}}, "/users": {"get": {"summary": "List enterprise users", "description": "Returns a list of all users for the Enterprise along with their user_id, public_name, and login.", "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer"}}, {"name": "offset", "in": "query", "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"total_count": {"type": "integer"}, "entries": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}}}}, "security": [{"OAuth2": ["manage_enterprise"]}]}, "post": {"summary": "Create user", "description": "Creates a new managed user in an enterprise.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"OAuth2": ["manage_enterprise"]}]}}, "/users/{user_id}": {"get": {"summary": "Get user information", "description": "Retrieves information about a user in the enterprise.", "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"OAuth2": ["manage_enterprise"]}]}, "put": {"summary": "Update user", "description": "Updates information about a user in the enterprise.", "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"OAuth2": ["manage_enterprise"]}]}, "delete": {"summary": "Delete user", "description": "Deletes a user in the enterprise.", "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "No content"}}, "security": [{"OAuth2": ["manage_enterprise"]}]}}}, "components": {"schemas": {"Folder": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["folder"]}, "name": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "modified_at": {"type": "string", "format": "date-time"}, "description": {"type": "string"}, "size": {"type": "integer"}, "path_collection": {"type": "object", "properties": {"total_count": {"type": "integer"}, "entries": {"type": "array", "items": {"$ref": "#/components/schemas/Folder"}}}}, "created_by": {"$ref": "#/components/schemas/User"}, "modified_by": {"$ref": "#/components/schemas/User"}, "owned_by": {"$ref": "#/components/schemas/User"}, "shared_link": {"$ref": "#/components/schemas/SharedLink"}, "folder_upload_email": {"type": "object", "properties": {"access": {"type": "string", "enum": ["open", "collaborators"]}, "email": {"type": "string"}}}, "parent": {"$ref": "#/components/schemas/Folder"}, "item_status": {"type": "string", "enum": ["active", "trashed", "deleted"]}}}, "FolderUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "parent": {"type": "object", "properties": {"id": {"type": "string"}}}, "shared_link": {"$ref": "#/components/schemas/SharedLink"}, "folder_upload_email": {"type": "object", "properties": {"access": {"type": "string", "enum": ["open", "collaborators"]}}}}}, "FolderCreate": {"type": "object", "required": ["name", "parent"], "properties": {"name": {"type": "string"}, "parent": {"type": "object", "properties": {"id": {"type": "string"}}}}}, "File": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["file"]}, "name": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "modified_at": {"type": "string", "format": "date-time"}, "description": {"type": "string"}, "size": {"type": "integer"}, "path_collection": {"type": "object", "properties": {"total_count": {"type": "integer"}, "entries": {"type": "array", "items": {"$ref": "#/components/schemas/Folder"}}}}, "created_by": {"$ref": "#/components/schemas/User"}, "modified_by": {"$ref": "#/components/schemas/User"}, "owned_by": {"$ref": "#/components/schemas/User"}, "shared_link": {"$ref": "#/components/schemas/SharedLink"}, "parent": {"$ref": "#/components/schemas/Folder"}, "item_status": {"type": "string", "enum": ["active", "trashed", "deleted"]}, "version_number": {"type": "string"}, "sha1": {"type": "string"}, "file_version": {"$ref": "#/components/schemas/FileVersion"}}}, "FileUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "parent": {"type": "object", "properties": {"id": {"type": "string"}}}, "shared_link": {"$ref": "#/components/schemas/SharedLink"}}}, "FileUpload": {"type": "object", "required": ["name", "parent"], "properties": {"name": {"type": "string"}, "parent": {"type": "object", "properties": {"id": {"type": "string"}}}}}, "FileVersion": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["file_version"]}, "sha1": {"type": "string"}, "name": {"type": "string"}, "size": {"type": "integer"}, "created_at": {"type": "string", "format": "date-time"}, "modified_at": {"type": "string", "format": "date-time"}, "modified_by": {"$ref": "#/components/schemas/User"}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["user"]}, "name": {"type": "string"}, "login": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "modified_at": {"type": "string", "format": "date-time"}, "language": {"type": "string"}, "timezone": {"type": "string"}, "space_amount": {"type": "integer"}, "space_used": {"type": "integer"}, "max_upload_size": {"type": "integer"}, "status": {"type": "string", "enum": ["active", "inactive"]}, "job_title": {"type": "string"}, "phone": {"type": "string"}, "address": {"type": "string"}, "avatar_url": {"type": "string"}}}, "UserCreate": {"type": "object", "required": ["name", "login"], "properties": {"name": {"type": "string"}, "login": {"type": "string"}, "role": {"type": "string", "enum": ["user", "admin"]}, "language": {"type": "string"}, "is_sync_enabled": {"type": "boolean"}, "job_title": {"type": "string"}, "phone": {"type": "string"}, "address": {"type": "string"}, "space_amount": {"type": "integer"}, "tracking_codes": {"type": "array", "items": {"type": "object", "properties": {"type": {"type": "string"}, "value": {"type": "string"}}}}, "can_see_managed_users": {"type": "boolean"}, "timezone": {"type": "string"}, "is_external_collab_restricted": {"type": "boolean"}, "is_exempt_from_device_limits": {"type": "boolean"}, "is_exempt_from_login_verification": {"type": "boolean"}, "status": {"type": "string", "enum": ["active", "inactive"]}}}, "UserUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "role": {"type": "string", "enum": ["user", "admin"]}, "language": {"type": "string"}, "is_sync_enabled": {"type": "boolean"}, "job_title": {"type": "string"}, "phone": {"type": "string"}, "address": {"type": "string"}, "space_amount": {"type": "integer"}, "tracking_codes": {"type": "array", "items": {"type": "object", "properties": {"type": {"type": "string"}, "value": {"type": "string"}}}}, "can_see_managed_users": {"type": "boolean"}, "timezone": {"type": "string"}, "is_external_collab_restricted": {"type": "boolean"}, "is_exempt_from_device_limits": {"type": "boolean"}, "is_exempt_from_login_verification": {"type": "boolean"}, "status": {"type": "string", "enum": ["active", "inactive"]}}}, "SharedLink": {"type": "object", "properties": {"url": {"type": "string"}, "download_url": {"type": "string"}, "vanity_url": {"type": "string"}, "effective_access": {"type": "string", "enum": ["open", "company", "collaborators"]}, "effective_permission": {"type": "string", "enum": ["can_download", "can_preview", "can_edit"]}, "is_password_enabled": {"type": "boolean"}, "unshared_at": {"type": "string", "format": "date-time"}, "download_count": {"type": "integer"}, "preview_count": {"type": "integer"}, "access": {"type": "string", "enum": ["open", "company", "collaborators"]}, "permissions": {"type": "object", "properties": {"can_download": {"type": "boolean"}, "can_preview": {"type": "boolean"}, "can_edit": {"type": "boolean"}}}}}}, "securitySchemes": {"OAuth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://account.box.com/api/oauth2/authorize", "tokenUrl": "https://api.box.com/oauth2/token", "scopes": {"root_readonly": "Read all files and folders stored in Box", "root_readwrite": "Read and write all files and folders stored in Box", "manage_enterprise": "Manage an enterprise"}}}}}}}}, {"title": "Palo Alto Networks API", "content": {"openapi": "3.0.0", "info": {"title": "Palo Alto Networks API", "description": "API for managing Palo Alto Networks firewalls and security services", "version": "1.0.0", "contact": {"name": "Palo Alto Networks Support", "url": "https://www.paloaltonetworks.com/support", "email": "support@paloaltonetworks.com"}}, "servers": [{"url": "https://api.paloaltonetworks.com/v1"}], "paths": {"/devices": {"get": {"summary": "List all devices", "description": "Retrieve a list of all managed devices", "operationId": "listDevices", "tags": ["Devices"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Device"}}}}}}}, "post": {"summary": "Add a new device", "description": "Add a new device to the management system", "operationId": "addDevice", "tags": ["Devices"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceInput"}}}}, "responses": {"201": {"description": "Device created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}}, "/devices/{deviceId}": {"get": {"summary": "Get device details", "description": "Retrieve details of a specific device", "operationId": "getDevice", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}, "put": {"summary": "Update device", "description": "Update details of a specific device", "operationId": "updateDevice", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceInput"}}}}, "responses": {"200": {"description": "Device updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}, "delete": {"summary": "Delete device", "description": "Remove a device from the management system", "operationId": "deleteDevice", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Device deleted successfully"}}}}, "/policies": {"get": {"summary": "List all policies", "description": "Retrieve a list of all security policies", "operationId": "listPolicies", "tags": ["Policies"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Policy"}}}}}}}, "post": {"summary": "Create a new policy", "description": "Create a new security policy", "operationId": "createPolicy", "tags": ["Policies"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyInput"}}}}, "responses": {"201": {"description": "Policy created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Policy"}}}}}}}, "/policies/{policyId}": {"get": {"summary": "Get policy details", "description": "Retrieve details of a specific policy", "operationId": "getPolicy", "tags": ["Policies"], "parameters": [{"name": "policyId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Policy"}}}}}}, "put": {"summary": "Update policy", "description": "Update details of a specific policy", "operationId": "updatePolicy", "tags": ["Policies"], "parameters": [{"name": "policyId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyInput"}}}}, "responses": {"200": {"description": "Policy updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Policy"}}}}}}, "delete": {"summary": "Delete policy", "description": "Remove a policy from the system", "operationId": "deletePolicy", "tags": ["Policies"], "parameters": [{"name": "policyId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Policy deleted successfully"}}}}, "/threats": {"get": {"summary": "List threats", "description": "Retrieve a list of detected threats", "operationId": "listThreats", "tags": ["Threats"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Threat"}}}}}}}}, "/reports": {"get": {"summary": "Generate report", "description": "Generate a security report", "operationId": "generateReport", "tags": ["Reports"], "parameters": [{"name": "reportType", "in": "query", "required": true, "schema": {"type": "string", "enum": ["traffic", "threat", "url", "data"]}}, {"name": "startDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}}, {"name": "endDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Report"}}}}}}}}, "components": {"schemas": {"Device": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "model": {"type": "string"}, "serialNumber": {"type": "string"}, "ipAddress": {"type": "string"}, "firmwareVersion": {"type": "string"}, "status": {"type": "string", "enum": ["online", "offline", "maintenance"]}}}, "DeviceInput": {"type": "object", "required": ["name", "model", "serialNumber", "ipAddress"], "properties": {"name": {"type": "string"}, "model": {"type": "string"}, "serialNumber": {"type": "string"}, "ipAddress": {"type": "string"}}}, "Policy": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "type": {"type": "string", "enum": ["security", "nat", "qos", "pbf"]}, "rules": {"type": "array", "items": {"$ref": "#/components/schemas/Rule"}}}}, "PolicyInput": {"type": "object", "required": ["name", "type"], "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "type": {"type": "string", "enum": ["security", "nat", "qos", "pbf"]}, "rules": {"type": "array", "items": {"$ref": "#/components/schemas/RuleInput"}}}}, "Rule": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "action": {"type": "string", "enum": ["allow", "deny", "drop"]}, "sourceZone": {"type": "string"}, "destinationZone": {"type": "string"}, "sourceAddress": {"type": "string"}, "destinationAddress": {"type": "string"}, "application": {"type": "string"}, "service": {"type": "string"}}}, "RuleInput": {"type": "object", "required": ["name", "action", "sourceZone", "destinationZone"], "properties": {"name": {"type": "string"}, "action": {"type": "string", "enum": ["allow", "deny", "drop"]}, "sourceZone": {"type": "string"}, "destinationZone": {"type": "string"}, "sourceAddress": {"type": "string"}, "destinationAddress": {"type": "string"}, "application": {"type": "string"}, "service": {"type": "string"}}}, "Threat": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string", "enum": ["virus", "spyware", "vulnerability", "wildfire"]}, "severity": {"type": "string", "enum": ["critical", "high", "medium", "low", "informational"]}, "sourceIp": {"type": "string"}, "destinationIp": {"type": "string"}, "timestamp": {"type": "string", "format": "date-time"}}}, "Report": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["traffic", "threat", "url", "data"]}, "startDate": {"type": "string", "format": "date"}, "endDate": {"type": "string", "format": "date"}, "generatedAt": {"type": "string", "format": "date-time"}, "data": {"type": "object"}}}}, "securitySchemes": {"APIKey": {"type": "apiKey", "in": "header", "name": "X-API-Key"}}}, "security": [{"APIKey": []}]}}, {"title": "Monday.com API", "content": {"openapi": "3.0.0", "info": {"title": "Monday.com API", "description": "API for interacting with Monday.com boards, items, and more.", "version": "1.0.0", "contact": {"name": "Monday.com Support", "url": "https://monday.com/support", "email": "support@monday.com"}}, "servers": [{"url": "https://api.monday.com/v2", "description": "Production server"}], "security": [{"ApiKeyAuth": []}], "paths": {"/boards": {"get": {"summary": "Get all boards", "description": "Retrieve a list of all boards accessible to the authenticated user.", "operationId": "getBoards", "tags": ["Boards"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardsList"}}}}, "401": {"$ref": "#/components/responses/Unauthorized"}}}, "post": {"summary": "Create a new board", "description": "Create a new board with the specified details.", "operationId": "createBoard", "tags": ["Boards"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardInput"}}}}, "responses": {"201": {"description": "Board created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "400": {"$ref": "#/components/responses/BadRequest"}, "401": {"$ref": "#/components/responses/Unauthorized"}}}}, "/boards/{boardId}": {"get": {"summary": "Get a specific board", "description": "Retrieve details of a specific board by its ID.", "operationId": "getBoard", "tags": ["Boards"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the board to retrieve"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "404": {"$ref": "#/components/responses/NotFound"}, "401": {"$ref": "#/components/responses/Unauthorized"}}}, "put": {"summary": "Update a board", "description": "Update the details of a specific board.", "operationId": "updateBoard", "tags": ["Boards"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the board to update"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardInput"}}}}, "responses": {"200": {"description": "Board updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "400": {"$ref": "#/components/responses/BadRequest"}, "401": {"$ref": "#/components/responses/Unauthorized"}, "404": {"$ref": "#/components/responses/NotFound"}}}, "delete": {"summary": "Delete a board", "description": "Delete a specific board by its ID.", "operationId": "deleteBoard", "tags": ["Boards"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the board to delete"}], "responses": {"204": {"description": "Board deleted successfully"}, "401": {"$ref": "#/components/responses/Unauthorized"}, "404": {"$ref": "#/components/responses/NotFound"}}}}, "/boards/{boardId}/groups": {"get": {"summary": "Get board groups", "description": "Retrieve all groups in a specific board.", "operationId": "getBoardGroups", "tags": ["Groups"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the board"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GroupsList"}}}}, "401": {"$ref": "#/components/responses/Unauthorized"}, "404": {"$ref": "#/components/responses/NotFound"}}}, "post": {"summary": "Create a new group", "description": "Create a new group in a specific board.", "operationId": "createGroup", "tags": ["Groups"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the board"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GroupInput"}}}}, "responses": {"201": {"description": "Group created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}}, "400": {"$ref": "#/components/responses/BadRequest"}, "401": {"$ref": "#/components/responses/Unauthorized"}, "404": {"$ref": "#/components/responses/NotFound"}}}}, "/boards/{boardId}/items": {"get": {"summary": "Get board items", "description": "Retrieve all items in a specific board.", "operationId": "getBoardItems", "tags": ["Items"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the board"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemsList"}}}}, "401": {"$ref": "#/components/responses/Unauthorized"}, "404": {"$ref": "#/components/responses/NotFound"}}}, "post": {"summary": "Create a new item", "description": "Create a new item in a specific board.", "operationId": "createItem", "tags": ["Items"], "parameters": [{"name": "boardId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the board"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemInput"}}}}, "responses": {"201": {"description": "Item created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Item"}}}}, "400": {"$ref": "#/components/responses/BadRequest"}, "401": {"$ref": "#/components/responses/Unauthorized"}, "404": {"$ref": "#/components/responses/NotFound"}}}}, "/items/{itemId}": {"get": {"summary": "Get a specific item", "description": "Retrieve details of a specific item by its ID.", "operationId": "getItem", "tags": ["Items"], "parameters": [{"name": "itemId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the item to retrieve"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Item"}}}}, "404": {"$ref": "#/components/responses/NotFound"}, "401": {"$ref": "#/components/responses/Unauthorized"}}}, "put": {"summary": "Update an item", "description": "Update the details of a specific item.", "operationId": "updateItem", "tags": ["Items"], "parameters": [{"name": "itemId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the item to update"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemInput"}}}}, "responses": {"200": {"description": "Item updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Item"}}}}, "400": {"$ref": "#/components/responses/BadRequest"}, "401": {"$ref": "#/components/responses/Unauthorized"}, "404": {"$ref": "#/components/responses/NotFound"}}}, "delete": {"summary": "Delete an item", "description": "Delete a specific item by its ID.", "operationId": "deleteItem", "tags": ["Items"], "parameters": [{"name": "itemId", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the item to delete"}], "responses": {"204": {"description": "Item deleted successfully"}, "401": {"$ref": "#/components/responses/Unauthorized"}, "404": {"$ref": "#/components/responses/NotFound"}}}}}, "components": {"schemas": {"Board": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "description": {"type": "string"}, "columns": {"type": "array", "items": {"$ref": "#/components/schemas/Column"}}, "groups": {"type": "array", "items": {"$ref": "#/components/schemas/Group"}}}}, "BoardInput": {"type": "object", "required": ["name"], "properties": {"name": {"type": "string"}, "description": {"type": "string"}}}, "BoardsList": {"type": "object", "properties": {"boards": {"type": "array", "items": {"$ref": "#/components/schemas/Board"}}}}, "Column": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "type": {"type": "string", "enum": ["text", "number", "date", "status", "person", "checkbox"]}}}, "Group": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "color": {"type": "string"}, "position": {"type": "integer"}}}, "GroupInput": {"type": "object", "required": ["title"], "properties": {"title": {"type": "string"}, "color": {"type": "string"}, "position": {"type": "integer"}}}, "GroupsList": {"type": "object", "properties": {"groups": {"type": "array", "items": {"$ref": "#/components/schemas/Group"}}}}, "Item": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "group": {"$ref": "#/components/schemas/Group"}, "column_values": {"type": "array", "items": {"$ref": "#/components/schemas/ColumnValue"}}}}, "ItemInput": {"type": "object", "required": ["name", "group_id"], "properties": {"name": {"type": "string"}, "group_id": {"type": "string"}, "column_values": {"type": "object", "additionalProperties": {"type": "string"}}}}, "ItemsList": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/Item"}}}}, "ColumnValue": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "value": {"type": "string"}, "type": {"type": "string"}}}}, "securitySchemes": {"ApiKeyAuth": {"type": "apiKey", "in": "header", "name": "Authorization"}}, "responses": {"BadRequest": {"description": "Bad request", "content": {"application/json": {"schema": {"type": "object", "properties": {"error": {"type": "string"}}}}}}, "Unauthorized": {"description": "Unauthorized", "content": {"application/json": {"schema": {"type": "object", "properties": {"error": {"type": "string"}}}}}}, "NotFound": {"description": "Resource not found", "content": {"application/json": {"schema": {"type": "object", "properties": {"error": {"type": "string"}}}}}}}}}}, {"title": "Autodesk API", "content": {"openapi": "3.0.0", "info": {"title": "Autodesk API", "description": "API for interacting with Autodesk services and products", "version": "1.0.0", "contact": {"name": "Autodesk Developer Support", "url": "https://forge.autodesk.com/en/support/get-help", "email": "forge.help@autodesk.com"}}, "servers": [{"url": "https://developer.api.autodesk.com/v1"}], "tags": [{"name": "Authentication", "description": "Endpoints for authentication and token management"}, {"name": "Data Management", "description": "Endpoints for managing files and projects"}, {"name": "Model Derivative", "description": "Endpoints for converting and viewing 3D models"}, {"name": "Design Automation", "description": "Endpoints for automating design tasks"}, {"name": "Webhooks", "description": "Endpoints for managing webhooks and notifications"}], "paths": {"/authentication/v1/authenticate": {"post": {"tags": ["Authentication"], "summary": "Authenticate and get access token", "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"client_id": {"type": "string"}, "client_secret": {"type": "string"}, "grant_type": {"type": "string", "enum": ["client_credentials"]}, "scope": {"type": "string"}}, "required": ["client_id", "client_secret", "grant_type", "scope"]}}}}, "responses": {"200": {"description": "Successful authentication", "content": {"application/json": {"schema": {"type": "object", "properties": {"access_token": {"type": "string"}, "token_type": {"type": "string"}, "expires_in": {"type": "integer"}}}}}}}}}, "/project/v1/hubs": {"get": {"tags": ["Data Management"], "summary": "Get list of hubs", "security": [{"oauth2_access_code": ["data:read"]}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}}}}}}}}}}}}, "/project/v1/hubs/{hub_id}/projects": {"get": {"tags": ["Data Management"], "summary": "Get list of projects in a hub", "security": [{"oauth2_access_code": ["data:read"]}], "parameters": [{"name": "hub_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"data": {"type": "array", "items": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}}}}}}}}}}}}, "/modelderivative/v2/designdata/{urn}/manifest": {"get": {"tags": ["Model Derivative"], "summary": "Get the manifest of a derivative", "security": [{"oauth2_access_code": ["data:read"]}], "parameters": [{"name": "urn", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string"}, "progress": {"type": "string"}, "derivatives": {"type": "array", "items": {"type": "object"}}}}}}}}}}, "/modelderivative/v2/designdata/{urn}/thumbnail": {"get": {"tags": ["Model Derivative"], "summary": "Get the thumbnail of a file", "security": [{"oauth2_access_code": ["data:read"]}], "parameters": [{"name": "urn", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"image/png": {"schema": {"type": "string", "format": "binary"}}}}}}}, "/da/us-east/v3/workitems": {"post": {"tags": ["Design Automation"], "summary": "Submit a workitem", "security": [{"oauth2_access_code": ["code:all"]}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"activityId": {"type": "string"}, "arguments": {"type": "object"}}}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"id": {"type": "string"}, "status": {"type": "string"}}}}}}}}}, "/webhooks/v1/systems/{system}/events/{event}/hooks": {"post": {"tags": ["Webhooks"], "summary": "Create a new webhook", "security": [{"oauth2_access_code": ["data:write"]}], "parameters": [{"name": "system", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "event", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"callbackUrl": {"type": "string"}, "scope": {"type": "object"}}}}}}, "responses": {"201": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"hookId": {"type": "string"}}}}}}}}}}, "components": {"securitySchemes": {"oauth2_access_code": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://developer.api.autodesk.com/authentication/v1/authorize", "tokenUrl": "https://developer.api.autodesk.com/authentication/v1/gettoken", "scopes": {"data:read": "Read user data", "data:write": "Write user data", "data:create": "Create user data", "data:search": "Search user data", "bucket:create": "Create buckets", "bucket:read": "Read buckets", "bucket:update": "Update buckets", "bucket:delete": "Delete buckets", "code:all": "Access to all Design Automation APIs"}}}}}}}}, {"title": "MongoDB API", "content": {"openapi": "3.0.0", "info": {"title": "MongoDB API", "description": "API specification for MongoDB operations", "version": "1.0.0"}, "servers": [{"url": "http://localhost:27017"}], "paths": {"/databases/{database}/collections/{collection}/documents": {"get": {"summary": "Find documents", "description": "Retrieve documents from a collection", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "filter", "in": "query", "schema": {"type": "object"}, "description": "Query filter"}, {"name": "projection", "in": "query", "schema": {"type": "object"}, "description": "Fields to return"}, {"name": "sort", "in": "query", "schema": {"type": "object"}, "description": "Sort order"}, {"name": "limit", "in": "query", "schema": {"type": "integer"}, "description": "Maximum number of documents to return"}, {"name": "skip", "in": "query", "schema": {"type": "integer"}, "description": "Number of documents to skip"}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"type": "object"}}}}}}}, "post": {"summary": "Insert document", "description": "Insert a new document into a collection", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object"}}}}, "responses": {"201": {"description": "Document inserted successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"insertedId": {"type": "string"}}}}}}}}}, "/databases/{database}/collections/{collection}/documents/{id}": {"get": {"summary": "Get document by ID", "description": "Retrieve a document by its ID", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "object"}}}}, "404": {"description": "Document not found"}}}, "put": {"summary": "Update document", "description": "Update an existing document", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object"}}}}, "responses": {"200": {"description": "Document updated successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"modifiedCount": {"type": "integer"}}}}}}, "404": {"description": "Document not found"}}}, "delete": {"summary": "Delete document", "description": "Delete a document by its ID", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Document deleted successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"deletedCount": {"type": "integer"}}}}}}, "404": {"description": "Document not found"}}}}, "/databases/{database}/collections/{collection}/aggregate": {"post": {"summary": "Aggregate", "description": "Perform aggregation operations on a collection", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "array", "items": {"type": "object"}}}}}, "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"type": "object"}}}}}}}}, "/databases/{database}/collections/{collection}/indexes": {"get": {"summary": "List indexes", "description": "List all indexes in a collection", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"type": "object"}}}}}}}, "post": {"summary": "Create index", "description": "Create a new index in a collection", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"keys": {"type": "object"}, "options": {"type": "object"}}}}}}, "responses": {"201": {"description": "Index created successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"indexName": {"type": "string"}}}}}}}}}, "/databases/{database}/collections/{collection}/indexes/{indexName}": {"delete": {"summary": "Drop index", "description": "Drop an index from a collection", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "indexName", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Index dropped successfully"}, "404": {"description": "Index not found"}}}}, "/databases": {"get": {"summary": "List databases", "description": "List all databases", "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"type": "string"}}}}}}}}, "/databases/{database}/collections": {"get": {"summary": "List collections", "description": "List all collections in a database", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"type": "string"}}}}}}}, "post": {"summary": "Create collection", "description": "Create a new collection in a database", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"name": {"type": "string"}}, "required": ["name"]}}}}, "responses": {"201": {"description": "Collection created successfully"}}}}, "/databases/{database}/collections/{collection}": {"delete": {"summary": "Drop collection", "description": "Drop a collection from a database", "parameters": [{"name": "database", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "collection", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Collection dropped successfully"}, "404": {"description": "Collection not found"}}}}}}}, {"title": "ServiceNow API", "content": {"openapi": "3.0.0", "info": {"title": "ServiceNow API", "description": "API for interacting with ServiceNow instances", "version": "1.0.0", "contact": {"name": "ServiceNow Support", "url": "https://www.servicenow.com/support/contact-support.html"}}, "servers": [{"url": "https://{instance}.service-now.com/api", "variables": {"instance": {"default": "dev12345", "description": "Your ServiceNow instance name"}}}], "paths": {"/now/table/{tableName}": {"get": {"summary": "Get records from a table", "parameters": [{"name": "tableName", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The name of the table to query"}, {"name": "sysparm_query", "in": "query", "schema": {"type": "string"}, "description": "An encoded query string for filtering results"}, {"name": "sysparm_limit", "in": "query", "schema": {"type": "integer"}, "description": "Maximum number of records to return"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"result": {"type": "array", "items": {"type": "object"}}}}}}}}}, "post": {"summary": "Create a new record in a table", "parameters": [{"name": "tableName", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The name of the table to create a record in"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object"}}}}, "responses": {"201": {"description": "Record created successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"result": {"type": "object"}}}}}}}}}, "/now/table/{tableName}/{sys_id}": {"get": {"summary": "Get a specific record from a table", "parameters": [{"name": "tableName", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The name of the table to query"}, {"name": "sys_id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The sys_id of the record to retrieve"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"result": {"type": "object"}}}}}}}}, "put": {"summary": "Update a specific record in a table", "parameters": [{"name": "tableName", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The name of the table containing the record"}, {"name": "sys_id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The sys_id of the record to update"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object"}}}}, "responses": {"200": {"description": "Record updated successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"result": {"type": "object"}}}}}}}}, "delete": {"summary": "Delete a specific record from a table", "parameters": [{"name": "tableName", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The name of the table containing the record"}, {"name": "sys_id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The sys_id of the record to delete"}], "responses": {"204": {"description": "Record deleted successfully"}}}}, "/now/attachment/file": {"post": {"summary": "Upload an attachment", "requestBody": {"content": {"multipart/form-data": {"schema": {"type": "object", "properties": {"table_name": {"type": "string"}, "table_sys_id": {"type": "string"}, "file": {"type": "string", "format": "binary"}}}}}}, "responses": {"201": {"description": "Attachment uploaded successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"result": {"type": "object"}}}}}}}}}, "/now/attachment/{sys_id}/file": {"get": {"summary": "Download an attachment", "parameters": [{"name": "sys_id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The sys_id of the attachment to download"}], "responses": {"200": {"description": "Successful response", "content": {"application/octet-stream": {"schema": {"type": "string", "format": "binary"}}}}}}}}, "components": {"securitySchemes": {"basicAuth": {"type": "http", "scheme": "basic"}}}, "security": [{"basicAuth": []}]}}, {"title": "Lyft API", "content": {"openapi": "3.0.0", "info": {"title": "Lyft API", "description": "API for interacting with Lyft ride-sharing services", "version": "1.0.0", "contact": {"name": "Lyft API Support", "url": "https://developer.lyft.com/support", "email": "api-support@lyft.com"}}, "servers": [{"url": "https://api.lyft.com/v1"}], "paths": {"/users": {"post": {"summary": "Create a new user", "operationId": "createUser", "tags": ["Users"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"201": {"description": "User created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Invalid input"}}}, "get": {"summary": "List all users", "operationId": "listUsers", "tags": ["Users"], "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}, "description": "Number of users to return"}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "Number of users to skip"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}}}}, "/users/{userId}": {"get": {"summary": "Get user by ID", "operationId": "getUserById", "tags": ["Users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}}, "put": {"summary": "Update user", "operationId": "updateUser", "tags": ["Users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"200": {"description": "User updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}}, "delete": {"summary": "Delete user", "operationId": "deleteUser", "tags": ["Users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "User deleted successfully"}, "404": {"description": "User not found"}}}}, "/rides": {"post": {"summary": "Request a ride", "operationId": "requestRide", "tags": ["Rides"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RideRequest"}}}}, "responses": {"201": {"description": "Ride requested successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ride"}}}}, "400": {"description": "Invalid input"}}}, "get": {"summary": "List user's rides", "operationId": "listRides", "tags": ["Rides"], "parameters": [{"name": "userId", "in": "query", "required": true, "schema": {"type": "string"}}, {"name": "status", "in": "query", "schema": {"type": "string", "enum": ["pending", "in_progress", "completed", "cancelled"]}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Ride"}}}}}}}}, "/rides/{rideId}": {"get": {"summary": "Get ride by ID", "operationId": "getRideById", "tags": ["Rides"], "parameters": [{"name": "rideId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ride"}}}}, "404": {"description": "Ride not found"}}}, "put": {"summary": "Update ride status", "operationId": "updateRideStatus", "tags": ["Rides"], "parameters": [{"name": "rideId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RideStatusUpdate"}}}}, "responses": {"200": {"description": "Ride status updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ride"}}}}, "404": {"description": "Ride not found"}}}, "delete": {"summary": "Cancel ride", "operationId": "cancelRide", "tags": ["Rides"], "parameters": [{"name": "rideId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Ride cancelled successfully"}, "404": {"description": "Ride not found"}}}}, "/drivers": {"post": {"summary": "Register a new driver", "operationId": "registerDriver", "tags": ["Drivers"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DriverCreate"}}}}, "responses": {"201": {"description": "Driver registered successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Driver"}}}}, "400": {"description": "Invalid input"}}}, "get": {"summary": "List all drivers", "operationId": "listDrivers", "tags": ["Drivers"], "parameters": [{"name": "status", "in": "query", "schema": {"type": "string", "enum": ["active", "inactive"]}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Driver"}}}}}}}}, "/drivers/{driverId}": {"get": {"summary": "Get driver by ID", "operationId": "getDriverById", "tags": ["Drivers"], "parameters": [{"name": "driverId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Driver"}}}}, "404": {"description": "Driver not found"}}}, "put": {"summary": "Update driver information", "operationId": "updateDriver", "tags": ["Drivers"], "parameters": [{"name": "driverId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DriverUpdate"}}}}, "responses": {"200": {"description": "Driver updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Driver"}}}}, "404": {"description": "Driver not found"}}}, "delete": {"summary": "Deactivate driver", "operationId": "deactivateDriver", "tags": ["Drivers"], "parameters": [{"name": "driverId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Driver deactivated successfully"}, "404": {"description": "Driver not found"}}}}, "/payments": {"post": {"summary": "Process a payment", "operationId": "processPayment", "tags": ["Payments"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaymentRequest"}}}}, "responses": {"201": {"description": "Payment processed successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Payment"}}}}, "400": {"description": "Invalid input"}}}, "get": {"summary": "List payments", "operationId": "listPayments", "tags": ["Payments"], "parameters": [{"name": "userId", "in": "query", "schema": {"type": "string"}}, {"name": "rideId", "in": "query", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Payment"}}}}}}}}, "/ratings": {"post": {"summary": "Submit a rating", "operationId": "submitRating", "tags": ["Ratings"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RatingCreate"}}}}, "responses": {"201": {"description": "Rating submitted successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Rating"}}}}, "400": {"description": "Invalid input"}}}, "get": {"summary": "List ratings", "operationId": "listRatings", "tags": ["Ratings"], "parameters": [{"name": "userId", "in": "query", "schema": {"type": "string"}}, {"name": "driverId", "in": "query", "schema": {"type": "string"}}, {"name": "rideId", "in": "query", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Rating"}}}}}}}}}, "components": {"schemas": {"UserCreate": {"type": "object", "required": ["email", "password", "firstName", "lastName", "phoneNumber"], "properties": {"email": {"type": "string", "format": "email"}, "password": {"type": "string", "format": "password"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}}}, "UserUpdate": {"type": "object", "properties": {"email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "RideRequest": {"type": "object", "required": ["userId", "pickupLocation", "dropoffLocation"], "properties": {"userId": {"type": "string"}, "pickupLocation": {"$ref": "#/components/schemas/Location"}, "dropoffLocation": {"$ref": "#/components/schemas/Location"}, "rideType": {"type": "string", "enum": ["standard", "xl", "lux"]}, "scheduledTime": {"type": "string", "format": "date-time"}}}, "RideStatusUpdate": {"type": "object", "required": ["status"], "properties": {"status": {"type": "string", "enum": ["accepted", "in_progress", "completed", "cancelled"]}}}, "Ride": {"type": "object", "properties": {"id": {"type": "string"}, "userId": {"type": "string"}, "driverId": {"type": "string"}, "pickupLocation": {"$ref": "#/components/schemas/Location"}, "dropoffLocation": {"$ref": "#/components/schemas/Location"}, "status": {"type": "string", "enum": ["pending", "accepted", "in_progress", "completed", "cancelled"]}, "rideType": {"type": "string", "enum": ["standard", "xl", "lux"]}, "fare": {"type": "number"}, "scheduledTime": {"type": "string", "format": "date-time"}, "startTime": {"type": "string", "format": "date-time"}, "endTime": {"type": "string", "format": "date-time"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "Location": {"type": "object", "required": ["latitude", "longitude"], "properties": {"latitude": {"type": "number"}, "longitude": {"type": "number"}, "address": {"type": "string"}}}, "DriverCreate": {"type": "object", "required": ["email", "password", "firstName", "lastName", "phoneNumber", "licenseNumber", "carDetails"], "properties": {"email": {"type": "string", "format": "email"}, "password": {"type": "string", "format": "password"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "licenseNumber": {"type": "string"}, "carDetails": {"$ref": "#/components/schemas/CarDetails"}}}, "DriverUpdate": {"type": "object", "properties": {"email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "licenseNumber": {"type": "string"}, "carDetails": {"$ref": "#/components/schemas/CarDetails"}, "status": {"type": "string", "enum": ["active", "inactive"]}}}, "Driver": {"type": "object", "properties": {"id": {"type": "string"}, "email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "licenseNumber": {"type": "string"}, "carDetails": {"$ref": "#/components/schemas/CarDetails"}, "status": {"type": "string", "enum": ["active", "inactive"]}, "rating": {"type": "number"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "CarDetails": {"type": "object", "required": ["make", "model", "year", "color", "licensePlate"], "properties": {"make": {"type": "string"}, "model": {"type": "string"}, "year": {"type": "integer"}, "color": {"type": "string"}, "licensePlate": {"type": "string"}}}, "PaymentRequest": {"type": "object", "required": ["userId", "rideId", "amount", "paymentMethod"], "properties": {"userId": {"type": "string"}, "rideId": {"type": "string"}, "amount": {"type": "number"}, "paymentMethod": {"type": "string", "enum": ["credit_card", "paypal", "apple_pay", "google_pay"]}}}, "Payment": {"type": "object", "properties": {"id": {"type": "string"}, "userId": {"type": "string"}, "rideId": {"type": "string"}, "amount": {"type": "number"}, "paymentMethod": {"type": "string", "enum": ["credit_card", "paypal", "apple_pay", "google_pay"]}, "status": {"type": "string", "enum": ["pending", "completed", "failed"]}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "RatingCreate": {"type": "object", "required": ["userId", "driverId", "rideId", "rating"], "properties": {"userId": {"type": "string"}, "driverId": {"type": "string"}, "rideId": {"type": "string"}, "rating": {"type": "integer", "minimum": 1, "maximum": 5}, "comment": {"type": "string"}}}, "Rating": {"type": "object", "properties": {"id": {"type": "string"}, "userId": {"type": "string"}, "driverId": {"type": "string"}, "rideId": {"type": "string"}, "rating": {"type": "integer", "minimum": 1, "maximum": 5}, "comment": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}, "security": [{"bearerAuth": []}]}}, {"title": "Amazon API", "content": {"openapi": "3.0.0", "info": {"title": "Amazon API", "description": "API for interacting with Amazon's e-commerce platform", "version": "1.0.0", "contact": {"name": "Amazon API Support", "url": "https://developer.amazon.com/support", "email": "api-support@amazon.com"}}, "servers": [{"url": "https://api.amazon.com/v1"}], "tags": [{"name": "products", "description": "Operations related to products"}, {"name": "orders", "description": "Operations related to orders"}, {"name": "customers", "description": "Operations related to customers"}, {"name": "reviews", "description": "Operations related to product reviews"}, {"name": "cart", "description": "Operations related to shopping cart"}], "paths": {"/products": {"get": {"summary": "List products", "tags": ["products"], "parameters": [{"name": "category", "in": "query", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}}}}, "post": {"summary": "Create a new product", "tags": ["products"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductInput"}}}}, "responses": {"201": {"description": "Product created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}}}}, "/products/{productId}": {"get": {"summary": "Get product details", "tags": ["products"], "parameters": [{"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}, "put": {"summary": "Update product details", "tags": ["products"], "parameters": [{"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductInput"}}}}, "responses": {"200": {"description": "Product updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}, "delete": {"summary": "Delete a product", "tags": ["products"], "parameters": [{"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Product deleted successfully"}, "404": {"description": "Product not found"}}}}, "/orders": {"get": {"summary": "List orders", "tags": ["orders"], "parameters": [{"name": "customerId", "in": "query", "schema": {"type": "string"}}, {"name": "status", "in": "query", "schema": {"type": "string", "enum": ["pending", "shipped", "delivered", "cancelled"]}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Order"}}}}}}}, "post": {"summary": "Create a new order", "tags": ["orders"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrderInput"}}}}, "responses": {"201": {"description": "Order created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}}}}, "/orders/{orderId}": {"get": {"summary": "Get order details", "tags": ["orders"], "parameters": [{"name": "orderId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}, "404": {"description": "Order not found"}}}, "put": {"summary": "Update order status", "tags": ["orders"], "parameters": [{"name": "orderId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "enum": ["pending", "shipped", "delivered", "cancelled"]}}}}}}, "responses": {"200": {"description": "Order updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}, "404": {"description": "Order not found"}}}}, "/customers": {"get": {"summary": "List customers", "tags": ["customers"], "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Customer"}}}}}}}, "post": {"summary": "Create a new customer", "tags": ["customers"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomerInput"}}}}, "responses": {"201": {"description": "Customer created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Customer"}}}}}}}, "/customers/{customerId}": {"get": {"summary": "Get customer details", "tags": ["customers"], "parameters": [{"name": "customerId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Customer"}}}}, "404": {"description": "Customer not found"}}}, "put": {"summary": "Update customer details", "tags": ["customers"], "parameters": [{"name": "customerId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomerInput"}}}}, "responses": {"200": {"description": "Customer updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Customer"}}}}, "404": {"description": "Customer not found"}}}}, "/reviews": {"get": {"summary": "List reviews", "tags": ["reviews"], "parameters": [{"name": "productId", "in": "query", "schema": {"type": "string"}}, {"name": "rating", "in": "query", "schema": {"type": "integer", "minimum": 1, "maximum": 5}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Review"}}}}}}}, "post": {"summary": "Create a new review", "tags": ["reviews"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReviewInput"}}}}, "responses": {"201": {"description": "Review created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Review"}}}}}}}, "/cart": {"get": {"summary": "Get cart contents", "tags": ["cart"], "parameters": [{"name": "customerId", "in": "query", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Cart"}}}}}}, "post": {"summary": "Add item to cart", "tags": ["cart"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CartItemInput"}}}}, "responses": {"200": {"description": "Item added to cart successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Cart"}}}}}}, "delete": {"summary": "Remove item from cart", "tags": ["cart"], "parameters": [{"name": "customerId", "in": "query", "required": true, "schema": {"type": "string"}}, {"name": "productId", "in": "query", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Item removed from cart successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Cart"}}}}}}}}, "components": {"schemas": {"Product": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "category": {"type": "string"}, "inStock": {"type": "boolean"}, "images": {"type": "array", "items": {"type": "string"}}}}, "ProductInput": {"type": "object", "required": ["name", "price", "category"], "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "category": {"type": "string"}, "inStock": {"type": "boolean"}, "images": {"type": "array", "items": {"type": "string"}}}}, "Order": {"type": "object", "properties": {"id": {"type": "string"}, "customerId": {"type": "string"}, "items": {"type": "array", "items": {"$ref": "#/components/schemas/OrderItem"}}, "totalAmount": {"type": "number"}, "status": {"type": "string", "enum": ["pending", "shipped", "delivered", "cancelled"]}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "OrderInput": {"type": "object", "required": ["customerId", "items"], "properties": {"customerId": {"type": "string"}, "items": {"type": "array", "items": {"$ref": "#/components/schemas/OrderItemInput"}}}}, "OrderItem": {"type": "object", "properties": {"productId": {"type": "string"}, "quantity": {"type": "integer"}, "price": {"type": "number"}}}, "OrderItemInput": {"type": "object", "required": ["productId", "quantity"], "properties": {"productId": {"type": "string"}, "quantity": {"type": "integer"}}}, "Customer": {"type": "object", "properties": {"id": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string"}, "address": {"$ref": "#/components/schemas/Address"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "CustomerInput": {"type": "object", "required": ["firstName", "lastName", "email"], "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string"}, "address": {"$ref": "#/components/schemas/Address"}}}, "Address": {"type": "object", "properties": {"street": {"type": "string"}, "city": {"type": "string"}, "state": {"type": "string"}, "postalCode": {"type": "string"}, "country": {"type": "string"}}}, "Review": {"type": "object", "properties": {"id": {"type": "string"}, "productId": {"type": "string"}, "customerId": {"type": "string"}, "rating": {"type": "integer", "minimum": 1, "maximum": 5}, "title": {"type": "string"}, "content": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}}}, "ReviewInput": {"type": "object", "required": ["productId", "customerId", "rating"], "properties": {"productId": {"type": "string"}, "customerId": {"type": "string"}, "rating": {"type": "integer", "minimum": 1, "maximum": 5}, "title": {"type": "string"}, "content": {"type": "string"}}}, "Cart": {"type": "object", "properties": {"customerId": {"type": "string"}, "items": {"type": "array", "items": {"$ref": "#/components/schemas/CartItem"}}, "totalAmount": {"type": "number"}}}, "CartItem": {"type": "object", "properties": {"productId": {"type": "string"}, "quantity": {"type": "integer"}, "price": {"type": "number"}}}, "CartItemInput": {"type": "object", "required": ["customerId", "productId", "quantity"], "properties": {"customerId": {"type": "string"}, "productId": {"type": "string"}, "quantity": {"type": "integer"}}}}}}}, {"title": "Smartsheet API", "content": {"openapi": "3.0.0", "info": {"title": "Smartsheet API", "description": "API for interacting with Smartsheet, a work execution platform", "version": "2.0.0", "contact": {"name": "Smartsheet Support", "url": "https://www.smartsheet.com/contact", "email": "api@smartsheet.com"}}, "servers": [{"url": "https://api.smartsheet.com/2.0"}], "security": [{"bearerAuth": []}], "paths": {"/sheets": {"get": {"summary": "List Sheets", "description": "Gets a list of sheets", "operationId": "listSheets", "parameters": [{"name": "include", "in": "query", "description": "A comma-separated list of optional elements to include in the response", "schema": {"type": "string"}}, {"name": "modifiedSince", "in": "query", "description": "Return only sheets modified since this date", "schema": {"type": "string", "format": "date-time"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedSheetList"}}}}}}, "post": {"summary": "Create Sheet", "description": "Creates a new sheet", "operationId": "createSheet", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SheetCreateRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sheet"}}}}}}}, "/sheets/{sheetId}": {"get": {"summary": "Get Sheet", "description": "Gets the specified sheet", "operationId": "getSheet", "parameters": [{"name": "sheetId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "include", "in": "query", "description": "A comma-separated list of optional elements to include in the response", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sheet"}}}}}}, "put": {"summary": "Update Sheet", "description": "Updates the specified sheet", "operationId": "updateSheet", "parameters": [{"name": "sheetId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SheetUpdateRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sheet"}}}}}}, "delete": {"summary": "Delete Sheet", "description": "Deletes the specified sheet", "operationId": "deleteSheet", "parameters": [{"name": "sheetId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccessResponse"}}}}}}}, "/sheets/{sheetId}/rows": {"get": {"summary": "List Rows", "description": "Gets the rows for the specified sheet", "operationId": "listRows", "parameters": [{"name": "sheetId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "include", "in": "query", "description": "A comma-separated list of optional elements to include in the response", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RowList"}}}}}}, "post": {"summary": "Add Rows", "description": "Inserts one or more rows into the sheet", "operationId": "addRows", "parameters": [{"name": "sheetId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Row"}}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RowList"}}}}}}}, "/sheets/{sheetId}/rows/{rowId}": {"get": {"summary": "Get Row", "description": "Gets the specified row", "operationId": "getRow", "parameters": [{"name": "sheetId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "rowId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Row"}}}}}}, "put": {"summary": "Update Row", "description": "Updates the specified row", "operationId": "updateRow", "parameters": [{"name": "sheetId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "rowId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Row"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Row"}}}}}}, "delete": {"summary": "Delete Row", "description": "Deletes the specified row", "operationId": "deleteRow", "parameters": [{"name": "sheetId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "rowId", "in": "path", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SuccessResponse"}}}}}}}}, "components": {"schemas": {"PaginatedSheetList": {"type": "object", "properties": {"pageNumber": {"type": "integer"}, "pageSize": {"type": "integer"}, "totalPages": {"type": "integer"}, "totalCount": {"type": "integer"}, "data": {"type": "array", "items": {"$ref": "#/components/schemas/Sheet"}}}}, "Sheet": {"type": "object", "properties": {"id": {"type": "integer", "format": "int64"}, "name": {"type": "string"}, "accessLevel": {"type": "string"}, "permalink": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}, "modifiedAt": {"type": "string", "format": "date-time"}}}, "SheetCreateRequest": {"type": "object", "required": ["name"], "properties": {"name": {"type": "string"}, "columns": {"type": "array", "items": {"$ref": "#/components/schemas/Column"}}}}, "SheetUpdateRequest": {"type": "object", "properties": {"name": {"type": "string"}}}, "Column": {"type": "object", "properties": {"title": {"type": "string"}, "type": {"type": "string", "enum": ["TEXT_NUMBER", "DATE", "CHECKBOX", "CONTACT_LIST", "PICKLIST"]}, "primary": {"type": "boolean"}}}, "RowList": {"type": "object", "properties": {"rows": {"type": "array", "items": {"$ref": "#/components/schemas/Row"}}}}, "Row": {"type": "object", "properties": {"id": {"type": "integer", "format": "int64"}, "rowNumber": {"type": "integer"}, "expanded": {"type": "boolean"}, "createdAt": {"type": "string", "format": "date-time"}, "modifiedAt": {"type": "string", "format": "date-time"}, "cells": {"type": "array", "items": {"$ref": "#/components/schemas/Cell"}}}}, "Cell": {"type": "object", "properties": {"columnId": {"type": "integer", "format": "int64"}, "value": {"type": "string"}, "displayValue": {"type": "string"}}}, "SuccessResponse": {"type": "object", "properties": {"message": {"type": "string"}, "resultCode": {"type": "integer"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "Asana API", "content": {"openapi": "3.0.0", "info": {"title": "Asana API", "description": "The Asana API for task and project management", "version": "1.0.0", "contact": {"name": "Asana Support", "url": "https://asana.com/support", "email": "support@asana.com"}}, "servers": [{"url": "https://app.asana.com/api/1.0"}], "paths": {"/users": {"get": {"summary": "Get all users", "description": "Returns the compact user records for all users in the specified workspace or organization.", "parameters": [{"name": "workspace", "in": "query", "description": "The workspace or organization to filter users on.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UsersList"}}}}}}}, "/users/{user_gid}": {"get": {"summary": "Get a user", "description": "Returns the full user record for a single user.", "parameters": [{"name": "user_gid", "in": "path", "required": true, "description": "A string identifying a user", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}}, "/workspaces": {"get": {"summary": "Get multiple workspaces", "description": "Returns the compact records for all workspaces visible to the authorized user.", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkspacesList"}}}}}}}, "/workspaces/{workspace_gid}": {"get": {"summary": "Get a workspace", "description": "Returns the full record for a single workspace.", "parameters": [{"name": "workspace_gid", "in": "path", "required": true, "description": "Globally unique identifier for the workspace or organization.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Workspace"}}}}}}}, "/projects": {"get": {"summary": "Get multiple projects", "description": "Returns the compact project records for some filtered set of projects.", "parameters": [{"name": "workspace", "in": "query", "description": "The workspace or organization to filter projects on.", "schema": {"type": "string"}}, {"name": "team", "in": "query", "description": "The team to filter projects on.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectsList"}}}}}}, "post": {"summary": "Create a project", "description": "Creates a new project in the specified workspace or organization.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectCreate"}}}}, "responses": {"201": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}}}}, "/projects/{project_gid}": {"get": {"summary": "Get a project", "description": "Returns the complete project record for a single project.", "parameters": [{"name": "project_gid", "in": "path", "required": true, "description": "Globally unique identifier for the project.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}}}, "put": {"summary": "Update a project", "description": "A specific, existing project can be updated by making a PUT request on the URL for that project.", "parameters": [{"name": "project_gid", "in": "path", "required": true, "description": "Globally unique identifier for the project.", "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}}}, "delete": {"summary": "Delete a project", "description": "A specific, existing project can be deleted by making a DELETE request on the URL for that project.", "parameters": [{"name": "project_gid", "in": "path", "required": true, "description": "Globally unique identifier for the project.", "schema": {"type": "string"}}], "responses": {"204": {"description": "Successful response (no content)"}}}}, "/tasks": {"get": {"summary": "Get multiple tasks", "description": "Returns the compact task records for some filtered set of tasks.", "parameters": [{"name": "project", "in": "query", "description": "The project to filter tasks on.", "schema": {"type": "string"}}, {"name": "section", "in": "query", "description": "The section to filter tasks on.", "schema": {"type": "string"}}, {"name": "completed_since", "in": "query", "description": "Only return tasks that are either incomplete or that have been completed since this time.", "schema": {"type": "string", "format": "date-time"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TasksList"}}}}}}, "post": {"summary": "Create a task", "description": "Creates a new task.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskCreate"}}}}, "responses": {"201": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Task"}}}}}}}, "/tasks/{task_gid}": {"get": {"summary": "Get a task", "description": "Returns the complete task record for a single task.", "parameters": [{"name": "task_gid", "in": "path", "required": true, "description": "Globally unique identifier for the task.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Task"}}}}}}, "put": {"summary": "Update a task", "description": "A specific, existing task can be updated by making a PUT request on the URL for that task.", "parameters": [{"name": "task_gid", "in": "path", "required": true, "description": "Globally unique identifier for the task.", "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Task"}}}}}}, "delete": {"summary": "Delete a task", "description": "A specific, existing task can be deleted by making a DELETE request on the URL for that task.", "parameters": [{"name": "task_gid", "in": "path", "required": true, "description": "Globally unique identifier for the task.", "schema": {"type": "string"}}], "responses": {"204": {"description": "Successful response (no content)"}}}}}, "components": {"securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer"}}, "schemas": {"User": {"type": "object", "properties": {"gid": {"type": "string"}, "email": {"type": "string"}, "name": {"type": "string"}, "photo": {"type": "object", "properties": {"image_21x21": {"type": "string"}, "image_27x27": {"type": "string"}, "image_36x36": {"type": "string"}, "image_60x60": {"type": "string"}, "image_128x128": {"type": "string"}}}, "workspaces": {"type": "array", "items": {"$ref": "#/components/schemas/Workspace"}}}}, "UsersList": {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "Workspace": {"type": "object", "properties": {"gid": {"type": "string"}, "name": {"type": "string"}, "is_organization": {"type": "boolean"}}}, "WorkspacesList": {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Workspace"}}}}, "Project": {"type": "object", "properties": {"gid": {"type": "string"}, "name": {"type": "string"}, "owner": {"$ref": "#/components/schemas/User"}, "due_date": {"type": "string", "format": "date"}, "current_status": {"type": "object", "properties": {"color": {"type": "string"}, "text": {"type": "string"}}}, "public": {"type": "boolean"}, "members": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}, "workspace": {"$ref": "#/components/schemas/Workspace"}}}, "ProjectsList": {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}, "ProjectCreate": {"type": "object", "required": ["name", "workspace"], "properties": {"name": {"type": "string"}, "workspace": {"type": "string"}, "team": {"type": "string"}, "public": {"type": "boolean"}, "color": {"type": "string"}, "due_date": {"type": "string", "format": "date"}}}, "ProjectUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "public": {"type": "boolean"}, "color": {"type": "string"}, "due_date": {"type": "string", "format": "date"}}}, "Task": {"type": "object", "properties": {"gid": {"type": "string"}, "name": {"type": "string"}, "assignee": {"$ref": "#/components/schemas/User"}, "completed": {"type": "boolean"}, "due_on": {"type": "string", "format": "date"}, "due_at": {"type": "string", "format": "date-time"}, "projects": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}, "workspace": {"$ref": "#/components/schemas/Workspace"}}}, "TasksList": {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Task"}}}}, "TaskCreate": {"type": "object", "required": ["name"], "properties": {"name": {"type": "string"}, "assignee": {"type": "string"}, "projects": {"type": "array", "items": {"type": "string"}}, "workspace": {"type": "string"}, "due_on": {"type": "string", "format": "date"}, "due_at": {"type": "string", "format": "date-time"}}}, "TaskUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "assignee": {"type": "string"}, "completed": {"type": "boolean"}, "due_on": {"type": "string", "format": "date"}, "due_at": {"type": "string", "format": "date-time"}}}}}, "security": [{"bearerAuth": []}]}}, {"title": "Mailgun API", "content": {"openapi": "3.0.0", "info": {"title": "Mailgun API", "description": "The Mailgun API allows you to send, receive, and track emails, manage mailing lists, and more.", "version": "3.0", "contact": {"name": "Mailgun Support", "url": "https://help.mailgun.com", "email": "support@mailgun.com"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "https://api.mailgun.net/v3"}], "paths": {"/{domain}/messages": {"post": {"summary": "Send a message", "description": "Sends an email message", "tags": ["Messages"], "parameters": [{"name": "domain", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Domain name"}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"type": "object", "properties": {"from": {"type": "string", "description": "Sender email address"}, "to": {"type": "string", "description": "Recipient email address"}, "subject": {"type": "string", "description": "Message subject"}, "text": {"type": "string", "description": "Message body in plain text"}, "html": {"type": "string", "description": "Message body in HTML"}}, "required": ["from", "to", "subject"]}}}}, "responses": {"200": {"description": "Message sent successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"id": {"type": "string"}, "message": {"type": "string"}}}}}}}}}, "/{domain}/events": {"get": {"summary": "Get events", "description": "Retrieves a list of events", "tags": ["Events"], "parameters": [{"name": "domain", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Domain name"}, {"name": "begin", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "Start date for filtering events"}, {"name": "end", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "End date for filtering events"}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 100}, "description": "Maximum number of events to return"}], "responses": {"200": {"description": "List of events", "content": {"application/json": {"schema": {"type": "object", "properties": {"items": {"type": "array", "items": {"type": "object", "properties": {"event": {"type": "string"}, "timestamp": {"type": "number"}, "id": {"type": "string"}}}}}}}}}}}}, "/lists": {"get": {"summary": "Get mailing lists", "description": "Retrieves a list of mailing lists", "tags": ["Mailing Lists"], "responses": {"200": {"description": "List of mailing lists", "content": {"application/json": {"schema": {"type": "object", "properties": {"items": {"type": "array", "items": {"type": "object", "properties": {"address": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}}}}}}}}}}}, "post": {"summary": "Create a mailing list", "description": "Creates a new mailing list", "tags": ["Mailing Lists"], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"address": {"type": "string", "description": "Mailing list email address"}, "name": {"type": "string", "description": "Mailing list name"}, "description": {"type": "string", "description": "Mailing list description"}}, "required": ["address"]}}}}, "responses": {"200": {"description": "Mailing list created successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"message": {"type": "string"}, "list": {"type": "object", "properties": {"address": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}}}}}}}}}}}, "/lists/{address}/members": {"get": {"summary": "Get list members", "description": "Retrieves members of a mailing list", "tags": ["Mailing Lists"], "parameters": [{"name": "address", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Mailing list address"}], "responses": {"200": {"description": "List of members", "content": {"application/json": {"schema": {"type": "object", "properties": {"items": {"type": "array", "items": {"type": "object", "properties": {"address": {"type": "string"}, "name": {"type": "string"}, "subscribed": {"type": "boolean"}}}}}}}}}}}, "post": {"summary": "Add list member", "description": "Adds a new member to a mailing list", "tags": ["Mailing Lists"], "parameters": [{"name": "address", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Mailing list address"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"address": {"type": "string", "description": "Member's email address"}, "name": {"type": "string", "description": "Member's name"}, "vars": {"type": "string", "description": "JSON-encoded string of custom variables"}}, "required": ["address"]}}}}, "responses": {"200": {"description": "Member added successfully", "content": {"application/json": {"schema": {"type": "object", "properties": {"message": {"type": "string"}, "member": {"type": "object", "properties": {"address": {"type": "string"}, "name": {"type": "string"}, "subscribed": {"type": "boolean"}}}}}}}}}}}, "/{domain}/tags": {"get": {"summary": "Get tags", "description": "Retrieves a list of tags", "tags": ["Tags"], "parameters": [{"name": "domain", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Domain name"}], "responses": {"200": {"description": "List of tags", "content": {"application/json": {"schema": {"type": "object", "properties": {"items": {"type": "array", "items": {"type": "object", "properties": {"tag": {"type": "string"}, "description": {"type": "string"}}}}}}}}}}}}, "/{domain}/stats/total": {"get": {"summary": "Get stats", "description": "Retrieves account statistics", "tags": ["Stats"], "parameters": [{"name": "domain", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Domain name"}, {"name": "event", "in": "query", "schema": {"type": "string", "enum": ["accepted", "delivered", "failed", "opened", "clicked"]}, "description": "Type of event to filter"}, {"name": "start", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "Start date for the statistics"}, {"name": "end", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "End date for the statistics"}], "responses": {"200": {"description": "Statistics data", "content": {"application/json": {"schema": {"type": "object", "properties": {"start": {"type": "string", "format": "date-time"}, "end": {"type": "string", "format": "date-time"}, "resolution": {"type": "string"}, "stats": {"type": "array", "items": {"type": "object", "properties": {"time": {"type": "string", "format": "date-time"}, "accepted": {"type": "object", "properties": {"incoming": {"type": "integer"}, "outgoing": {"type": "integer"}, "total": {"type": "integer"}}}}}}}}}}}}}}}, "components": {"securitySchemes": {"basicAuth": {"type": "http", "scheme": "basic"}}}, "security": [{"basicAuth": []}]}}, {"title": "Sumo Logic API", "content": {"openapi": "3.0.0", "info": {"title": "Sumo Logic API", "description": "API for interacting with Sumo Logic services", "version": "1.0.0", "contact": {"name": "Sumo Logic Support", "url": "https://support.sumologic.com/", "email": "support@sumologic.com"}}, "servers": [{"url": "https://api.sumologic.com/api/v1"}], "paths": {"/collectors": {"get": {"summary": "List all collectors", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CollectorList"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new collector", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Collector"}}}}, "responses": {"201": {"description": "Collector created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Collector"}}}}}, "security": [{"bearerAuth": []}]}}, "/collectors/{collectorId}": {"get": {"summary": "Get a specific collector", "parameters": [{"name": "collectorId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Collector"}}}}}, "security": [{"bearerAuth": []}]}, "put": {"summary": "Update a collector", "parameters": [{"name": "collectorId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Collector"}}}}, "responses": {"200": {"description": "Collector updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Collector"}}}}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete a collector", "parameters": [{"name": "collectorId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Collector deleted successfully"}}, "security": [{"bearerAuth": []}]}}, "/collectors/{collectorId}/sources": {"get": {"summary": "List sources for a collector", "parameters": [{"name": "collectorId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SourceList"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new source", "parameters": [{"name": "collectorId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Source"}}}}, "responses": {"201": {"description": "Source created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Source"}}}}}, "security": [{"bearerAuth": []}]}}, "/collectors/{collectorId}/sources/{sourceId}": {"get": {"summary": "Get a specific source", "parameters": [{"name": "collectorId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "sourceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Source"}}}}}, "security": [{"bearerAuth": []}]}, "put": {"summary": "Update a source", "parameters": [{"name": "collectorId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "sourceId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Source"}}}}, "responses": {"200": {"description": "Source updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Source"}}}}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete a source", "parameters": [{"name": "collectorId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "sourceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Source deleted successfully"}}, "security": [{"bearerAuth": []}]}}, "/content": {"get": {"summary": "List content items", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentList"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new content item", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Content"}}}}, "responses": {"201": {"description": "Content item created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Content"}}}}}, "security": [{"bearerAuth": []}]}}, "/content/{contentId}": {"get": {"summary": "Get a specific content item", "parameters": [{"name": "contentId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Content"}}}}}, "security": [{"bearerAuth": []}]}, "put": {"summary": "Update a content item", "parameters": [{"name": "contentId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Content"}}}}, "responses": {"200": {"description": "Content item updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Content"}}}}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete a content item", "parameters": [{"name": "contentId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Content item deleted successfully"}}, "security": [{"bearerAuth": []}]}}, "/users": {"get": {"summary": "List all users", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new user", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "responses": {"201": {"description": "User created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"bearerAuth": []}]}}, "/users/{userId}": {"get": {"summary": "Get a specific user", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"bearerAuth": []}]}, "put": {"summary": "Update a user", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "responses": {"200": {"description": "User updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete a user", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "User deleted successfully"}}, "security": [{"bearerAuth": []}]}}, "/roles": {"get": {"summary": "List all roles", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RoleList"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new role", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Role"}}}}, "responses": {"201": {"description": "Role created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Role"}}}}}, "security": [{"bearerAuth": []}]}}, "/roles/{roleId}": {"get": {"summary": "Get a specific role", "parameters": [{"name": "roleId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Role"}}}}}, "security": [{"bearerAuth": []}]}, "put": {"summary": "Update a role", "parameters": [{"name": "roleId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Role"}}}}, "responses": {"200": {"description": "Role updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Role"}}}}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete a role", "parameters": [{"name": "roleId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Role deleted successfully"}}, "security": [{"bearerAuth": []}]}}}, "components": {"schemas": {"Collector": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "category": {"type": "string"}, "type": {"type": "string", "enum": ["Hosted", "Installed"]}, "timeZone": {"type": "string"}, "fields": {"type": "object", "additionalProperties": {"type": "string"}}}}, "CollectorList": {"type": "object", "properties": {"collectors": {"type": "array", "items": {"$ref": "#/components/schemas/Collector"}}}}, "Source": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "category": {"type": "string"}, "sourceType": {"type": "string"}, "filters": {"type": "array", "items": {"type": "object"}}, "pathExpression": {"type": "string"}, "encoding": {"type": "string"}, "fields": {"type": "object", "additionalProperties": {"type": "string"}}}}, "SourceList": {"type": "object", "properties": {"sources": {"type": "array", "items": {"$ref": "#/components/schemas/Source"}}}}, "Content": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "type": {"type": "string", "enum": ["Dashboard", "Folder", "Report"]}, "parentId": {"type": "string"}, "permissions": {"type": "array", "items": {"type": "string"}}}}, "ContentList": {"type": "object", "properties": {"content": {"type": "array", "items": {"$ref": "#/components/schemas/Content"}}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string"}, "roleIds": {"type": "array", "items": {"type": "string"}}, "isActive": {"type": "boolean"}}}, "UserList": {"type": "object", "properties": {"users": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "Role": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "filterPredicate": {"type": "string"}, "capabilities": {"type": "array", "items": {"type": "string"}}}}, "RoleList": {"type": "object", "properties": {"roles": {"type": "array", "items": {"$ref": "#/components/schemas/Role"}}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "Qualcomm API", "content": {"openapi": "3.0.0", "info": {"title": "Qualcomm API", "description": "API for accessing Qualcomm product information, technologies, and business data", "version": "1.0.0", "contact": {"name": "Qualcomm API Support", "url": "https://www.qualcomm.com/support", "email": "api-support@qualcomm.com"}}, "servers": [{"url": "https://api.qualcomm.com/v1"}], "paths": {"/products": {"get": {"summary": "List all products", "description": "Retrieve a list of all Qualcomm products", "parameters": [{"name": "category", "in": "query", "description": "Filter products by category", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "description": "Number of items to skip", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}}}}}, "/products/{productId}": {"get": {"summary": "Get product details", "description": "Retrieve details for a specific product", "parameters": [{"name": "productId", "in": "path", "required": true, "description": "ID of the product to retrieve", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}}, "/technologies": {"get": {"summary": "List all technologies", "description": "Retrieve a list of all Qualcomm technologies", "parameters": [{"name": "category", "in": "query", "description": "Filter technologies by category", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "description": "Number of items to skip", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Technology"}}}}}}}}, "/technologies/{technologyId}": {"get": {"summary": "Get technology details", "description": "Retrieve details for a specific technology", "parameters": [{"name": "technologyId", "in": "path", "required": true, "description": "ID of the technology to retrieve", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Technology"}}}}, "404": {"description": "Technology not found"}}}}, "/investors/financial-reports": {"get": {"summary": "List financial reports", "description": "Retrieve a list of Qualcomm's financial reports", "parameters": [{"name": "year", "in": "query", "description": "Filter reports by year", "schema": {"type": "integer"}}, {"name": "quarter", "in": "query", "description": "Filter reports by quarter", "schema": {"type": "integer", "minimum": 1, "maximum": 4}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "description": "Number of items to skip", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/FinancialReport"}}}}}}}}, "/investors/stock-price": {"get": {"summary": "Get current stock price", "description": "Retrieve the current stock price for Qualcomm", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StockPrice"}}}}}}}, "/partners": {"get": {"summary": "List partners", "description": "Retrieve a list of Qualcomm's partners", "parameters": [{"name": "type", "in": "query", "description": "Filter partners by type", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "description": "Number of items to skip", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Partner"}}}}}}}}}, "components": {"schemas": {"Product": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "category": {"type": "string"}, "specifications": {"type": "object"}, "releaseDate": {"type": "string", "format": "date"}}}, "Technology": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "category": {"type": "string"}, "features": {"type": "array", "items": {"type": "string"}}}}, "FinancialReport": {"type": "object", "properties": {"id": {"type": "string"}, "year": {"type": "integer"}, "quarter": {"type": "integer"}, "revenue": {"type": "number"}, "netIncome": {"type": "number"}, "eps": {"type": "number"}, "reportUrl": {"type": "string"}}}, "StockPrice": {"type": "object", "properties": {"symbol": {"type": "string"}, "price": {"type": "number"}, "change": {"type": "number"}, "changePercent": {"type": "number"}, "timestamp": {"type": "string", "format": "date-time"}}}, "Partner": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}, "description": {"type": "string"}, "website": {"type": "string"}}}}}}}, {"title": "PayPal API", "content": {"openapi": "3.0.0", "info": {"title": "PayPal API", "description": "API for integrating PayPal payment services", "version": "2.0.0", "contact": {"name": "PayPal Developer Support", "url": "https://developer.paypal.com/support/"}}, "servers": [{"url": "https://api.paypal.com/v2", "description": "Production server"}, {"url": "https://api.sandbox.paypal.com/v2", "description": "Sandbox server"}], "paths": {"/payments/payment": {"post": {"summary": "Create a payment", "description": "Create a PayPal payment", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaymentRequest"}}}}, "responses": {"201": {"description": "Payment created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Payment"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["https://uri.paypal.com/services/payments/payment"]}]}}, "/payments/payment/{payment_id}": {"get": {"summary": "Get payment details", "description": "Retrieve details of a specific payment", "parameters": [{"name": "payment_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Payment details retrieved successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Payment"}}}}, "404": {"description": "Payment not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["https://uri.paypal.com/services/payments/payment"]}]}}, "/payments/payment/{payment_id}/execute": {"post": {"summary": "Execute a payment", "description": "Execute an approved PayPal payment", "parameters": [{"name": "payment_id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaymentExecuteRequest"}}}}, "responses": {"200": {"description": "Payment executed successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Payment"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["https://uri.paypal.com/services/payments/payment"]}]}}, "/billing/plans": {"post": {"summary": "Create a billing plan", "description": "Create a new PayPal billing plan", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BillingPlanRequest"}}}}, "responses": {"201": {"description": "Billing plan created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BillingPlan"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["https://uri.paypal.com/services/subscriptions"]}]}}, "/billing/subscriptions": {"post": {"summary": "Create a subscription", "description": "Create a new PayPal subscription", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SubscriptionRequest"}}}}, "responses": {"201": {"description": "Subscription created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Subscription"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["https://uri.paypal.com/services/subscriptions"]}]}}, "/billing/subscriptions/{subscription_id}": {"get": {"summary": "Get subscription details", "description": "Retrieve details of a specific subscription", "parameters": [{"name": "subscription_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Subscription details retrieved successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Subscription"}}}}, "404": {"description": "Subscription not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["https://uri.paypal.com/services/subscriptions"]}]}, "patch": {"summary": "Update a subscription", "description": "Update an existing PayPal subscription", "parameters": [{"name": "subscription_id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SubscriptionUpdateRequest"}}}}, "responses": {"204": {"description": "Subscription updated successfully"}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["https://uri.paypal.com/services/subscriptions"]}]}}}, "components": {"schemas": {"PaymentRequest": {"type": "object", "required": ["intent", "payer", "transactions"], "properties": {"intent": {"type": "string", "enum": ["sale", "authorize", "order"]}, "payer": {"$ref": "#/components/schemas/Payer"}, "transactions": {"type": "array", "items": {"$ref": "#/components/schemas/Transaction"}}, "redirect_urls": {"$ref": "#/components/schemas/RedirectUrls"}}}, "Payment": {"type": "object", "properties": {"id": {"type": "string"}, "intent": {"type": "string"}, "state": {"type": "string"}, "payer": {"$ref": "#/components/schemas/Payer"}, "transactions": {"type": "array", "items": {"$ref": "#/components/schemas/Transaction"}}, "create_time": {"type": "string", "format": "date-time"}, "links": {"type": "array", "items": {"$ref": "#/components/schemas/Link"}}}}, "PaymentExecuteRequest": {"type": "object", "required": ["payer_id"], "properties": {"payer_id": {"type": "string"}}}, "Payer": {"type": "object", "properties": {"payment_method": {"type": "string"}, "status": {"type": "string"}, "payer_info": {"$ref": "#/components/schemas/PayerInfo"}}}, "PayerInfo": {"type": "object", "properties": {"email": {"type": "string"}, "first_name": {"type": "string"}, "last_name": {"type": "string"}, "payer_id": {"type": "string"}}}, "Transaction": {"type": "object", "properties": {"amount": {"$ref": "#/components/schemas/Amount"}, "description": {"type": "string"}, "item_list": {"$ref": "#/components/schemas/ItemList"}}}, "Amount": {"type": "object", "properties": {"total": {"type": "string"}, "currency": {"type": "string"}, "details": {"$ref": "#/components/schemas/AmountDetails"}}}, "AmountDetails": {"type": "object", "properties": {"subtotal": {"type": "string"}, "tax": {"type": "string"}, "shipping": {"type": "string"}}}, "ItemList": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/Item"}}}}, "Item": {"type": "object", "properties": {"name": {"type": "string"}, "sku": {"type": "string"}, "price": {"type": "string"}, "currency": {"type": "string"}, "quantity": {"type": "integer"}}}, "RedirectUrls": {"type": "object", "properties": {"return_url": {"type": "string"}, "cancel_url": {"type": "string"}}}, "Link": {"type": "object", "properties": {"href": {"type": "string"}, "rel": {"type": "string"}, "method": {"type": "string"}}}, "BillingPlanRequest": {"type": "object", "required": ["name", "description", "type", "payment_definitions", "merchant_preferences"], "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "type": {"type": "string", "enum": ["FIXED", "INFINITE"]}, "payment_definitions": {"type": "array", "items": {"$ref": "#/components/schemas/PaymentDefinition"}}, "merchant_preferences": {"$ref": "#/components/schemas/MerchantPreferences"}}}, "BillingPlan": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "type": {"type": "string"}, "state": {"type": "string"}, "create_time": {"type": "string", "format": "date-time"}, "update_time": {"type": "string", "format": "date-time"}, "payment_definitions": {"type": "array", "items": {"$ref": "#/components/schemas/PaymentDefinition"}}, "merchant_preferences": {"$ref": "#/components/schemas/MerchantPreferences"}, "links": {"type": "array", "items": {"$ref": "#/components/schemas/Link"}}}}, "PaymentDefinition": {"type": "object", "properties": {"name": {"type": "string"}, "type": {"type": "string", "enum": ["TRIAL", "REGULAR"]}, "frequency": {"type": "string", "enum": ["WEEK", "DAY", "YEAR", "MONTH"]}, "frequency_interval": {"type": "string"}, "amount": {"$ref": "#/components/schemas/Currency"}, "cycles": {"type": "string"}}}, "MerchantPreferences": {"type": "object", "properties": {"setup_fee": {"$ref": "#/components/schemas/Currency"}, "return_url": {"type": "string"}, "cancel_url": {"type": "string"}, "auto_bill_amount": {"type": "string", "enum": ["YES", "NO"]}, "initial_fail_amount_action": {"type": "string", "enum": ["CONTINUE", "CANCEL"]}, "max_fail_attempts": {"type": "string"}}}, "Currency": {"type": "object", "properties": {"value": {"type": "string"}, "currency": {"type": "string"}}}, "SubscriptionRequest": {"type": "object", "required": ["plan_id", "start_time", "subscriber"], "properties": {"plan_id": {"type": "string"}, "start_time": {"type": "string", "format": "date-time"}, "subscriber": {"$ref": "#/components/schemas/Subscriber"}, "application_context": {"$ref": "#/components/schemas/ApplicationContext"}}}, "Subscription": {"type": "object", "properties": {"id": {"type": "string"}, "plan_id": {"type": "string"}, "start_time": {"type": "string", "format": "date-time"}, "quantity": {"type": "string"}, "shipping_amount": {"$ref": "#/components/schemas/Currency"}, "subscriber": {"$ref": "#/components/schemas/Subscriber"}, "billing_info": {"$ref": "#/components/schemas/BillingInfo"}, "create_time": {"type": "string", "format": "date-time"}, "update_time": {"type": "string", "format": "date-time"}, "links": {"type": "array", "items": {"$ref": "#/components/schemas/Link"}}}}, "Subscriber": {"type": "object", "properties": {"name": {"$ref": "#/components/schemas/Name"}, "email_address": {"type": "string"}, "shipping_address": {"$ref": "#/components/schemas/ShippingAddress"}}}, "Name": {"type": "object", "properties": {"given_name": {"type": "string"}, "surname": {"type": "string"}}}, "ShippingAddress": {"type": "object", "properties": {"address_line_1": {"type": "string"}, "address_line_2": {"type": "string"}, "admin_area_2": {"type": "string"}, "admin_area_1": {"type": "string"}, "postal_code": {"type": "string"}, "country_code": {"type": "string"}}}, "ApplicationContext": {"type": "object", "properties": {"brand_name": {"type": "string"}, "locale": {"type": "string"}, "shipping_preference": {"type": "string", "enum": ["GET_FROM_FILE", "NO_SHIPPING", "SET_PROVIDED_ADDRESS"]}, "user_action": {"type": "string", "enum": ["CONTINUE", "SUBSCRIBE_NOW"]}, "payment_method": {"$ref": "#/components/schemas/PaymentMethod"}, "return_url": {"type": "string"}, "cancel_url": {"type": "string"}}}, "PaymentMethod": {"type": "object", "properties": {"payer_selected": {"type": "string"}, "payee_preferred": {"type": "string", "enum": ["UNRESTRICTED", "IMMEDIATE_PAYMENT_REQUIRED"]}}}, "BillingInfo": {"type": "object", "properties": {"outstanding_balance": {"$ref": "#/components/schemas/Currency"}, "cycle_executions": {"type": "array", "items": {"$ref": "#/components/schemas/CycleExecution"}}, "last_payment": {"$ref": "#/components/schemas/LastPayment"}, "next_billing_time": {"type": "string", "format": "date-time"}, "failed_payments_count": {"type": "integer"}}}, "CycleExecution": {"type": "object", "properties": {"tenure_type": {"type": "string", "enum": ["REGULAR", "TRIAL"]}, "sequence": {"type": "integer"}, "cycles_completed": {"type": "integer"}, "cycles_remaining": {"type": "integer"}, "total_cycles": {"type": "integer"}}}, "LastPayment": {"type": "object", "properties": {"amount": {"$ref": "#/components/schemas/Currency"}, "time": {"type": "string", "format": "date-time"}}}, "SubscriptionUpdateRequest": {"type": "object", "properties": {"plan_id": {"type": "string"}, "shipping_amount": {"$ref": "#/components/schemas/Currency"}, "shipping_address": {"$ref": "#/components/schemas/ShippingAddress"}, "application_context": {"$ref": "#/components/schemas/ApplicationContext"}}}, "Error": {"type": "object", "properties": {"name": {"type": "string"}, "message": {"type": "string"}, "debug_id": {"type": "string"}, "details": {"type": "array", "items": {"$ref": "#/components/schemas/ErrorDetails"}}, "links": {"type": "array", "items": {"$ref": "#/components/schemas/Link"}}}}, "ErrorDetails": {"type": "object", "properties": {"field": {"type": "string"}, "issue": {"type": "string"}, "location": {"type": "string"}}}}, "securitySchemes": {"oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://www.paypal.com/signin/authorize", "tokenUrl": "https://api.paypal.com/v1/oauth2/token", "scopes": {"https://uri.paypal.com/services/payments/payment": "Create and manage payments", "https://uri.paypal.com/services/subscriptions": "Create and manage subscriptions"}}}}}}}}, {"title": "IBM API", "content": {"openapi": "3.0.0", "info": {"title": "IBM API", "description": "A comprehensive API for IBM services and products", "version": "1.0.0", "contact": {"name": "IBM API Support", "url": "https://www.ibm.com/support", "email": "api-support@ibm.com"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "https://api.ibm.com/v1", "description": "Production server"}, {"url": "https://api-test.ibm.com/v1", "description": "Test server"}], "tags": [{"name": "Cloud", "description": "IBM Cloud services"}, {"name": "AI", "description": "IBM Watson and AI services"}, {"name": "Security", "description": "IBM Security services"}, {"name": "Blockchain", "description": "IBM Blockchain services"}, {"name": "Quantum", "description": "IBM Quantum computing services"}], "paths": {"/cloud/instances": {"get": {"summary": "List cloud instances", "tags": ["Cloud"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CloudInstancesList"}}}}}}, "post": {"summary": "Create a new cloud instance", "tags": ["Cloud"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CloudInstanceCreate"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CloudInstance"}}}}}}}, "/ai/nlp/analyze": {"post": {"summary": "Analyze text using NLP", "tags": ["AI"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NLPAnalyzeRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NLPAnalyzeResponse"}}}}}}}, "/security/threats": {"get": {"summary": "Get security threats", "tags": ["Security"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SecurityThreatsList"}}}}}}}, "/blockchain/networks": {"get": {"summary": "List blockchain networks", "tags": ["Blockchain"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BlockchainNetworksList"}}}}}}}, "/quantum/jobs": {"post": {"summary": "Submit a quantum computing job", "tags": ["Quantum"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QuantumJobSubmit"}}}}, "responses": {"202": {"description": "Accepted", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QuantumJob"}}}}}}}}, "components": {"schemas": {"CloudInstancesList": {"type": "array", "items": {"$ref": "#/components/schemas/CloudInstance"}}, "CloudInstance": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string", "enum": ["compute", "storage", "network"]}, "status": {"type": "string", "enum": ["running", "stopped", "error"]}}}, "CloudInstanceCreate": {"type": "object", "required": ["name", "type"], "properties": {"name": {"type": "string"}, "type": {"type": "string", "enum": ["compute", "storage", "network"]}}}, "NLPAnalyzeRequest": {"type": "object", "required": ["text"], "properties": {"text": {"type": "string"}, "features": {"type": "array", "items": {"type": "string", "enum": ["entities", "keywords", "sentiment"]}}}}, "NLPAnalyzeResponse": {"type": "object", "properties": {"entities": {"type": "array", "items": {"type": "object", "properties": {"text": {"type": "string"}, "type": {"type": "string"}}}}, "keywords": {"type": "array", "items": {"type": "string"}}, "sentiment": {"type": "object", "properties": {"score": {"type": "number"}, "label": {"type": "string", "enum": ["positive", "negative", "neutral"]}}}}}, "SecurityThreatsList": {"type": "array", "items": {"$ref": "#/components/schemas/SecurityThreat"}}, "SecurityThreat": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string"}, "severity": {"type": "string", "enum": ["low", "medium", "high", "critical"]}, "description": {"type": "string"}}}, "BlockchainNetworksList": {"type": "array", "items": {"$ref": "#/components/schemas/BlockchainNetwork"}}, "BlockchainNetwork": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string", "enum": ["public", "private", "consortium"]}, "status": {"type": "string", "enum": ["active", "inactive"]}}}, "QuantumJobSubmit": {"type": "object", "required": ["circuit", "shots"], "properties": {"circuit": {"type": "string"}, "shots": {"type": "integer", "minimum": 1}, "backend": {"type": "string"}}}, "QuantumJob": {"type": "object", "properties": {"id": {"type": "string"}, "status": {"type": "string", "enum": ["queued", "running", "completed", "failed"]}, "results": {"type": "object"}}}}, "securitySchemes": {"ApiKeyAuth": {"type": "apiKey", "in": "header", "name": "X-API-Key"}, "OAuth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://auth.ibm.com/oauth/authorize", "tokenUrl": "https://auth.ibm.com/oauth/token", "scopes": {"read:cloud": "Read access to cloud resources", "write:cloud": "Write access to cloud resources", "read:ai": "Read access to AI services", "write:ai": "Write access to AI services", "read:security": "Read access to security services", "read:blockchain": "Read access to blockchain services", "write:quantum": "Write access to quantum computing services"}}}}}}, "security": [{"ApiKeyAuth": []}, {"OAuth2": ["read:cloud", "write:cloud", "read:ai", "write:ai", "read:security", "read:blockchain", "write:quantum"]}]}}, {"title": "RingCentral API", "content": {"openapi": "3.0.0", "info": {"title": "RingCentral API", "description": "The RingCentral API allows you to integrate RingCentral's communication services into your applications.", "version": "1.0.0", "contact": {"name": "RingCentral Developer Support", "url": "https://developers.ringcentral.com", "email": "devsupport@ringcentral.com"}}, "servers": [{"url": "https://platform.ringcentral.com/restapi/v1.0"}], "paths": {"/account/{accountId}": {"get": {"summary": "Get Account Info", "description": "Returns account information by ID", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Account"}}}}}}}, "/account/{accountId}/extension": {"get": {"summary": "List Extensions", "description": "Returns a list of extensions for the specified account", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Extension"}}}}}}}}, "/account/{accountId}/extension/{extensionId}": {"get": {"summary": "Get Extension Info", "description": "Returns extension information by ID", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "extensionId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Extension"}}}}}}}, "/account/{accountId}/extension/{extensionId}/message-store": {"get": {"summary": "List Messages", "description": "Returns a list of messages for the specified extension", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "extensionId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Message"}}}}}}}}, "/account/{accountId}/extension/{extensionId}/call-log": {"get": {"summary": "Get Call Log", "description": "Returns call log records for the specified extension", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "extensionId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/CallLogRecord"}}}}}}}}, "/account/{accountId}/extension/{extensionId}/phone-number": {"get": {"summary": "Get Phone Numbers", "description": "Returns a list of phone numbers assigned to the extension", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "extensionId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PhoneNumber"}}}}}}}}}, "components": {"schemas": {"Account": {"type": "object", "properties": {"id": {"type": "string"}, "uri": {"type": "string"}, "mainNumber": {"type": "string"}, "status": {"type": "string", "enum": ["Active", "Suspended", "Closed"]}, "serviceInfo": {"type": "object", "properties": {"brand": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}}}, "servicePlan": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}}}}}}}, "Extension": {"type": "object", "properties": {"id": {"type": "string"}, "uri": {"type": "string"}, "extensionNumber": {"type": "string"}, "type": {"type": "string", "enum": ["User", "Department", "AnnounceOnly", "Voicemail", "SharedLinesGroup", "PagingOnly", "IvrMenu", "ApplicationExtension", "ParkLocation"]}, "status": {"type": "string", "enum": ["Enabled", "Disabled", "NotActivated", "Unassigned"]}, "name": {"type": "string"}, "contact": {"type": "object", "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string"}, "businessPhone": {"type": "string"}, "mobilePhone": {"type": "string"}}}}}, "Message": {"type": "object", "properties": {"id": {"type": "string"}, "uri": {"type": "string"}, "type": {"type": "string", "enum": ["Fax", "SMS", "VoiceMail", "Pager"]}, "from": {"type": "object", "properties": {"phoneNumber": {"type": "string"}, "name": {"type": "string"}}}, "to": {"type": "array", "items": {"type": "object", "properties": {"phoneNumber": {"type": "string"}, "name": {"type": "string"}}}}, "subject": {"type": "string"}, "direction": {"type": "string", "enum": ["Inbound", "Outbound"]}, "readStatus": {"type": "string", "enum": ["Read", "Unread"]}, "priority": {"type": "string", "enum": ["Normal", "High"]}, "attachments": {"type": "array", "items": {"type": "object", "properties": {"id": {"type": "string"}, "uri": {"type": "string"}, "type": {"type": "string"}, "contentType": {"type": "string"}, "size": {"type": "integer"}}}}, "creationTime": {"type": "string", "format": "date-time"}, "lastModifiedTime": {"type": "string", "format": "date-time"}}}, "CallLogRecord": {"type": "object", "properties": {"id": {"type": "string"}, "uri": {"type": "string"}, "sessionId": {"type": "string"}, "from": {"type": "object", "properties": {"phoneNumber": {"type": "string"}, "name": {"type": "string"}}}, "to": {"type": "object", "properties": {"phoneNumber": {"type": "string"}, "name": {"type": "string"}}}, "type": {"type": "string", "enum": ["Voice", "Fax"]}, "direction": {"type": "string", "enum": ["Inbound", "Outbound"]}, "action": {"type": "string", "enum": ["Phone Call", "Phone Login", "Incoming Fax", "Accept Call", "FindMe", "FollowMe", "Outgoing Fax", "Call Return", "Calling Card", "Ring Directly", "RingOut Web", "VoIP Call", "RingOut PC", "RingMe", "Transfer", "Internal Call", "Other"]}, "result": {"type": "string", "enum": ["Accepted", "Call connected", "Voicemail", "Rejected", "Missed", "Busy", "No Answer", "Hang Up", "Blocked", "Suspended account", "Call Failed", "System Failure", "Other"]}, "startTime": {"type": "string", "format": "date-time"}, "duration": {"type": "integer"}, "recording": {"type": "object", "properties": {"id": {"type": "string"}, "uri": {"type": "string"}, "type": {"type": "string"}, "contentUri": {"type": "string"}}}}}, "PhoneNumber": {"type": "object", "properties": {"id": {"type": "string"}, "uri": {"type": "string"}, "phoneNumber": {"type": "string"}, "type": {"type": "string", "enum": ["VoiceFax", "FaxOnly", "VoiceOnly"]}, "usageType": {"type": "string", "enum": ["MainCompanyNumber", "AdditionalCompanyNumber", "DirectNumber", "CompanyFaxNumber", "ForwardedNumber"]}, "features": {"type": "array", "items": {"type": "string", "enum": ["CallerId", "SmsSender", "MmsSender", "InternationalSmsSender", "InternationalMmsSender"]}}}}}, "securitySchemes": {"oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://platform.ringcentral.com/restapi/oauth/authorize", "tokenUrl": "https://platform.ringcentral.com/restapi/oauth/token", "scopes": {"ReadAccounts": "Read account information", "ReadCallLog": "Read call log data", "ReadContacts": "Read user contacts", "ReadMessages": "Read user messages", "ReadPresence": "Read user presence information", "EditExtensions": "Update user extensions", "EditMessages": "Update user messages", "EditPresence": "Update user presence", "Faxes": "Send faxes", "InternalMessages": "Send internal messages", "Meetings": "Create and manage meetings", "RingOut": "Make calls on behalf of user", "SMS": "Send SMS messages", "VoipCalling": "Make VoIP calls"}}}}}}, "security": [{"oauth2": []}]}}, {"title": "Expedia API", "content": {"openapi": "3.0.0", "info": {"title": "Expedia API", "description": "API for interacting with Expedia's travel booking services", "version": "1.0.0", "contact": {"name": "Expedia API Support", "url": "https://developer.expedia.com/support", "email": "api-support@expedia.com"}}, "servers": [{"url": "https://api.expedia.com/v1", "description": "Production server"}, {"url": "https://api-sandbox.expedia.com/v1", "description": "Sandbox server for testing"}], "tags": [{"name": "Hotels", "description": "Hotel search and booking operations"}, {"name": "Flights", "description": "Flight search and booking operations"}, {"name": "Cars", "description": "Car rental search and booking operations"}, {"name": "Packages", "description": "Travel package search and booking operations"}, {"name": "Activities", "description": "Activity and tour search and booking operations"}, {"name": "User", "description": "User account management operations"}, {"name": "Booking", "description": "General booking management operations"}], "paths": {"/hotels/search": {"get": {"summary": "Search for hotels", "tags": ["Hotels"], "parameters": [{"name": "destination", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Destination city or region"}, {"name": "checkIn", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}, "description": "Check-in date"}, {"name": "checkOut", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}, "description": "Check-out date"}, {"name": "guests", "in": "query", "required": true, "schema": {"type": "integer", "minimum": 1}, "description": "Number of guests"}, {"name": "rooms", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 1}, "description": "Number of rooms"}, {"name": "priceMin", "in": "query", "required": false, "schema": {"type": "number"}, "description": "Minimum price per night"}, {"name": "priceMax", "in": "query", "required": false, "schema": {"type": "number"}, "description": "Maximum price per night"}, {"name": "starRating", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 1, "maximum": 5}, "description": "Minimum star rating"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HotelSearchResponse"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/hotels/{hotelId}": {"get": {"summary": "Get hotel details", "tags": ["Hotels"], "parameters": [{"name": "hotelId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Unique identifier for the hotel"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HotelDetails"}}}}, "404": {"description": "Hotel not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/flights/search": {"get": {"summary": "Search for flights", "tags": ["Flights"], "parameters": [{"name": "origin", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Origin airport code"}, {"name": "destination", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Destination airport code"}, {"name": "departureDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}, "description": "Departure date"}, {"name": "returnDate", "in": "query", "required": false, "schema": {"type": "string", "format": "date"}, "description": "Return date (for round-trip flights)"}, {"name": "adults", "in": "query", "required": true, "schema": {"type": "integer", "minimum": 1}, "description": "Number of adult passengers"}, {"name": "children", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 0}, "description": "Number of child passengers"}, {"name": "infants", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 0}, "description": "Number of infant passengers"}, {"name": "cabinClass", "in": "query", "required": false, "schema": {"type": "string", "enum": ["economy", "premium_economy", "business", "first"]}, "description": "Preferred cabin class"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FlightSearchResponse"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/cars/search": {"get": {"summary": "Search for car rentals", "tags": ["Cars"], "parameters": [{"name": "pickupLocation", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Pickup location"}, {"name": "dropoffLocation", "in": "query", "required": false, "schema": {"type": "string"}, "description": "Dropoff location (if different from pickup)"}, {"name": "pickupDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date-time"}, "description": "Pickup date and time"}, {"name": "dropoffDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date-time"}, "description": "Dropoff date and time"}, {"name": "carType", "in": "query", "required": false, "schema": {"type": "string", "enum": ["economy", "compact", "midsize", "fullsize", "suv", "luxury"]}, "description": "Preferred car type"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CarSearchResponse"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/packages/search": {"get": {"summary": "Search for travel packages", "tags": ["Packages"], "parameters": [{"name": "origin", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Origin city or airport code"}, {"name": "destination", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Destination city or region"}, {"name": "departureDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}, "description": "Departure date"}, {"name": "returnDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}, "description": "Return date"}, {"name": "adults", "in": "query", "required": true, "schema": {"type": "integer", "minimum": 1}, "description": "Number of adults"}, {"name": "children", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 0}, "description": "Number of children"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PackageSearchResponse"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/activities/search": {"get": {"summary": "Search for activities and tours", "tags": ["Activities"], "parameters": [{"name": "destination", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Destination city or region"}, {"name": "startDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}, "description": "Start date for activities"}, {"name": "endDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}, "description": "End date for activities"}, {"name": "participants", "in": "query", "required": true, "schema": {"type": "integer", "minimum": 1}, "description": "Number of participants"}, {"name": "category", "in": "query", "required": false, "schema": {"type": "string"}, "description": "Activity category"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ActivitySearchResponse"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/user/profile": {"get": {"summary": "Get user profile", "tags": ["User"], "security": [{"bearerAuth": []}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserProfile"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}, "put": {"summary": "Update user profile", "tags": ["User"], "security": [{"bearerAuth": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserProfileUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserProfile"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/booking": {"post": {"summary": "Create a new booking", "tags": ["Booking"], "security": [{"bearerAuth": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BookingRequest"}}}}, "responses": {"201": {"description": "Booking created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Booking"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/booking/{bookingId}": {"get": {"summary": "Get booking details", "tags": ["Booking"], "security": [{"bearerAuth": []}], "parameters": [{"name": "bookingId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Unique identifier for the booking"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Booking"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "404": {"description": "Booking not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}, "delete": {"summary": "Cancel a booking", "tags": ["Booking"], "security": [{"bearerAuth": []}], "parameters": [{"name": "bookingId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Unique identifier for the booking"}], "responses": {"204": {"description": "Booking cancelled successfully"}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "404": {"description": "Booking not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}}, "components": {"schemas": {"HotelSearchResponse": {"type": "object", "properties": {"hotels": {"type": "array", "items": {"$ref": "#/components/schemas/HotelSummary"}}, "totalResults": {"type": "integer"}, "pagination": {"$ref": "#/components/schemas/Pagination"}}}, "HotelSummary": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "starRating": {"type": "number"}, "address": {"type": "string"}, "thumbnailUrl": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}}}, "HotelDetails": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "starRating": {"type": "number"}, "address": {"type": "string"}, "latitude": {"type": "number"}, "longitude": {"type": "number"}, "amenities": {"type": "array", "items": {"type": "string"}}, "images": {"type": "array", "items": {"type": "string"}}, "rooms": {"type": "array", "items": {"$ref": "#/components/schemas/Room"}}}}, "Room": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "capacity": {"type": "integer"}, "price": {"type": "number"}, "currency": {"type": "string"}}}, "FlightSearchResponse": {"type": "object", "properties": {"flights": {"type": "array", "items": {"$ref": "#/components/schemas/FlightOffer"}}, "totalResults": {"type": "integer"}, "pagination": {"$ref": "#/components/schemas/Pagination"}}}, "FlightOffer": {"type": "object", "properties": {"id": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "outboundFlight": {"$ref": "#/components/schemas/Flight"}, "inboundFlight": {"$ref": "#/components/schemas/Flight"}}}, "Flight": {"type": "object", "properties": {"airline": {"type": "string"}, "flightNumber": {"type": "string"}, "departureAirport": {"type": "string"}, "arrivalAirport": {"type": "string"}, "departureTime": {"type": "string", "format": "date-time"}, "arrivalTime": {"type": "string", "format": "date-time"}, "duration": {"type": "string"}, "stops": {"type": "integer"}}}, "CarSearchResponse": {"type": "object", "properties": {"cars": {"type": "array", "items": {"$ref": "#/components/schemas/CarOffer"}}, "totalResults": {"type": "integer"}, "pagination": {"$ref": "#/components/schemas/Pagination"}}}, "CarOffer": {"type": "object", "properties": {"id": {"type": "string"}, "rentalCompany": {"type": "string"}, "carType": {"type": "string"}, "model": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "pickupLocation": {"type": "string"}, "dropoffLocation": {"type": "string"}}}, "PackageSearchResponse": {"type": "object", "properties": {"packages": {"type": "array", "items": {"$ref": "#/components/schemas/PackageOffer"}}, "totalResults": {"type": "integer"}, "pagination": {"$ref": "#/components/schemas/Pagination"}}}, "PackageOffer": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "hotel": {"$ref": "#/components/schemas/HotelSummary"}, "flight": {"$ref": "#/components/schemas/FlightOffer"}}}, "ActivitySearchResponse": {"type": "object", "properties": {"activities": {"type": "array", "items": {"$ref": "#/components/schemas/Activity"}}, "totalResults": {"type": "integer"}, "pagination": {"$ref": "#/components/schemas/Pagination"}}}, "Activity": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "duration": {"type": "string"}, "location": {"type": "string"}, "category": {"type": "string"}}}, "UserProfile": {"type": "object", "properties": {"id": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string"}, "phoneNumber": {"type": "string"}, "address": {"type": "string"}}}, "UserProfileUpdate": {"type": "object", "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "address": {"type": "string"}}}, "BookingRequest": {"type": "object", "properties": {"type": {"type": "string", "enum": ["hotel", "flight", "car", "package", "activity"]}, "itemId": {"type": "string"}, "startDate": {"type": "string", "format": "date"}, "endDate": {"type": "string", "format": "date"}, "guests": {"type": "integer"}, "specialRequests": {"type": "string"}}, "required": ["type", "itemId", "startDate", "endDate", "guests"]}, "Booking": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["hotel", "flight", "car", "package", "activity"]}, "status": {"type": "string", "enum": ["confirmed", "pending", "cancelled"]}, "bookingDate": {"type": "string", "format": "date-time"}, "startDate": {"type": "string", "format": "date"}, "endDate": {"type": "string", "format": "date"}, "guests": {"type": "integer"}, "totalPrice": {"type": "number"}, "currency": {"type": "string"}, "itemDetails": {"type": "object"}}}, "Pagination": {"type": "object", "properties": {"currentPage": {"type": "integer"}, "pageSize": {"type": "integer"}, "totalPages": {"type": "integer"}}}, "Error": {"type": "object", "properties": {"code": {"type": "string"}, "message": {"type": "string"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}}}, {"title": "Splunk API", "content": {"openapi": "3.0.0", "info": {"title": "Splunk API", "description": "API specification for interacting with Splunk", "version": "1.0.0", "contact": {"name": "Splunk Support", "url": "https://www.splunk.com/en_us/support-and-services.html"}}, "servers": [{"url": "https://{splunk-instance}/services", "variables": {"splunk-instance": {"default": "localhost:8089", "description": "The Splunk instance hostname and port"}}}], "paths": {"/search/jobs": {"post": {"summary": "Create a search job", "operationId": "createSearchJob", "tags": ["Search"], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"search": {"type": "string", "description": "The search query"}, "earliest_time": {"type": "string", "description": "Earliest time for the search"}, "latest_time": {"type": "string", "description": "Latest time for the search"}}, "required": ["search"]}}}}, "responses": {"201": {"description": "Search job created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SearchJob"}}}}}}, "get": {"summary": "List search jobs", "operationId": "listSearchJobs", "tags": ["Search"], "responses": {"200": {"description": "List of search jobs", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/SearchJob"}}}}}}}}, "/search/jobs/{search_id}": {"get": {"summary": "Get search job details", "operationId": "getSearchJob", "tags": ["Search"], "parameters": [{"name": "search_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Search job details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SearchJob"}}}}}}, "delete": {"summary": "Cancel a search job", "operationId": "cancelSearchJob", "tags": ["Search"], "parameters": [{"name": "search_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Search job cancelled successfully"}}}}, "/search/jobs/{search_id}/results": {"get": {"summary": "Get search results", "operationId": "getSearchResults", "tags": ["Search"], "parameters": [{"name": "search_id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "output_mode", "in": "query", "schema": {"type": "string", "enum": ["json", "xml", "csv"]}}], "responses": {"200": {"description": "Search results", "content": {"application/json": {"schema": {"type": "array", "items": {"type": "object"}}}}}}}}, "/data/inputs/tcp": {"get": {"summary": "List TCP inputs", "operationId": "listTcpInputs", "tags": ["Data Inputs"], "responses": {"200": {"description": "List of TCP inputs", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TcpInput"}}}}}}}, "post": {"summary": "Create a TCP input", "operationId": "createTcpInput", "tags": ["Data Inputs"], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TcpInput"}}}}, "responses": {"201": {"description": "TCP input created successfully"}}}}, "/data/inputs/tcp/{name}": {"get": {"summary": "Get TCP input details", "operationId": "getTcpInput", "tags": ["Data Inputs"], "parameters": [{"name": "name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "TCP input details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TcpInput"}}}}}}, "delete": {"summary": "Delete a TCP input", "operationId": "deleteTcpInput", "tags": ["Data Inputs"], "parameters": [{"name": "name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "TCP input deleted successfully"}}}}, "/apps/local": {"get": {"summary": "List installed apps", "operationId": "listApps", "tags": ["Apps"], "responses": {"200": {"description": "List of installed apps", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/App"}}}}}}}, "post": {"summary": "Install an app", "operationId": "installApp", "tags": ["Apps"], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"type": "object", "properties": {"name": {"type": "string"}, "filename": {"type": "string", "format": "binary"}}}}}}, "responses": {"201": {"description": "App installed successfully"}}}}, "/apps/local/{app_name}": {"get": {"summary": "Get app details", "operationId": "getApp", "tags": ["Apps"], "parameters": [{"name": "app_name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "App details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/App"}}}}}}, "delete": {"summary": "Uninstall an app", "operationId": "uninstallApp", "tags": ["Apps"], "parameters": [{"name": "app_name", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "App uninstalled successfully"}}}}}, "components": {"schemas": {"SearchJob": {"type": "object", "properties": {"sid": {"type": "string", "description": "Search job ID"}, "status": {"type": "string", "enum": ["running", "done", "failed"]}, "doneProgress": {"type": "number", "format": "float"}, "earliestTime": {"type": "string", "format": "date-time"}, "latestTime": {"type": "string", "format": "date-time"}}}, "TcpInput": {"type": "object", "properties": {"name": {"type": "string"}, "port": {"type": "integer"}, "index": {"type": "string"}, "sourcetype": {"type": "string"}}, "required": ["name", "port"]}, "App": {"type": "object", "properties": {"name": {"type": "string"}, "label": {"type": "string"}, "version": {"type": "string"}, "description": {"type": "string"}, "author": {"type": "string"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer"}}}, "security": [{"bearerAuth": []}]}}, {"title": "Uber API", "content": {"openapi": "3.0.0", "info": {"title": "Uber API", "description": "API for Uber ride-hailing service", "version": "1.0.0", "contact": {"name": "Uber API Support", "url": "https://developer.uber.com/support", "email": "api-support@uber.com"}}, "servers": [{"url": "https://api.uber.com/v1"}], "paths": {"/users": {"post": {"summary": "Create a new user", "tags": ["Users"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"201": {"description": "User created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Invalid input"}}}}, "/users/{userId}": {"get": {"summary": "Get user details", "tags": ["Users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "User details retrieved successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}}, "put": {"summary": "Update user details", "tags": ["Users"], "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"200": {"description": "User updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "User not found"}}}}, "/rides": {"post": {"summary": "Request a ride", "tags": ["Rides"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RideRequest"}}}}, "responses": {"201": {"description": "Ride requested successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ride"}}}}, "400": {"description": "Invalid input"}}}}, "/rides/{rideId}": {"get": {"summary": "Get ride details", "tags": ["Rides"], "parameters": [{"name": "rideId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Ride details retrieved successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ride"}}}}, "404": {"description": "Ride not found"}}}, "put": {"summary": "Update ride status", "tags": ["Rides"], "parameters": [{"name": "rideId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RideStatusUpdate"}}}}, "responses": {"200": {"description": "Ride status updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ride"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "Ride not found"}}}}, "/drivers": {"post": {"summary": "Register a new driver", "tags": ["Drivers"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DriverCreate"}}}}, "responses": {"201": {"description": "Driver registered successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Driver"}}}}, "400": {"description": "Invalid input"}}}}, "/drivers/{driverId}": {"get": {"summary": "Get driver details", "tags": ["Drivers"], "parameters": [{"name": "driverId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Driver details retrieved successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Driver"}}}}, "404": {"description": "Driver not found"}}}, "put": {"summary": "Update driver details", "tags": ["Drivers"], "parameters": [{"name": "driverId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DriverUpdate"}}}}, "responses": {"200": {"description": "Driver updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Driver"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "Driver not found"}}}}, "/payments": {"post": {"summary": "Process a payment", "tags": ["Payments"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaymentRequest"}}}}, "responses": {"201": {"description": "Payment processed successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Payment"}}}}, "400": {"description": "Invalid input"}}}}, "/payments/{paymentId}": {"get": {"summary": "Get payment details", "tags": ["Payments"], "parameters": [{"name": "paymentId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Payment details retrieved successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Payment"}}}}, "404": {"description": "Payment not found"}}}}}, "components": {"schemas": {"UserCreate": {"type": "object", "required": ["email", "password", "firstName", "lastName"], "properties": {"email": {"type": "string", "format": "email"}, "password": {"type": "string", "format": "password"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}}}, "UserUpdate": {"type": "object", "properties": {"email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "RideRequest": {"type": "object", "required": ["userId", "pickupLocation", "dropoffLocation"], "properties": {"userId": {"type": "string"}, "pickupLocation": {"$ref": "#/components/schemas/Location"}, "dropoffLocation": {"$ref": "#/components/schemas/Location"}, "rideType": {"type": "string", "enum": ["UberX", "UberXL", "UberBLACK", "UberSUV"]}, "estimatedFare": {"type": "number"}}}, "RideStatusUpdate": {"type": "object", "required": ["status"], "properties": {"status": {"type": "string", "enum": ["accepted", "started", "completed", "canceled"]}}}, "Ride": {"type": "object", "properties": {"id": {"type": "string"}, "userId": {"type": "string"}, "driverId": {"type": "string"}, "pickupLocation": {"$ref": "#/components/schemas/Location"}, "dropoffLocation": {"$ref": "#/components/schemas/Location"}, "rideType": {"type": "string", "enum": ["UberX", "UberXL", "UberBLACK", "UberSUV"]}, "status": {"type": "string", "enum": ["requested", "accepted", "started", "completed", "canceled"]}, "estimatedFare": {"type": "number"}, "actualFare": {"type": "number"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "DriverCreate": {"type": "object", "required": ["email", "password", "firstName", "lastName", "licenseNumber", "vehicleInfo"], "properties": {"email": {"type": "string", "format": "email"}, "password": {"type": "string", "format": "password"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "licenseNumber": {"type": "string"}, "vehicleInfo": {"$ref": "#/components/schemas/VehicleInfo"}}}, "DriverUpdate": {"type": "object", "properties": {"email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "licenseNumber": {"type": "string"}, "vehicleInfo": {"$ref": "#/components/schemas/VehicleInfo"}}}, "Driver": {"type": "object", "properties": {"id": {"type": "string"}, "email": {"type": "string", "format": "email"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "phoneNumber": {"type": "string"}, "licenseNumber": {"type": "string"}, "vehicleInfo": {"$ref": "#/components/schemas/VehicleInfo"}, "rating": {"type": "number", "minimum": 0, "maximum": 5}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "VehicleInfo": {"type": "object", "required": ["make", "model", "year", "licensePlate"], "properties": {"make": {"type": "string"}, "model": {"type": "string"}, "year": {"type": "integer"}, "licensePlate": {"type": "string"}, "color": {"type": "string"}}}, "Location": {"type": "object", "required": ["latitude", "longitude"], "properties": {"latitude": {"type": "number"}, "longitude": {"type": "number"}, "address": {"type": "string"}}}, "PaymentRequest": {"type": "object", "required": ["rideId", "amount", "paymentMethod"], "properties": {"rideId": {"type": "string"}, "amount": {"type": "number"}, "paymentMethod": {"type": "string", "enum": ["credit_card", "paypal", "apple_pay", "google_pay"]}}}, "Payment": {"type": "object", "properties": {"id": {"type": "string"}, "rideId": {"type": "string"}, "amount": {"type": "number"}, "paymentMethod": {"type": "string", "enum": ["credit_card", "paypal", "apple_pay", "google_pay"]}, "status": {"type": "string", "enum": ["pending", "completed", "failed"]}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}}}}}, {"title": "Spotify API", "content": {"openapi": "3.0.0", "info": {"title": "Spotify API", "description": "The Spotify Web API allows developers to access and control Spotify's streaming service.", "version": "1.0.0", "contact": {"name": "Spotify Developer Support", "url": "https://developer.spotify.com/support"}}, "servers": [{"url": "https://api.spotify.com/v1"}], "security": [{"oauth2": []}], "paths": {"/albums/{id}": {"get": {"summary": "Get an Album", "description": "Get Spotify catalog information for a single album.", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The Spotify ID of the album."}, {"name": "market", "in": "query", "schema": {"type": "string"}, "description": "An ISO 3166-1 alpha-2 country code."}], "responses": {"200": {"description": "Album object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Album"}}}}}}}, "/albums": {"get": {"summary": "Get Several Albums", "description": "Get Spotify catalog information for multiple albums identified by their Spotify IDs.", "parameters": [{"name": "ids", "in": "query", "required": true, "schema": {"type": "string"}, "description": "A comma-separated list of the Spotify IDs for the albums."}, {"name": "market", "in": "query", "schema": {"type": "string"}, "description": "An ISO 3166-1 alpha-2 country code."}], "responses": {"200": {"description": "A list of album objects", "content": {"application/json": {"schema": {"type": "object", "properties": {"albums": {"type": "array", "items": {"$ref": "#/components/schemas/Album"}}}}}}}}}}, "/albums/{id}/tracks": {"get": {"summary": "Get Album Tracks", "description": "Get Spotify catalog information about an album's tracks.", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The Spotify ID of the album."}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}, "description": "The maximum number of tracks to return."}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "The index of the first track to return."}, {"name": "market", "in": "query", "schema": {"type": "string"}, "description": "An ISO 3166-1 alpha-2 country code."}], "responses": {"200": {"description": "A paging object containing track objects", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paging"}}}}}}}, "/artists/{id}": {"get": {"summary": "Get an Artist", "description": "Get Spotify catalog information for a single artist identified by their unique Spotify ID.", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The Spotify ID of the artist."}], "responses": {"200": {"description": "Artist object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Artist"}}}}}}}, "/artists": {"get": {"summary": "Get Several Artists", "description": "Get Spotify catalog information for several artists based on their Spotify IDs.", "parameters": [{"name": "ids", "in": "query", "required": true, "schema": {"type": "string"}, "description": "A comma-separated list of the Spotify IDs for the artists."}], "responses": {"200": {"description": "A list of artist objects", "content": {"application/json": {"schema": {"type": "object", "properties": {"artists": {"type": "array", "items": {"$ref": "#/components/schemas/Artist"}}}}}}}}}}, "/artists/{id}/albums": {"get": {"summary": "Get an Artist's Albums", "description": "Get Spotify catalog information about an artist's albums.", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The Spotify ID of the artist."}, {"name": "include_groups", "in": "query", "schema": {"type": "string"}, "description": "A comma-separated list of keywords that will be used to filter the response."}, {"name": "market", "in": "query", "schema": {"type": "string"}, "description": "An ISO 3166-1 alpha-2 country code."}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}, "description": "The maximum number of items to return."}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "The index of the first item to return."}], "responses": {"200": {"description": "A paging object containing album objects", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paging"}}}}}}}, "/tracks/{id}": {"get": {"summary": "Get a Track", "description": "Get Spotify catalog information for a single track identified by its unique Spotify ID.", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The Spotify ID of the track."}, {"name": "market", "in": "query", "schema": {"type": "string"}, "description": "An ISO 3166-1 alpha-2 country code."}], "responses": {"200": {"description": "Track object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Track"}}}}}}}, "/tracks": {"get": {"summary": "Get Several Tracks", "description": "Get Spotify catalog information for multiple tracks based on their Spotify IDs.", "parameters": [{"name": "ids", "in": "query", "required": true, "schema": {"type": "string"}, "description": "A comma-separated list of the Spotify IDs for the tracks."}, {"name": "market", "in": "query", "schema": {"type": "string"}, "description": "An ISO 3166-1 alpha-2 country code."}], "responses": {"200": {"description": "A list of track objects", "content": {"application/json": {"schema": {"type": "object", "properties": {"tracks": {"type": "array", "items": {"$ref": "#/components/schemas/Track"}}}}}}}}}}, "/search": {"get": {"summary": "Search for Item", "description": "Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.", "parameters": [{"name": "q", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Search query keywords and optional field filters and operators."}, {"name": "type", "in": "query", "required": true, "schema": {"type": "string"}, "description": "A comma-separated list of item types to search across."}, {"name": "market", "in": "query", "schema": {"type": "string"}, "description": "An ISO 3166-1 alpha-2 country code."}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}, "description": "The maximum number of results to return."}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "The index of the first result to return."}], "responses": {"200": {"description": "Search response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SearchResponse"}}}}}}}, "/me": {"get": {"summary": "Get Current User's Profile", "description": "Get detailed profile information about the current user.", "responses": {"200": {"description": "User object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}}, "/me/playlists": {"get": {"summary": "Get Current User's Playlists", "description": "Get a list of the playlists owned or followed by the current Spotify user.", "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}, "description": "The maximum number of playlists to return."}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "The index of the first playlist to return."}], "responses": {"200": {"description": "A paging object of playlist objects", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paging"}}}}}}}, "/users/{user_id}/playlists": {"get": {"summary": "Get User's Playlists", "description": "Get a list of the playlists owned or followed by a Spotify user.", "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The user's Spotify user ID."}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}, "description": "The maximum number of playlists to return."}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "The index of the first playlist to return."}], "responses": {"200": {"description": "A paging object of playlist objects", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Paging"}}}}}}, "post": {"summary": "Create Playlist", "description": "Create a playlist for a Spotify user.", "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The user's Spotify user ID."}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"name": {"type": "string", "description": "The name for the new playlist."}, "public": {"type": "boolean", "description": "Whether the playlist should be public."}, "collaborative": {"type": "boolean", "description": "Whether the playlist should be collaborative."}, "description": {"type": "string", "description": "The playlist description."}}, "required": ["name"]}}}}, "responses": {"201": {"description": "Playlist object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Playlist"}}}}}}}}, "components": {"schemas": {"Album": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "artists": {"type": "array", "items": {"$ref": "#/components/schemas/Artist"}}, "tracks": {"$ref": "#/components/schemas/Paging"}, "release_date": {"type": "string"}, "images": {"type": "array", "items": {"$ref": "#/components/schemas/Image"}}}}, "Artist": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "genres": {"type": "array", "items": {"type": "string"}}, "popularity": {"type": "integer"}, "images": {"type": "array", "items": {"$ref": "#/components/schemas/Image"}}}}, "Track": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "artists": {"type": "array", "items": {"$ref": "#/components/schemas/Artist"}}, "album": {"$ref": "#/components/schemas/Album"}, "duration_ms": {"type": "integer"}, "popularity": {"type": "integer"}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "display_name": {"type": "string"}, "email": {"type": "string"}, "images": {"type": "array", "items": {"$ref": "#/components/schemas/Image"}}, "country": {"type": "string"}, "product": {"type": "string"}}}, "Playlist": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "owner": {"$ref": "#/components/schemas/User"}, "public": {"type": "boolean"}, "collaborative": {"type": "boolean"}, "tracks": {"$ref": "#/components/schemas/Paging"}, "images": {"type": "array", "items": {"$ref": "#/components/schemas/Image"}}}}, "Image": {"type": "object", "properties": {"url": {"type": "string"}, "height": {"type": "integer"}, "width": {"type": "integer"}}}, "Paging": {"type": "object", "properties": {"href": {"type": "string"}, "items": {"type": "array", "items": {"type": "object"}}, "limit": {"type": "integer"}, "next": {"type": "string"}, "offset": {"type": "integer"}, "previous": {"type": "string"}, "total": {"type": "integer"}}}, "SearchResponse": {"type": "object", "properties": {"tracks": {"$ref": "#/components/schemas/Paging"}, "artists": {"$ref": "#/components/schemas/Paging"}, "albums": {"$ref": "#/components/schemas/Paging"}, "playlists": {"$ref": "#/components/schemas/Paging"}}}}, "securitySchemes": {"oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://accounts.spotify.com/authorize", "tokenUrl": "https://accounts.spotify.com/api/token", "scopes": {"user-read-private": "Read access to user's private information", "user-read-email": "Read access to user's email address", "playlist-read-private": "Read access to user's private playlists", "playlist-modify-public": "Write access to user's public playlists", "playlist-modify-private": "Write access to user's private playlists"}}}}}}}}, {"title": "Etsy API", "content": {"openapi": "3.0.0", "info": {"title": "Etsy API", "description": "API for interacting with Etsy's marketplace", "version": "3.0.0", "contact": {"name": "Etsy Developer Support", "url": "https://www.etsy.com/developers/", "email": "developers@etsy.com"}}, "servers": [{"url": "https://openapi.etsy.com/v3"}], "paths": {"/application/shops/{shop_id}/listings": {"get": {"summary": "Get a Shop's Listings", "description": "Retrieves a list of all active listings for a shop", "parameters": [{"name": "shop_id", "in": "path", "required": true, "schema": {"type": "integer"}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 25, "maximum": 100}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListingsList"}}}}}}, "post": {"summary": "Create a Listing", "description": "Creates a new listing for a shop", "parameters": [{"name": "shop_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListingInput"}}}}, "responses": {"201": {"description": "Listing created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Listing"}}}}}}}, "/application/listings/{listing_id}": {"get": {"summary": "Get a Listing", "description": "Retrieves a specific listing by ID", "parameters": [{"name": "listing_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Listing"}}}}}}, "put": {"summary": "Update a Listing", "description": "Updates a specific listing", "parameters": [{"name": "listing_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListingInput"}}}}, "responses": {"200": {"description": "Listing updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Listing"}}}}}}, "delete": {"summary": "Delete a Listing", "description": "Deletes a specific listing", "parameters": [{"name": "listing_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"204": {"description": "Listing deleted successfully"}}}}, "/application/users/{user_id}": {"get": {"summary": "Get a User", "description": "Retrieves a specific user by ID", "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}}, "/application/shops/{shop_id}": {"get": {"summary": "Get a Shop", "description": "Retrieves a specific shop by ID", "parameters": [{"name": "shop_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Shop"}}}}}}}, "/application/listings/{listing_id}/images": {"post": {"summary": "Upload a Listing Image", "description": "Uploads an image for a specific listing", "parameters": [{"name": "listing_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"type": "object", "properties": {"image": {"type": "string", "format": "binary"}}}}}}, "responses": {"201": {"description": "Image uploaded successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListingImage"}}}}}}}, "/application/shops/{shop_id}/receipts": {"get": {"summary": "Get Shop Receipts", "description": "Retrieves a list of receipts for a shop", "parameters": [{"name": "shop_id", "in": "path", "required": true, "schema": {"type": "integer"}}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 25, "maximum": 100}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReceiptList"}}}}}}}}, "components": {"schemas": {"Listing": {"type": "object", "properties": {"listing_id": {"type": "integer"}, "title": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "quantity": {"type": "integer"}, "shop_id": {"type": "integer"}, "state": {"type": "string", "enum": ["active", "inactive", "sold_out"]}, "created_timestamp": {"type": "integer"}, "updated_timestamp": {"type": "integer"}}}, "ListingInput": {"type": "object", "required": ["title", "description", "price", "quantity"], "properties": {"title": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "quantity": {"type": "integer"}, "state": {"type": "string", "enum": ["active", "inactive"]}}}, "ListingsList": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/components/schemas/Listing"}}}}, "User": {"type": "object", "properties": {"user_id": {"type": "integer"}, "login_name": {"type": "string"}, "primary_email": {"type": "string"}, "created_timestamp": {"type": "integer"}}}, "Shop": {"type": "object", "properties": {"shop_id": {"type": "integer"}, "shop_name": {"type": "string"}, "user_id": {"type": "integer"}, "creation_timestamp": {"type": "integer"}, "title": {"type": "string"}, "announcement": {"type": "string"}}}, "ListingImage": {"type": "object", "properties": {"listing_image_id": {"type": "integer"}, "listing_id": {"type": "integer"}, "rank": {"type": "integer"}, "url_75x75": {"type": "string"}, "url_170x135": {"type": "string"}, "url_570xN": {"type": "string"}, "url_fullxfull": {"type": "string"}}}, "Receipt": {"type": "object", "properties": {"receipt_id": {"type": "integer"}, "order_id": {"type": "integer"}, "shop_id": {"type": "integer"}, "buyer_user_id": {"type": "integer"}, "creation_timestamp": {"type": "integer"}, "last_modified_timestamp": {"type": "integer"}, "name": {"type": "string"}, "first_line": {"type": "string"}, "second_line": {"type": "string"}, "city": {"type": "string"}, "state": {"type": "string"}, "zip": {"type": "string"}, "country_id": {"type": "integer"}, "payment_method": {"type": "string"}, "payment_email": {"type": "string"}, "total_tax_cost": {"type": "number"}, "total_price": {"type": "number"}, "total_shipping_cost": {"type": "number"}, "currency_code": {"type": "string"}, "message_from_buyer": {"type": "string"}}}, "ReceiptList": {"type": "object", "properties": {"count": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/components/schemas/Receipt"}}}}}, "securitySchemes": {"api_key": {"type": "apiKey", "name": "x-api-key", "in": "header"}, "oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://www.etsy.com/oauth/connect", "tokenUrl": "https://api.etsy.com/v3/public/oauth/token", "scopes": {"listings_r": "Read listings", "listings_w": "Write listings", "shops_r": "Read shops", "shops_w": "Write shops", "users_r": "Read user profile", "transactions_r": "Read transactions", "transactions_w": "Write transactions"}}}}}}, "security": [{"api_key": [], "oauth2": []}]}}, {"title": "HubSpot API", "content": {"openapi": "3.0.0", "info": {"title": "HubSpot API", "description": "The HubSpot API allows you to interact with various HubSpot features programmatically.", "version": "1.0.0", "contact": {"name": "HubSpot Support", "url": "https://developers.hubspot.com/support"}}, "servers": [{"url": "https://api.hubapi.com/v3"}], "paths": {"/contacts": {"get": {"summary": "Get all contacts", "description": "Retrieve a list of all contacts in the HubSpot CRM", "operationId": "getContacts", "parameters": [{"name": "limit", "in": "query", "description": "The maximum number of results to return", "schema": {"type": "integer", "default": 100}}, {"name": "after", "in": "query", "description": "The paging cursor token of the last successfully read resource", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContactList"}}}}}}, "post": {"summary": "Create a contact", "description": "Create a new contact in the HubSpot CRM", "operationId": "createContact", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContactInput"}}}}, "responses": {"201": {"description": "Successfully created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Contact"}}}}}}}, "/contacts/{contactId}": {"get": {"summary": "Get a contact", "description": "Retrieve a specific contact by ID", "operationId": "getContact", "parameters": [{"name": "contactId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Contact"}}}}}}, "patch": {"summary": "Update a contact", "description": "Update an existing contact in the HubSpot CRM", "operationId": "updateContact", "parameters": [{"name": "contactId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContactInput"}}}}, "responses": {"200": {"description": "Successfully updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Contact"}}}}}}, "delete": {"summary": "Delete a contact", "description": "Delete a specific contact by ID", "operationId": "deleteContact", "parameters": [{"name": "contactId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Successfully deleted"}}}}, "/companies": {"get": {"summary": "Get all companies", "description": "Retrieve a list of all companies in the HubSpot CRM", "operationId": "getCompanies", "parameters": [{"name": "limit", "in": "query", "description": "The maximum number of results to return", "schema": {"type": "integer", "default": 100}}, {"name": "after", "in": "query", "description": "The paging cursor token of the last successfully read resource", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CompanyList"}}}}}}, "post": {"summary": "Create a company", "description": "Create a new company in the HubSpot CRM", "operationId": "createCompany", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CompanyInput"}}}}, "responses": {"201": {"description": "Successfully created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Company"}}}}}}}, "/deals": {"get": {"summary": "Get all deals", "description": "Retrieve a list of all deals in the HubSpot CRM", "operationId": "getDeals", "parameters": [{"name": "limit", "in": "query", "description": "The maximum number of results to return", "schema": {"type": "integer", "default": 100}}, {"name": "after", "in": "query", "description": "The paging cursor token of the last successfully read resource", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DealList"}}}}}}, "post": {"summary": "Create a deal", "description": "Create a new deal in the HubSpot CRM", "operationId": "createDeal", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DealInput"}}}}, "responses": {"201": {"description": "Successfully created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Deal"}}}}}}}, "/tickets": {"get": {"summary": "Get all tickets", "description": "Retrieve a list of all tickets in the HubSpot Service Hub", "operationId": "getTickets", "parameters": [{"name": "limit", "in": "query", "description": "The maximum number of results to return", "schema": {"type": "integer", "default": 100}}, {"name": "after", "in": "query", "description": "The paging cursor token of the last successfully read resource", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TicketList"}}}}}}, "post": {"summary": "Create a ticket", "description": "Create a new ticket in the HubSpot Service Hub", "operationId": "createTicket", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TicketInput"}}}}, "responses": {"201": {"description": "Successfully created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ticket"}}}}}}}}, "components": {"schemas": {"Contact": {"type": "object", "properties": {"id": {"type": "string"}, "properties": {"type": "object", "additionalProperties": {"type": "object", "properties": {"value": {"type": "string"}, "timestamp": {"type": "string", "format": "date-time"}}}}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "ContactInput": {"type": "object", "properties": {"properties": {"type": "object", "additionalProperties": {"type": "object", "properties": {"value": {"type": "string"}}}}}}, "ContactList": {"type": "object", "properties": {"results": {"type": "array", "items": {"$ref": "#/components/schemas/Contact"}}, "paging": {"$ref": "#/components/schemas/Paging"}}}, "Company": {"type": "object", "properties": {"id": {"type": "string"}, "properties": {"type": "object", "additionalProperties": {"type": "object", "properties": {"value": {"type": "string"}, "timestamp": {"type": "string", "format": "date-time"}}}}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "CompanyInput": {"type": "object", "properties": {"properties": {"type": "object", "additionalProperties": {"type": "object", "properties": {"value": {"type": "string"}}}}}}, "CompanyList": {"type": "object", "properties": {"results": {"type": "array", "items": {"$ref": "#/components/schemas/Company"}}, "paging": {"$ref": "#/components/schemas/Paging"}}}, "Deal": {"type": "object", "properties": {"id": {"type": "string"}, "properties": {"type": "object", "additionalProperties": {"type": "object", "properties": {"value": {"type": "string"}, "timestamp": {"type": "string", "format": "date-time"}}}}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "DealInput": {"type": "object", "properties": {"properties": {"type": "object", "additionalProperties": {"type": "object", "properties": {"value": {"type": "string"}}}}}}, "DealList": {"type": "object", "properties": {"results": {"type": "array", "items": {"$ref": "#/components/schemas/Deal"}}, "paging": {"$ref": "#/components/schemas/Paging"}}}, "Ticket": {"type": "object", "properties": {"id": {"type": "string"}, "properties": {"type": "object", "additionalProperties": {"type": "object", "properties": {"value": {"type": "string"}, "timestamp": {"type": "string", "format": "date-time"}}}}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "TicketInput": {"type": "object", "properties": {"properties": {"type": "object", "additionalProperties": {"type": "object", "properties": {"value": {"type": "string"}}}}}}, "TicketList": {"type": "object", "properties": {"results": {"type": "array", "items": {"$ref": "#/components/schemas/Ticket"}}, "paging": {"$ref": "#/components/schemas/Paging"}}}, "Paging": {"type": "object", "properties": {"next": {"type": "object", "properties": {"after": {"type": "string"}, "link": {"type": "string"}}}}}}, "securitySchemes": {"apiKey": {"type": "apiKey", "in": "header", "name": "Authorization"}}}, "security": [{"apiKey": []}]}}, {"title": "Fortinet API", "content": {"openapi": "3.0.0", "info": {"title": "Fortinet API", "description": "API for managing Fortinet security devices and services", "version": "1.0.0", "contact": {"name": "Fortinet Support", "url": "https://www.fortinet.com/support", "email": "support@fortinet.com"}}, "servers": [{"url": "https://api.fortinet.com/v1"}], "paths": {"/cmdb/system/interface": {"get": {"summary": "Get system interfaces", "description": "Retrieve a list of all system interfaces", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InterfaceList"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create system interface", "description": "Create a new system interface", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Interface"}}}}, "responses": {"201": {"description": "Created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Interface"}}}}}, "security": [{"bearerAuth": []}]}}, "/cmdb/firewall/policy": {"get": {"summary": "Get firewall policies", "description": "Retrieve a list of all firewall policies", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyList"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create firewall policy", "description": "Create a new firewall policy", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Policy"}}}}, "responses": {"201": {"description": "Created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Policy"}}}}}, "security": [{"bearerAuth": []}]}}, "/monitor/system/status": {"get": {"summary": "Get system status", "description": "Retrieve the current system status", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemStatus"}}}}}, "security": [{"bearerAuth": []}]}}, "/monitor/log/disk/event": {"get": {"summary": "Get event logs", "description": "Retrieve event logs from disk", "parameters": [{"name": "start-time", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "Start time for log retrieval"}, {"name": "end-time", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "End time for log retrieval"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventLogList"}}}}}, "security": [{"bearerAuth": []}]}}}, "components": {"schemas": {"Interface": {"type": "object", "properties": {"name": {"type": "string"}, "ip": {"type": "string"}, "netmask": {"type": "string"}, "status": {"type": "string", "enum": ["up", "down"]}}}, "InterfaceList": {"type": "array", "items": {"$ref": "#/components/schemas/Interface"}}, "Policy": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "srcintf": {"type": "string"}, "dstintf": {"type": "string"}, "srcaddr": {"type": "string"}, "dstaddr": {"type": "string"}, "action": {"type": "string", "enum": ["accept", "deny"]}, "status": {"type": "string", "enum": ["enable", "disable"]}}}, "PolicyList": {"type": "array", "items": {"$ref": "#/components/schemas/Policy"}}, "SystemStatus": {"type": "object", "properties": {"version": {"type": "string"}, "cpu_usage": {"type": "number"}, "memory_usage": {"type": "number"}, "disk_usage": {"type": "number"}, "uptime": {"type": "integer"}}}, "EventLog": {"type": "object", "properties": {"id": {"type": "integer"}, "timestamp": {"type": "string", "format": "date-time"}, "level": {"type": "string", "enum": ["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]}, "message": {"type": "string"}}}, "EventLogList": {"type": "array", "items": {"$ref": "#/components/schemas/EventLog"}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}}}, {"title": "Akamai API", "content": {"openapi": "3.0.0", "info": {"title": "Akamai API", "description": "API for interacting with Akamai's Content Delivery Network and other services", "version": "1.0.0", "contact": {"name": "Akamai Support", "url": "https://www.akamai.com/support", "email": "support@akamai.com"}}, "servers": [{"url": "https://api.akamai.com/v1"}], "paths": {"/purge": {"post": {"summary": "Purge content from the CDN", "description": "Remove content from Akamai's edge servers to force a refresh from the origin", "tags": ["CDN"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurgeRequest"}}}}, "responses": {"200": {"description": "Successful purge request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurgeResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}}}, "/cps/v2/enrollments": {"get": {"summary": "List CPS enrollments", "description": "Retrieve a list of Certificate Provisioning System (CPS) enrollments", "tags": ["SSL/TLS"], "responses": {"200": {"description": "Successful retrieval of enrollments", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/CPSEnrollment"}}}}}, "401": {"description": "Unauthorized"}}}, "post": {"summary": "Create a new CPS enrollment", "description": "Create a new Certificate Provisioning System (CPS) enrollment", "tags": ["SSL/TLS"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CPSEnrollmentRequest"}}}}, "responses": {"201": {"description": "Successful creation of enrollment", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CPSEnrollment"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}}}, "/imaging/v0/policies": {"get": {"summary": "List Image Manager policies", "description": "Retrieve a list of Image Manager policies", "tags": ["Image Management"], "responses": {"200": {"description": "Successful retrieval of policies", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ImagePolicy"}}}}}, "401": {"description": "Unauthorized"}}}, "post": {"summary": "Create a new Image Manager policy", "description": "Create a new Image Manager policy", "tags": ["Image Management"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImagePolicyRequest"}}}}, "responses": {"201": {"description": "Successful creation of policy", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImagePolicy"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}}}, "/firewall-rules/v1/configurations": {"get": {"summary": "List Firewall Rules configurations", "description": "Retrieve a list of Firewall Rules configurations", "tags": ["Security"], "responses": {"200": {"description": "Successful retrieval of configurations", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/FirewallConfig"}}}}}, "401": {"description": "Unauthorized"}}}, "post": {"summary": "Create a new Firewall Rules configuration", "description": "Create a new Firewall Rules configuration", "tags": ["Security"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FirewallConfigRequest"}}}}, "responses": {"201": {"description": "Successful creation of configuration", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FirewallConfig"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}}}}, "components": {"schemas": {"PurgeRequest": {"type": "object", "required": ["objects"], "properties": {"objects": {"type": "array", "items": {"type": "string"}, "description": "List of URLs or CPCodes to purge"}, "action": {"type": "string", "enum": ["remove", "invalidate"], "default": "remove", "description": "Purge action to perform"}}}, "PurgeResponse": {"type": "object", "properties": {"estimatedSeconds": {"type": "integer", "description": "Estimated time for the purge to complete"}, "purgeId": {"type": "string", "description": "Unique identifier for the purge request"}}}, "CPSEnrollment": {"type": "object", "properties": {"id": {"type": "string", "description": "Unique identifier for the enrollment"}, "commonName": {"type": "string", "description": "Common name for the certificate"}, "sansCount": {"type": "integer", "description": "Number of Subject Alternative Names"}, "validationStatus": {"type": "string", "description": "Current validation status of the enrollment"}}}, "CPSEnrollmentRequest": {"type": "object", "required": ["csr", "org", "adminContact"], "properties": {"csr": {"type": "string", "description": "Certificate Signing Request"}, "org": {"type": "object", "properties": {"name": {"type": "string", "description": "Organization name"}, "addressLineOne": {"type": "string", "description": "First line of organization address"}, "city": {"type": "string", "description": "City of organization"}, "region": {"type": "string", "description": "Region/State of organization"}, "postalCode": {"type": "string", "description": "Postal code of organization"}, "country": {"type": "string", "description": "Country of organization"}}}, "adminContact": {"type": "object", "properties": {"firstName": {"type": "string", "description": "First name of admin contact"}, "lastName": {"type": "string", "description": "Last name of admin contact"}, "phone": {"type": "string", "description": "Phone number of admin contact"}, "email": {"type": "string", "description": "Email of admin contact"}}}}}, "ImagePolicy": {"type": "object", "properties": {"id": {"type": "string", "description": "Unique identifier for the policy"}, "name": {"type": "string", "description": "Name of the policy"}, "outputFormats": {"type": "array", "items": {"type": "string", "enum": ["jpg", "png", "webp"]}, "description": "Supported output formats"}, "quality": {"type": "integer", "minimum": 1, "maximum": 100, "description": "Image quality setting"}}}, "ImagePolicyRequest": {"type": "object", "required": ["name", "outputFormats", "quality"], "properties": {"name": {"type": "string", "description": "Name of the policy"}, "outputFormats": {"type": "array", "items": {"type": "string", "enum": ["jpg", "png", "webp"]}, "description": "Supported output formats"}, "quality": {"type": "integer", "minimum": 1, "maximum": 100, "description": "Image quality setting"}}}, "FirewallConfig": {"type": "object", "properties": {"id": {"type": "string", "description": "Unique identifier for the configuration"}, "name": {"type": "string", "description": "Name of the configuration"}, "rules": {"type": "array", "items": {"$ref": "#/components/schemas/FirewallRule"}, "description": "List of firewall rules"}}}, "FirewallConfigRequest": {"type": "object", "required": ["name", "rules"], "properties": {"name": {"type": "string", "description": "Name of the configuration"}, "rules": {"type": "array", "items": {"$ref": "#/components/schemas/FirewallRule"}, "description": "List of firewall rules"}}}, "FirewallRule": {"type": "object", "properties": {"id": {"type": "string", "description": "Unique identifier for the rule"}, "name": {"type": "string", "description": "Name of the rule"}, "action": {"type": "string", "enum": ["allow", "deny", "alert"], "description": "Action to take when rule matches"}, "conditions": {"type": "array", "items": {"$ref": "#/components/schemas/FirewallCondition"}, "description": "List of conditions for the rule"}}}, "FirewallCondition": {"type": "object", "properties": {"type": {"type": "string", "enum": ["ip", "geoLocation", "requestHeader", "requestMethod"], "description": "Type of condition"}, "value": {"type": "string", "description": "Value to match for the condition"}, "operator": {"type": "string", "enum": ["equals", "contains", "startsWith", "endsWith"], "description": "Operator for condition matching"}}}}, "securitySchemes": {"edgeGridAuth": {"type": "apiKey", "in": "header", "name": "Authorization", "description": "Akamai EdgeGrid Authentication"}}}, "security": [{"edgeGridAuth": []}]}}, {"title": "Oracle Database API", "content": {"openapi": "3.0.0", "info": {"title": "Oracle Database API", "description": "API for interacting with Oracle Database", "version": "1.0.0", "contact": {"name": "Oracle Support", "url": "https://support.oracle.com", "email": "support@oracle.com"}}, "servers": [{"url": "https://api.oracle.com/v1"}], "paths": {"/connect": {"post": {"summary": "Connect to the database", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConnectionDetails"}}}}, "responses": {"200": {"description": "Successful connection", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConnectionResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}}}, "/execute": {"post": {"summary": "Execute SQL statement", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SQLRequest"}}}}, "responses": {"200": {"description": "Successful execution", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SQLResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}}}, "/tables": {"get": {"summary": "List all tables", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Table"}}}}}, "401": {"description": "Unauthorized"}}}}, "/tables/{tableName}": {"get": {"summary": "Get table details", "parameters": [{"name": "tableName", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TableDetails"}}}}, "404": {"description": "Table not found"}}}}, "/users": {"get": {"summary": "List all users", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}, "401": {"description": "Unauthorized"}}}, "post": {"summary": "Create a new user", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NewUser"}}}}, "responses": {"201": {"description": "User created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}}}, "/users/{username}": {"get": {"summary": "Get user details", "parameters": [{"name": "username", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}}, "put": {"summary": "Update user", "parameters": [{"name": "username", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUser"}}}}, "responses": {"200": {"description": "User updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "400": {"description": "Bad request"}, "404": {"description": "User not found"}}}, "delete": {"summary": "Delete user", "parameters": [{"name": "username", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "User deleted"}, "404": {"description": "User not found"}}}}}, "components": {"schemas": {"ConnectionDetails": {"type": "object", "required": ["host", "port", "sid", "username", "password"], "properties": {"host": {"type": "string"}, "port": {"type": "integer"}, "sid": {"type": "string"}, "username": {"type": "string"}, "password": {"type": "string"}}}, "ConnectionResponse": {"type": "object", "properties": {"sessionId": {"type": "string"}, "message": {"type": "string"}}}, "SQLRequest": {"type": "object", "required": ["sql"], "properties": {"sql": {"type": "string"}, "params": {"type": "object"}}}, "SQLResponse": {"type": "object", "properties": {"results": {"type": "array", "items": {"type": "object"}}, "rowsAffected": {"type": "integer"}}}, "Table": {"type": "object", "properties": {"name": {"type": "string"}, "owner": {"type": "string"}}}, "TableDetails": {"type": "object", "properties": {"name": {"type": "string"}, "owner": {"type": "string"}, "columns": {"type": "array", "items": {"$ref": "#/components/schemas/Column"}}, "indexes": {"type": "array", "items": {"$ref": "#/components/schemas/Index"}}}}, "Column": {"type": "object", "properties": {"name": {"type": "string"}, "dataType": {"type": "string"}, "nullable": {"type": "boolean"}, "defaultValue": {"type": "string"}}}, "Index": {"type": "object", "properties": {"name": {"type": "string"}, "columns": {"type": "array", "items": {"type": "string"}}, "unique": {"type": "boolean"}}}, "User": {"type": "object", "properties": {"username": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}, "status": {"type": "string", "enum": ["ACTIVE", "LOCKED", "EXPIRED"]}, "roles": {"type": "array", "items": {"type": "string"}}}}, "NewUser": {"type": "object", "required": ["username", "password"], "properties": {"username": {"type": "string"}, "password": {"type": "string"}, "roles": {"type": "array", "items": {"type": "string"}}}}, "UpdateUser": {"type": "object", "properties": {"password": {"type": "string"}, "status": {"type": "string", "enum": ["ACTIVE", "LOCKED", "EXPIRED"]}, "roles": {"type": "array", "items": {"type": "string"}}}}}}}}, {"title": "Cloudflare API", "content": {"openapi": "3.0.0", "info": {"title": "Cloudflare API", "description": "API for managing Cloudflare services", "version": "4.0.0", "contact": {"name": "Cloudflare Support", "url": "https://support.cloudflare.com"}}, "servers": [{"url": "https://api.cloudflare.com/client/v4"}], "paths": {"/user": {"get": {"summary": "User Details", "description": "Get information about the logged-in user", "tags": ["User"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserResponse"}}}}}, "security": [{"APIToken": []}]}}, "/zones": {"get": {"summary": "List Zones", "description": "List, search, sort, and filter zones", "tags": ["Zones"], "parameters": [{"name": "name", "in": "query", "description": "A domain name", "schema": {"type": "string"}}, {"name": "status", "in": "query", "description": "Status of the zone", "schema": {"type": "string", "enum": ["active", "pending", "initializing", "moved", "deleted", "deactivated"]}}, {"name": "page", "in": "query", "description": "Page number of paginated results", "schema": {"type": "integer", "minimum": 1}}, {"name": "per_page", "in": "query", "description": "Number of zones per page", "schema": {"type": "integer", "minimum": 5, "maximum": 50}}, {"name": "order", "in": "query", "description": "Field to order zones by", "schema": {"type": "string", "enum": ["name", "status", "account.id"]}}, {"name": "direction", "in": "query", "description": "Direction to order zones", "schema": {"type": "string", "enum": ["asc", "desc"]}}, {"name": "match", "in": "query", "description": "Whether to match all search requirements or at least one", "schema": {"type": "string", "enum": ["all", "any"]}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZonesResponse"}}}}}, "security": [{"APIToken": []}]}, "post": {"summary": "Create Zone", "description": "Create a new zone", "tags": ["Zones"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZoneCreation"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZoneResponse"}}}}}, "security": [{"APIToken": []}]}}, "/zones/{zone_identifier}": {"get": {"summary": "Zone Details", "description": "Get zone details", "tags": ["Zones"], "parameters": [{"name": "zone_identifier", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The zone ID"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZoneResponse"}}}}}, "security": [{"APIToken": []}]}, "patch": {"summary": "Edit Zone", "description": "Edit zone properties", "tags": ["Zones"], "parameters": [{"name": "zone_identifier", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The zone ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZoneEdit"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZoneResponse"}}}}}, "security": [{"APIToken": []}]}, "delete": {"summary": "Delete Zone", "description": "Delete a zone", "tags": ["Zones"], "parameters": [{"name": "zone_identifier", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The zone ID"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZoneDeleteResponse"}}}}}, "security": [{"APIToken": []}]}}, "/zones/{zone_identifier}/dns_records": {"get": {"summary": "List DNS Records", "description": "List, search, sort, and filter a zone's DNS records", "tags": ["DNS Records"], "parameters": [{"name": "zone_identifier", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The zone ID"}, {"name": "type", "in": "query", "schema": {"type": "string"}, "description": "DNS record type"}, {"name": "name", "in": "query", "schema": {"type": "string"}, "description": "DNS record name"}, {"name": "content", "in": "query", "schema": {"type": "string"}, "description": "DNS record content"}, {"name": "page", "in": "query", "schema": {"type": "integer", "minimum": 1}, "description": "Page number of paginated results"}, {"name": "per_page", "in": "query", "schema": {"type": "integer", "minimum": 5, "maximum": 100}, "description": "Number of DNS records per page"}, {"name": "order", "in": "query", "schema": {"type": "string", "enum": ["type", "name", "content", "ttl", "proxied"]}, "description": "Field to order records by"}, {"name": "direction", "in": "query", "schema": {"type": "string", "enum": ["asc", "desc"]}, "description": "Direction to order records"}, {"name": "match", "in": "query", "schema": {"type": "string", "enum": ["all", "any"]}, "description": "Whether to match all search requirements or at least one"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DNSRecordsResponse"}}}}}, "security": [{"APIToken": []}]}, "post": {"summary": "Create DNS Record", "description": "Create a new DNS record for a zone", "tags": ["DNS Records"], "parameters": [{"name": "zone_identifier", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The zone ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DNSRecordCreation"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DNSRecordResponse"}}}}}, "security": [{"APIToken": []}]}}}, "components": {"schemas": {"UserResponse": {"type": "object", "properties": {"result": {"type": "object", "properties": {"id": {"type": "string"}, "email": {"type": "string"}, "first_name": {"type": "string"}, "last_name": {"type": "string"}, "username": {"type": "string"}, "telephone": {"type": "string"}, "country": {"type": "string"}, "zipcode": {"type": "string"}, "created_on": {"type": "string", "format": "date-time"}, "modified_on": {"type": "string", "format": "date-time"}, "two_factor_authentication_enabled": {"type": "boolean"}, "suspended": {"type": "boolean"}}}, "success": {"type": "boolean"}, "errors": {"type": "array", "items": {"type": "object"}}, "messages": {"type": "array", "items": {"type": "object"}}}}, "ZonesResponse": {"type": "object", "properties": {"result": {"type": "array", "items": {"$ref": "#/components/schemas/Zone"}}, "result_info": {"$ref": "#/components/schemas/ResultInfo"}, "success": {"type": "boolean"}, "errors": {"type": "array", "items": {"type": "object"}}, "messages": {"type": "array", "items": {"type": "object"}}}}, "ZoneResponse": {"type": "object", "properties": {"result": {"$ref": "#/components/schemas/Zone"}, "success": {"type": "boolean"}, "errors": {"type": "array", "items": {"type": "object"}}, "messages": {"type": "array", "items": {"type": "object"}}}}, "Zone": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "status": {"type": "string", "enum": ["active", "pending", "initializing", "moved", "deleted", "deactivated"]}, "paused": {"type": "boolean"}, "type": {"type": "string", "enum": ["full", "partial"]}, "development_mode": {"type": "integer"}, "name_servers": {"type": "array", "items": {"type": "string"}}, "original_name_servers": {"type": "array", "items": {"type": "string"}}, "original_registrar": {"type": "string"}, "original_dnshost": {"type": "string"}, "modified_on": {"type": "string", "format": "date-time"}, "created_on": {"type": "string", "format": "date-time"}, "activated_on": {"type": "string", "format": "date-time"}, "meta": {"type": "object", "properties": {"step": {"type": "integer"}, "custom_certificate_quota": {"type": "integer"}, "page_rule_quota": {"type": "integer"}, "phishing_detected": {"type": "boolean"}, "multiple_railguns_allowed": {"type": "boolean"}}}, "owner": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string"}, "email": {"type": "string"}}}, "account": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}}}, "permissions": {"type": "array", "items": {"type": "string"}}, "plan": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "frequency": {"type": "string"}, "is_subscribed": {"type": "boolean"}, "can_subscribe": {"type": "boolean"}, "legacy_id": {"type": "string"}, "legacy_discount": {"type": "boolean"}, "externally_managed": {"type": "boolean"}}}}}, "ZoneCreation": {"type": "object", "required": ["name", "account"], "properties": {"name": {"type": "string"}, "account": {"type": "object", "properties": {"id": {"type": "string"}}}, "jump_start": {"type": "boolean"}, "type": {"type": "string", "enum": ["full", "partial"]}}}, "ZoneEdit": {"type": "object", "properties": {"paused": {"type": "boolean"}, "vanity_name_servers": {"type": "array", "items": {"type": "string"}}, "plan": {"type": "object", "properties": {"id": {"type": "string"}}}}}, "ZoneDeleteResponse": {"type": "object", "properties": {"result": {"type": "object", "properties": {"id": {"type": "string"}}}, "success": {"type": "boolean"}, "errors": {"type": "array", "items": {"type": "object"}}, "messages": {"type": "array", "items": {"type": "object"}}}}, "DNSRecordsResponse": {"type": "object", "properties": {"result": {"type": "array", "items": {"$ref": "#/components/schemas/DNSRecord"}}, "result_info": {"$ref": "#/components/schemas/ResultInfo"}, "success": {"type": "boolean"}, "errors": {"type": "array", "items": {"type": "object"}}, "messages": {"type": "array", "items": {"type": "object"}}}}, "DNSRecordResponse": {"type": "object", "properties": {"result": {"$ref": "#/components/schemas/DNSRecord"}, "success": {"type": "boolean"}, "errors": {"type": "array", "items": {"type": "object"}}, "messages": {"type": "array", "items": {"type": "object"}}}}, "DNSRecord": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string"}, "name": {"type": "string"}, "content": {"type": "string"}, "proxiable": {"type": "boolean"}, "proxied": {"type": "boolean"}, "ttl": {"type": "integer"}, "locked": {"type": "boolean"}, "zone_id": {"type": "string"}, "zone_name": {"type": "string"}, "created_on": {"type": "string", "format": "date-time"}, "modified_on": {"type": "string", "format": "date-time"}, "data": {"type": "object"}, "meta": {"type": "object", "properties": {"auto_added": {"type": "boolean"}, "managed_by_apps": {"type": "boolean"}, "managed_by_argo_tunnel": {"type": "boolean"}, "source": {"type": "string"}}}}}, "DNSRecordCreation": {"type": "object", "required": ["type", "name", "content"], "properties": {"type": {"type": "string"}, "name": {"type": "string"}, "content": {"type": "string"}, "ttl": {"type": "integer"}, "priority": {"type": "integer"}, "proxied": {"type": "boolean"}}}, "ResultInfo": {"type": "object", "properties": {"page": {"type": "integer"}, "per_page": {"type": "integer"}, "total_pages": {"type": "integer"}, "count": {"type": "integer"}, "total_count": {"type": "integer"}}}}, "securitySchemes": {"APIToken": {"type": "apiKey", "in": "header", "name": "Authorization"}}}}}, {"title": "Dynatrace API", "content": {"openapi": "3.0.0", "info": {"title": "Dynatrace API", "description": "API for interacting with Dynatrace monitoring and observability platform", "version": "1.0.0", "contact": {"name": "Dynatrace Support", "url": "https://www.dynatrace.com/support/", "email": "support@dynatrace.com"}}, "servers": [{"url": "https://{your-environment-id}.live.dynatrace.com/api/v2", "variables": {"your-environment-id": {"default": "abc12345", "description": "Your Dynatrace environment ID"}}}], "paths": {"/metrics": {"get": {"summary": "Get metrics", "description": "Retrieve metrics data", "parameters": [{"name": "metricSelector", "in": "query", "required": true, "schema": {"type": "string"}, "description": "The metric selector"}, {"name": "from", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "Start timestamp of the query"}, {"name": "to", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "End timestamp of the query"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MetricsResponse"}}}}}}}, "/entities": {"get": {"summary": "Get entities", "description": "Retrieve monitored entities", "parameters": [{"name": "entitySelector", "in": "query", "required": true, "schema": {"type": "string"}, "description": "The entity selector"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EntitiesResponse"}}}}}}}, "/problems": {"get": {"summary": "Get problems", "description": "Retrieve detected problems", "parameters": [{"name": "problemSelector", "in": "query", "schema": {"type": "string"}, "description": "The problem selector"}, {"name": "from", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "Start timestamp of the query"}, {"name": "to", "in": "query", "schema": {"type": "string", "format": "date-time"}, "description": "End timestamp of the query"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemsResponse"}}}}}}}, "/events": {"post": {"summary": "Push custom event", "description": "Push a custom event to Dynatrace", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventPush"}}}}, "responses": {"201": {"description": "Event successfully pushed"}}}}, "/config/v1/managementZones": {"get": {"summary": "Get management zones", "description": "Retrieve configured management zones", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ManagementZonesResponse"}}}}}}}, "/config/v1/alertingProfiles": {"get": {"summary": "Get alerting profiles", "description": "Retrieve configured alerting profiles", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AlertingProfilesResponse"}}}}}}}}, "components": {"schemas": {"MetricsResponse": {"type": "object", "properties": {"totalCount": {"type": "integer"}, "nextPageKey": {"type": "string"}, "result": {"type": "array", "items": {"$ref": "#/components/schemas/MetricData"}}}}, "MetricData": {"type": "object", "properties": {"metricId": {"type": "string"}, "data": {"type": "array", "items": {"$ref": "#/components/schemas/DataPoint"}}}}, "DataPoint": {"type": "object", "properties": {"timestamp": {"type": "string", "format": "date-time"}, "value": {"type": "number"}}}, "EntitiesResponse": {"type": "object", "properties": {"totalCount": {"type": "integer"}, "pageSize": {"type": "integer"}, "nextPageKey": {"type": "string"}, "entities": {"type": "array", "items": {"$ref": "#/components/schemas/Entity"}}}}, "Entity": {"type": "object", "properties": {"entityId": {"type": "string"}, "displayName": {"type": "string"}, "type": {"type": "string"}, "properties": {"type": "object", "additionalProperties": {"type": "string"}}}}, "ProblemsResponse": {"type": "object", "properties": {"totalCount": {"type": "integer"}, "pageSize": {"type": "integer"}, "nextPageKey": {"type": "string"}, "problems": {"type": "array", "items": {"$ref": "#/components/schemas/Problem"}}}}, "Problem": {"type": "object", "properties": {"problemId": {"type": "string"}, "title": {"type": "string"}, "impactLevel": {"type": "string", "enum": ["APPLICATION", "SERVICE", "INFRASTRUCTURE"]}, "severityLevel": {"type": "string", "enum": ["AVAILABILITY", "ERROR", "PERFORMANCE", "RESOURCE_CONTENTION", "CUSTOM_ALERT"]}, "status": {"type": "string", "enum": ["OPEN", "CLOSED"]}, "affectedEntities": {"type": "array", "items": {"$ref": "#/components/schemas/Entity"}}}}, "EventPush": {"type": "object", "required": ["eventType", "title", "startTime", "endTime"], "properties": {"eventType": {"type": "string"}, "title": {"type": "string"}, "startTime": {"type": "string", "format": "date-time"}, "endTime": {"type": "string", "format": "date-time"}, "description": {"type": "string"}, "entitySelector": {"type": "string"}, "properties": {"type": "object", "additionalProperties": {"type": "string"}}}}, "ManagementZonesResponse": {"type": "object", "properties": {"values": {"type": "array", "items": {"$ref": "#/components/schemas/ManagementZone"}}}}, "ManagementZone": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "rules": {"type": "array", "items": {"$ref": "#/components/schemas/ManagementZoneRule"}}}}, "ManagementZoneRule": {"type": "object", "properties": {"type": {"type": "string"}, "enabled": {"type": "boolean"}, "propagationTypes": {"type": "array", "items": {"type": "string"}}, "conditions": {"type": "array", "items": {"$ref": "#/components/schemas/Condition"}}}}, "Condition": {"type": "object", "properties": {"key": {"type": "string"}, "comparisonInfo": {"$ref": "#/components/schemas/ComparisonInfo"}}}, "ComparisonInfo": {"type": "object", "properties": {"type": {"type": "string"}, "operator": {"type": "string"}, "value": {"type": "string"}}}, "AlertingProfilesResponse": {"type": "object", "properties": {"values": {"type": "array", "items": {"$ref": "#/components/schemas/AlertingProfile"}}}}, "AlertingProfile": {"type": "object", "properties": {"id": {"type": "string"}, "displayName": {"type": "string"}, "rules": {"type": "array", "items": {"$ref": "#/components/schemas/AlertingRule"}}}}, "AlertingRule": {"type": "object", "properties": {"severityLevel": {"type": "string"}, "tagFilter": {"$ref": "#/components/schemas/TagFilter"}, "delayInMinutes": {"type": "integer"}}}, "TagFilter": {"type": "object", "properties": {"includeMode": {"type": "string"}, "tagFilters": {"type": "array", "items": {"$ref": "#/components/schemas/TagFilterItem"}}}}, "TagFilterItem": {"type": "object", "properties": {"context": {"type": "string"}, "key": {"type": "string"}, "value": {"type": "string"}}}}, "securitySchemes": {"ApiToken": {"type": "apiKey", "in": "header", "name": "Authorization"}}}, "security": [{"ApiToken": []}]}}, {"title": "SendGrid API", "content": {"openapi": "3.0.0", "info": {"title": "SendGrid API", "description": "SendGrid's Web API allows you to interact with SendGrid's email sending and management features.", "version": "3.0.0", "contact": {"name": "SendGrid Support", "url": "https://support.sendgrid.com", "email": "support@sendgrid.com"}, "license": {"name": "MIT", "url": "https://opensource.org/licenses/MIT"}}, "servers": [{"url": "https://api.sendgrid.com/v3"}], "paths": {"/mail/send": {"post": {"summary": "Send an email", "description": "Send an email using SendGrid's v3 Mail Send API", "operationId": "sendEmail", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EmailRequest"}}}}, "responses": {"202": {"description": "Accepted"}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}}, "/templates": {"get": {"summary": "Retrieve all templates", "description": "Retrieve all templates for the authenticated user", "operationId": "getTemplates", "parameters": [{"name": "page_size", "in": "query", "description": "Number of templates to return per page", "schema": {"type": "integer", "default": 20}}, {"name": "page_token", "in": "query", "description": "Token for pagination", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TemplateList"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}, "post": {"summary": "Create a template", "description": "Create a new template", "operationId": "createTemplate", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TemplateRequest"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Template"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}}, "/templates/{template_id}": {"get": {"summary": "Retrieve a specific template", "description": "Retrieve a specific template by ID", "operationId": "getTemplate", "parameters": [{"name": "template_id", "in": "path", "required": true, "description": "ID of the template to retrieve", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Template"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}, "patch": {"summary": "Update a template", "description": "Update a specific template by ID", "operationId": "updateTemplate", "parameters": [{"name": "template_id", "in": "path", "required": true, "description": "ID of the template to update", "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TemplateRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Template"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}, "delete": {"summary": "Delete a template", "description": "Delete a specific template by ID", "operationId": "deleteTemplate", "parameters": [{"name": "template_id", "in": "path", "required": true, "description": "ID of the template to delete", "schema": {"type": "string"}}], "responses": {"204": {"description": "No Content"}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponse"}}}}}, "security": [{"api_key": []}]}}}, "components": {"schemas": {"EmailRequest": {"type": "object", "required": ["personalizations", "from", "subject", "content"], "properties": {"personalizations": {"type": "array", "items": {"$ref": "#/components/schemas/Personalization"}}, "from": {"$ref": "#/components/schemas/EmailAddress"}, "subject": {"type": "string"}, "content": {"type": "array", "items": {"$ref": "#/components/schemas/Content"}}}}, "Personalization": {"type": "object", "required": ["to"], "properties": {"to": {"type": "array", "items": {"$ref": "#/components/schemas/EmailAddress"}}, "cc": {"type": "array", "items": {"$ref": "#/components/schemas/EmailAddress"}}, "bcc": {"type": "array", "items": {"$ref": "#/components/schemas/EmailAddress"}}, "subject": {"type": "string"}, "headers": {"type": "object", "additionalProperties": {"type": "string"}}, "substitutions": {"type": "object", "additionalProperties": {"type": "string"}}, "dynamic_template_data": {"type": "object"}}}, "EmailAddress": {"type": "object", "required": ["email"], "properties": {"email": {"type": "string", "format": "email"}, "name": {"type": "string"}}}, "Content": {"type": "object", "required": ["type", "value"], "properties": {"type": {"type": "string"}, "value": {"type": "string"}}}, "TemplateList": {"type": "object", "properties": {"templates": {"type": "array", "items": {"$ref": "#/components/schemas/Template"}}, "metadata": {"type": "object", "properties": {"next_page_token": {"type": "string"}}}}}, "Template": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "generation": {"type": "string", "enum": ["legacy", "dynamic"]}, "updated_at": {"type": "string", "format": "date-time"}, "versions": {"type": "array", "items": {"$ref": "#/components/schemas/TemplateVersion"}}}}, "TemplateVersion": {"type": "object", "properties": {"id": {"type": "string"}, "template_id": {"type": "string"}, "active": {"type": "integer"}, "name": {"type": "string"}, "subject": {"type": "string"}, "updated_at": {"type": "string", "format": "date-time"}}}, "TemplateRequest": {"type": "object", "required": ["name", "generation"], "properties": {"name": {"type": "string"}, "generation": {"type": "string", "enum": ["legacy", "dynamic"]}}}, "ErrorResponse": {"type": "object", "properties": {"errors": {"type": "array", "items": {"type": "object", "properties": {"message": {"type": "string"}, "field": {"type": "string"}, "help": {"type": "string"}}}}}}}, "securitySchemes": {"api_key": {"type": "apiKey", "name": "Authorization", "in": "header"}}}}}, {"title": "Microsoft Teams API", "content": {"openapi": "3.0.0", "info": {"title": "Microsoft Teams API", "description": "API for interacting with Microsoft Teams", "version": "1.0.0", "contact": {"name": "Microsoft Support", "url": "https://support.microsoft.com/teams"}}, "servers": [{"url": "https://graph.microsoft.com/v1.0"}], "paths": {"/teams": {"get": {"summary": "List all teams", "description": "Get a list of all teams in the organization", "operationId": "listTeams", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TeamList"}}}}}, "security": [{"BearerAuth": []}]}, "post": {"summary": "Create a team", "description": "Create a new team", "operationId": "createTeam", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TeamCreate"}}}}, "responses": {"201": {"description": "Team created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}}}, "security": [{"BearerAuth": []}]}}, "/teams/{teamId}": {"get": {"summary": "Get team", "description": "Get details of a specific team", "operationId": "getTeam", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}}}, "security": [{"BearerAuth": []}]}, "patch": {"summary": "Update team", "description": "Update details of a specific team", "operationId": "updateTeam", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TeamUpdate"}}}}, "responses": {"200": {"description": "Team updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}}}, "security": [{"BearerAuth": []}]}, "delete": {"summary": "Delete team", "description": "Delete a specific team", "operationId": "deleteTeam", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Team deleted successfully"}}, "security": [{"BearerAuth": []}]}}, "/teams/{teamId}/channels": {"get": {"summary": "List channels", "description": "Get a list of channels in a team", "operationId": "listChannels", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChannelList"}}}}}, "security": [{"BearerAuth": []}]}, "post": {"summary": "Create channel", "description": "Create a new channel in a team", "operationId": "createChannel", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChannelCreate"}}}}, "responses": {"201": {"description": "Channel created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Channel"}}}}}, "security": [{"BearerAuth": []}]}}, "/teams/{teamId}/channels/{channelId}": {"get": {"summary": "Get channel", "description": "Get details of a specific channel", "operationId": "getChannel", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "channelId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Channel"}}}}}, "security": [{"BearerAuth": []}]}, "patch": {"summary": "Update channel", "description": "Update details of a specific channel", "operationId": "updateChannel", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "channelId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChannelUpdate"}}}}, "responses": {"200": {"description": "Channel updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Channel"}}}}}, "security": [{"BearerAuth": []}]}, "delete": {"summary": "Delete channel", "description": "Delete a specific channel", "operationId": "deleteChannel", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "channelId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Channel deleted successfully"}}, "security": [{"BearerAuth": []}]}}, "/teams/{teamId}/channels/{channelId}/messages": {"get": {"summary": "List messages", "description": "Get a list of messages in a channel", "operationId": "listMessages", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "channelId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MessageList"}}}}}, "security": [{"BearerAuth": []}]}, "post": {"summary": "Create message", "description": "Create a new message in a channel", "operationId": "createMessage", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "channelId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MessageCreate"}}}}, "responses": {"201": {"description": "Message created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}}, "security": [{"BearerAuth": []}]}}, "/teams/{teamId}/members": {"get": {"summary": "List team members", "description": "Get a list of members in a team", "operationId": "listTeamMembers", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MemberList"}}}}}, "security": [{"BearerAuth": []}]}, "post": {"summary": "Add team member", "description": "Add a new member to a team", "operationId": "addTeamMember", "parameters": [{"name": "teamId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MemberAdd"}}}}, "responses": {"201": {"description": "Member added successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Member"}}}}}, "security": [{"BearerAuth": []}]}}}, "components": {"schemas": {"Team": {"type": "object", "properties": {"id": {"type": "string"}, "displayName": {"type": "string"}, "description": {"type": "string"}, "visibility": {"type": "string", "enum": ["Private", "Public"]}}}, "TeamList": {"type": "object", "properties": {"value": {"type": "array", "items": {"$ref": "#/components/schemas/Team"}}}}, "TeamCreate": {"type": "object", "required": ["displayName"], "properties": {"displayName": {"type": "string"}, "description": {"type": "string"}, "visibility": {"type": "string", "enum": ["Private", "Public"]}}}, "TeamUpdate": {"type": "object", "properties": {"displayName": {"type": "string"}, "description": {"type": "string"}, "visibility": {"type": "string", "enum": ["Private", "Public"]}}}, "Channel": {"type": "object", "properties": {"id": {"type": "string"}, "displayName": {"type": "string"}, "description": {"type": "string"}}}, "ChannelList": {"type": "object", "properties": {"value": {"type": "array", "items": {"$ref": "#/components/schemas/Channel"}}}}, "ChannelCreate": {"type": "object", "required": ["displayName"], "properties": {"displayName": {"type": "string"}, "description": {"type": "string"}}}, "ChannelUpdate": {"type": "object", "properties": {"displayName": {"type": "string"}, "description": {"type": "string"}}}, "Message": {"type": "object", "properties": {"id": {"type": "string"}, "content": {"type": "string"}, "createdDateTime": {"type": "string", "format": "date-time"}, "from": {"$ref": "#/components/schemas/IdentitySet"}}}, "MessageList": {"type": "object", "properties": {"value": {"type": "array", "items": {"$ref": "#/components/schemas/Message"}}}}, "MessageCreate": {"type": "object", "required": ["content"], "properties": {"content": {"type": "string"}}}, "Member": {"type": "object", "properties": {"id": {"type": "string"}, "displayName": {"type": "string"}, "email": {"type": "string"}, "roles": {"type": "array", "items": {"type": "string"}}}}, "MemberList": {"type": "object", "properties": {"value": {"type": "array", "items": {"$ref": "#/components/schemas/Member"}}}}, "MemberAdd": {"type": "object", "required": ["userId"], "properties": {"userId": {"type": "string"}, "roles": {"type": "array", "items": {"type": "string"}}}}, "IdentitySet": {"type": "object", "properties": {"user": {"$ref": "#/components/schemas/Identity"}}}, "Identity": {"type": "object", "properties": {"id": {"type": "string"}, "displayName": {"type": "string"}}}}, "securitySchemes": {"BearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "Juniper Networks API", "content": {"openapi": "3.0.0", "info": {"title": "Juniper Networks API", "description": "API for managing and configuring Juniper Networks devices", "version": "1.0.0", "contact": {"name": "Juniper Networks Support", "url": "https://support.juniper.net", "email": "support@juniper.net"}}, "servers": [{"url": "https://api.juniper.net/v1"}], "tags": [{"name": "Devices", "description": "Operations related to network devices"}, {"name": "Configuration", "description": "Device configuration management"}, {"name": "Monitoring", "description": "Device monitoring and statistics"}, {"name": "Routing", "description": "Routing protocols and tables"}, {"name": "Security", "description": "Security policies and features"}, {"name": "VPNs", "description": "Virtual Private Network management"}], "paths": {"/devices": {"get": {"summary": "List all devices", "tags": ["Devices"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Device"}}}}}}}, "post": {"summary": "Add a new device", "tags": ["Devices"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceInput"}}}}, "responses": {"201": {"description": "Device created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}}, "/devices/{deviceId}": {"get": {"summary": "Get device details", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}, "put": {"summary": "Update device details", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceInput"}}}}, "responses": {"200": {"description": "Device updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}}}, "delete": {"summary": "Delete a device", "tags": ["Devices"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Device deleted successfully"}}}}, "/devices/{deviceId}/config": {"get": {"summary": "Get device configuration", "tags": ["Configuration"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceConfig"}}}}}}, "put": {"summary": "Update device configuration", "tags": ["Configuration"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceConfig"}}}}, "responses": {"200": {"description": "Configuration updated successfully"}}}}, "/devices/{deviceId}/interfaces": {"get": {"summary": "List device interfaces", "tags": ["Configuration"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Interface"}}}}}}}}, "/devices/{deviceId}/stats": {"get": {"summary": "Get device statistics", "tags": ["Monitoring"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceStats"}}}}}}}, "/devices/{deviceId}/routing": {"get": {"summary": "Get routing information", "tags": ["Routing"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RoutingInfo"}}}}}}}, "/devices/{deviceId}/security/policies": {"get": {"summary": "List security policies", "tags": ["Security"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/SecurityPolicy"}}}}}}}}, "/devices/{deviceId}/vpns": {"get": {"summary": "List VPNs", "tags": ["VPNs"], "parameters": [{"name": "deviceId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/VPN"}}}}}}}}}, "components": {"schemas": {"Device": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "model": {"type": "string"}, "serialNumber": {"type": "string"}, "ipAddress": {"type": "string"}, "status": {"type": "string", "enum": ["online", "offline", "maintenance"]}}}, "DeviceInput": {"type": "object", "properties": {"name": {"type": "string"}, "model": {"type": "string"}, "serialNumber": {"type": "string"}, "ipAddress": {"type": "string"}}, "required": ["name", "model", "serialNumber", "ipAddress"]}, "DeviceConfig": {"type": "object", "properties": {"hostname": {"type": "string"}, "interfaces": {"type": "array", "items": {"$ref": "#/components/schemas/Interface"}}, "routingProtocols": {"type": "array", "items": {"type": "string"}}, "securityPolicies": {"type": "array", "items": {"$ref": "#/components/schemas/SecurityPolicy"}}}}, "Interface": {"type": "object", "properties": {"name": {"type": "string"}, "type": {"type": "string"}, "ipAddress": {"type": "string"}, "status": {"type": "string", "enum": ["up", "down"]}}}, "DeviceStats": {"type": "object", "properties": {"cpuUsage": {"type": "number"}, "memoryUsage": {"type": "number"}, "throughput": {"type": "number"}, "activeConnections": {"type": "integer"}}}, "RoutingInfo": {"type": "object", "properties": {"protocols": {"type": "array", "items": {"type": "string"}}, "routingTable": {"type": "array", "items": {"type": "object", "properties": {"destination": {"type": "string"}, "nextHop": {"type": "string"}, "interface": {"type": "string"}}}}}}, "SecurityPolicy": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "action": {"type": "string", "enum": ["allow", "deny"]}, "sourceZone": {"type": "string"}, "destinationZone": {"type": "string"}, "sourceAddresses": {"type": "array", "items": {"type": "string"}}, "destinationAddresses": {"type": "array", "items": {"type": "string"}}, "applications": {"type": "array", "items": {"type": "string"}}}}, "VPN": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string", "enum": ["site-to-site", "remote-access"]}, "localGateway": {"type": "string"}, "remoteGateway": {"type": "string"}, "encryptionAlgorithm": {"type": "string"}, "status": {"type": "string", "enum": ["up", "down"]}}}}}}}, {"title": "Intel API", "content": {"openapi": "3.0.0", "info": {"title": "Intel API", "description": "API for accessing Intel product information, services, and company data", "version": "1.0.0", "contact": {"name": "Intel API Support", "email": "api-support@intel.com", "url": "https://developer.intel.com/api-support"}}, "servers": [{"url": "https://api.intel.com/v1"}], "paths": {"/products": {"get": {"summary": "List all Intel products", "description": "Retrieve a list of all Intel products", "parameters": [{"name": "category", "in": "query", "description": "Filter products by category", "schema": {"type": "string", "enum": ["processors", "servers", "memory", "ssd", "fpga", "networking"]}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "description": "Number of items to skip for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}}}}}, "/products/{productId}": {"get": {"summary": "Get product details", "description": "Retrieve detailed information about a specific Intel product", "parameters": [{"name": "productId", "in": "path", "required": true, "description": "Unique identifier of the product", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}}, "/processors": {"get": {"summary": "List Intel processors", "description": "Retrieve a list of Intel processors", "parameters": [{"name": "series", "in": "query", "description": "Filter processors by series", "schema": {"type": "string", "enum": ["Core", "Xeon", "Atom", "Pentium", "Celeron"]}}, {"name": "generation", "in": "query", "description": "Filter processors by generation", "schema": {"type": "integer"}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "description": "Number of items to skip for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Processor"}}}}}}}}, "/processors/{processorId}": {"get": {"summary": "Get processor details", "description": "Retrieve detailed information about a specific Intel processor", "parameters": [{"name": "processorId", "in": "path", "required": true, "description": "Unique identifier of the processor", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Processor"}}}}, "404": {"description": "Processor not found"}}}}, "/software": {"get": {"summary": "List Intel software products", "description": "Retrieve a list of Intel software products and tools", "parameters": [{"name": "category", "in": "query", "description": "Filter software by category", "schema": {"type": "string", "enum": ["development", "optimization", "security", "ai", "iot"]}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "description": "Number of items to skip for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software"}}}}}}}}, "/software/{softwareId}": {"get": {"summary": "Get software details", "description": "Retrieve detailed information about a specific Intel software product", "parameters": [{"name": "softwareId", "in": "path", "required": true, "description": "Unique identifier of the software product", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software"}}}}, "404": {"description": "Software not found"}}}}, "/technologies": {"get": {"summary": "List Intel technologies", "description": "Retrieve a list of Intel technologies", "parameters": [{"name": "category", "in": "query", "description": "Filter technologies by category", "schema": {"type": "string", "enum": ["ai", "5g", "iot", "autonomous-driving", "cloud"]}}, {"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 20}}, {"name": "offset", "in": "query", "description": "Number of items to skip for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Technology"}}}}}}}}, "/technologies/{technologyId}": {"get": {"summary": "Get technology details", "description": "Retrieve detailed information about a specific Intel technology", "parameters": [{"name": "technologyId", "in": "path", "required": true, "description": "Unique identifier of the technology", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Technology"}}}}, "404": {"description": "Technology not found"}}}}, "/company/news": {"get": {"summary": "Get Intel news", "description": "Retrieve recent news articles about Intel", "parameters": [{"name": "limit", "in": "query", "description": "Maximum number of items to return", "schema": {"type": "integer", "default": 10}}, {"name": "offset", "in": "query", "description": "Number of items to skip for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/NewsArticle"}}}}}}}}, "/company/investors": {"get": {"summary": "Get investor information", "description": "Retrieve investor-related information about Intel", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvestorInfo"}}}}}}}}, "components": {"schemas": {"Product": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "category": {"type": "string"}, "description": {"type": "string"}, "specifications": {"type": "object"}, "price": {"type": "number"}, "releaseDate": {"type": "string", "format": "date"}}}, "Processor": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "series": {"type": "string"}, "generation": {"type": "integer"}, "cores": {"type": "integer"}, "threads": {"type": "integer"}, "baseFrequency": {"type": "number"}, "maxFrequency": {"type": "number"}, "cacheSize": {"type": "integer"}, "tdp": {"type": "integer"}, "lithography": {"type": "integer"}, "releaseDate": {"type": "string", "format": "date"}}}, "Software": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "category": {"type": "string"}, "description": {"type": "string"}, "version": {"type": "string"}, "licenseType": {"type": "string"}, "supportedPlatforms": {"type": "array", "items": {"type": "string"}}, "releaseDate": {"type": "string", "format": "date"}}}, "Technology": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "category": {"type": "string"}, "description": {"type": "string"}, "keyFeatures": {"type": "array", "items": {"type": "string"}}, "relatedProducts": {"type": "array", "items": {"type": "string"}}}}, "NewsArticle": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "summary": {"type": "string"}, "content": {"type": "string"}, "publishDate": {"type": "string", "format": "date-time"}, "author": {"type": "string"}, "url": {"type": "string"}}}, "InvestorInfo": {"type": "object", "properties": {"stockSymbol": {"type": "string"}, "currentStockPrice": {"type": "number"}, "marketCap": {"type": "number"}, "annualRevenue": {"type": "number"}, "netIncome": {"type": "number"}, "dividendYield": {"type": "number"}, "latestEarningsReport": {"type": "object", "properties": {"fiscalQuarter": {"type": "string"}, "fiscalYear": {"type": "integer"}, "reportDate": {"type": "string", "format": "date"}, "eps": {"type": "number"}, "revenue": {"type": "number"}}}}}}}}}, {"title": "Netflix API", "content": {"openapi": "3.0.0", "info": {"title": "Netflix API", "description": "API for interacting with Netflix streaming service", "version": "1.0.0", "contact": {"name": "Netflix API Support", "url": "https://help.netflix.com/en/node/101", "email": "api-support@netflix.com"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "https://api.netflix.com/v1", "description": "Production server"}, {"url": "https://api-staging.netflix.com/v1", "description": "Staging server"}], "tags": [{"name": "authentication", "description": "Authentication operations"}, {"name": "user", "description": "User account operations"}, {"name": "content", "description": "Content-related operations"}, {"name": "search", "description": "Search operations"}, {"name": "watchlist", "description": "Watchlist operations"}, {"name": "ratings", "description": "Rating operations"}, {"name": "recommendations", "description": "Recommendation operations"}, {"name": "streaming", "description": "Streaming-related operations"}], "paths": {"/auth/login": {"post": {"tags": ["authentication"], "summary": "Log in to Netflix", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginRequest"}}}}, "responses": {"200": {"description": "Successful login", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthToken"}}}}, "401": {"description": "Invalid credentials"}}}}, "/auth/logout": {"post": {"tags": ["authentication"], "summary": "Log out from Netflix", "security": [{"BearerAuth": []}], "responses": {"200": {"description": "Successful logout"}, "401": {"description": "Unauthorized"}}}}, "/user/profile": {"get": {"tags": ["user"], "summary": "Get user profile", "security": [{"BearerAuth": []}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserProfile"}}}}, "401": {"description": "Unauthorized"}}}, "put": {"tags": ["user"], "summary": "Update user profile", "security": [{"BearerAuth": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserProfileUpdate"}}}}, "responses": {"200": {"description": "Profile updated successfully"}, "400": {"description": "Invalid input"}, "401": {"description": "Unauthorized"}}}}, "/content/browse": {"get": {"tags": ["content"], "summary": "Browse content", "security": [{"BearerAuth": []}], "parameters": [{"name": "genre", "in": "query", "schema": {"type": "string"}, "description": "Filter by genre"}, {"name": "type", "in": "query", "schema": {"type": "string", "enum": ["movie", "series"]}, "description": "Filter by content type"}, {"name": "page", "in": "query", "schema": {"type": "integer", "default": 1}, "description": "Page number"}, {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}, "description": "Number of items per page"}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentList"}}}}, "401": {"description": "Unauthorized"}}}}, "/content/{contentId}": {"get": {"tags": ["content"], "summary": "Get content details", "security": [{"BearerAuth": []}], "parameters": [{"name": "contentId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "ID of the content"}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Content"}}}}, "404": {"description": "Content not found"}, "401": {"description": "Unauthorized"}}}}, "/search": {"get": {"tags": ["search"], "summary": "Search for content", "security": [{"BearerAuth": []}], "parameters": [{"name": "query", "in": "query", "required": true, "schema": {"type": "string"}, "description": "Search query"}, {"name": "type", "in": "query", "schema": {"type": "string", "enum": ["movie", "series", "actor", "director"]}, "description": "Filter by type"}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SearchResults"}}}}, "401": {"description": "Unauthorized"}}}}, "/watchlist": {"get": {"tags": ["watchlist"], "summary": "Get user's watchlist", "security": [{"BearerAuth": []}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Watchlist"}}}}, "401": {"description": "Unauthorized"}}}, "post": {"tags": ["watchlist"], "summary": "Add content to watchlist", "security": [{"BearerAuth": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WatchlistItem"}}}}, "responses": {"201": {"description": "Content added to watchlist"}, "400": {"description": "Invalid input"}, "401": {"description": "Unauthorized"}}}}, "/watchlist/{contentId}": {"delete": {"tags": ["watchlist"], "summary": "Remove content from watchlist", "security": [{"BearerAuth": []}], "parameters": [{"name": "contentId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "ID of the content to remove"}], "responses": {"204": {"description": "Content removed from watchlist"}, "404": {"description": "Content not found in watchlist"}, "401": {"description": "Unauthorized"}}}}, "/ratings": {"post": {"tags": ["ratings"], "summary": "Rate content", "security": [{"BearerAuth": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Rating"}}}}, "responses": {"201": {"description": "Rating submitted successfully"}, "400": {"description": "Invalid input"}, "401": {"description": "Unauthorized"}}}}, "/ratings/{contentId}": {"get": {"tags": ["ratings"], "summary": "Get user's rating for content", "security": [{"BearerAuth": []}], "parameters": [{"name": "contentId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "ID of the content"}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Rating"}}}}, "404": {"description": "Rating not found"}, "401": {"description": "Unauthorized"}}}}, "/recommendations": {"get": {"tags": ["recommendations"], "summary": "Get personalized recommendations", "security": [{"BearerAuth": []}], "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 20}, "description": "Number of recommendations to return"}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentList"}}}}, "401": {"description": "Unauthorized"}}}}, "/streaming/play/{contentId}": {"get": {"tags": ["streaming"], "summary": "Get streaming URL for content", "security": [{"BearerAuth": []}], "parameters": [{"name": "contentId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "ID of the content to stream"}, {"name": "quality", "in": "query", "schema": {"type": "string", "enum": ["SD", "HD", "UHD"]}, "description": "Desired streaming quality"}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StreamingInfo"}}}}, "404": {"description": "Content not found"}, "401": {"description": "Unauthorized"}}}}, "/streaming/continue/{contentId}": {"get": {"tags": ["streaming"], "summary": "Get continue watching information", "security": [{"BearerAuth": []}], "parameters": [{"name": "contentId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "ID of the content"}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContinueWatching"}}}}, "404": {"description": "Content not found or not watched"}, "401": {"description": "Unauthorized"}}}}}, "components": {"schemas": {"LoginRequest": {"type": "object", "required": ["email", "password"], "properties": {"email": {"type": "string", "format": "email"}, "password": {"type": "string", "format": "password"}}}, "AuthToken": {"type": "object", "properties": {"access_token": {"type": "string"}, "token_type": {"type": "string"}, "expires_in": {"type": "integer"}}}, "UserProfile": {"type": "object", "properties": {"id": {"type": "string"}, "email": {"type": "string"}, "name": {"type": "string"}, "avatar": {"type": "string"}, "subscription_plan": {"type": "string"}, "preferences": {"type": "object", "properties": {"language": {"type": "string"}, "mature_content": {"type": "boolean"}}}}}, "UserProfileUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "avatar": {"type": "string"}, "preferences": {"type": "object", "properties": {"language": {"type": "string"}, "mature_content": {"type": "boolean"}}}}}, "Content": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "type": {"type": "string", "enum": ["movie", "series"]}, "description": {"type": "string"}, "release_year": {"type": "integer"}, "genres": {"type": "array", "items": {"type": "string"}}, "cast": {"type": "array", "items": {"type": "string"}}, "director": {"type": "string"}, "duration": {"type": "integer"}, "rating": {"type": "string"}, "poster": {"type": "string"}, "backdrop": {"type": "string"}}}, "ContentList": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/Content"}}, "total": {"type": "integer"}, "page": {"type": "integer"}, "pages": {"type": "integer"}}}, "SearchResults": {"type": "object", "properties": {"query": {"type": "string"}, "results": {"type": "array", "items": {"$ref": "#/components/schemas/Content"}}, "total": {"type": "integer"}}}, "Watchlist": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/Content"}}, "total": {"type": "integer"}}}, "WatchlistItem": {"type": "object", "required": ["content_id"], "properties": {"content_id": {"type": "string"}}}, "Rating": {"type": "object", "required": ["content_id", "rating"], "properties": {"content_id": {"type": "string"}, "rating": {"type": "integer", "minimum": 1, "maximum": 5}}}, "StreamingInfo": {"type": "object", "properties": {"content_id": {"type": "string"}, "stream_url": {"type": "string"}, "quality": {"type": "string"}, "expires_at": {"type": "string", "format": "date-time"}}}, "ContinueWatching": {"type": "object", "properties": {"content_id": {"type": "string"}, "title": {"type": "string"}, "type": {"type": "string", "enum": ["movie", "series"]}, "season": {"type": "integer"}, "episode": {"type": "integer"}, "position": {"type": "integer"}, "duration": {"type": "integer"}, "last_watched": {"type": "string", "format": "date-time"}}}}, "securitySchemes": {"BearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "Zscaler API", "content": {"openapi": "3.0.0", "info": {"title": "Zscaler API", "description": "API for interacting with Zscaler cloud security services", "version": "1.0.0", "contact": {"name": "Zscaler Support", "url": "https://help.zscaler.com", "email": "support@zscaler.com"}}, "servers": [{"url": "https://api.zscaler.net/v1"}], "paths": {"/authenticatedSession": {"post": {"summary": "Create an authenticated session", "operationId": "createAuthenticatedSession", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthenticationRequest"}}}}, "responses": {"200": {"description": "Successful authentication", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthenticationResponse"}}}}, "401": {"description": "Unauthorized"}}}}, "/users": {"get": {"summary": "List all users", "operationId": "listUsers", "parameters": [{"name": "page", "in": "query", "schema": {"type": "integer", "default": 1}}, {"name": "pageSize", "in": "query", "schema": {"type": "integer", "default": 100}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new user", "operationId": "createUser", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"201": {"description": "User created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"bearerAuth": []}]}}, "/users/{id}": {"get": {"summary": "Get a user by ID", "operationId": "getUserById", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}, "security": [{"bearerAuth": []}]}, "put": {"summary": "Update a user", "operationId": "updateUser", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"200": {"description": "User updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete a user", "operationId": "deleteUser", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"204": {"description": "User deleted successfully"}, "404": {"description": "User not found"}}, "security": [{"bearerAuth": []}]}}, "/locations": {"get": {"summary": "List all locations", "operationId": "listLocations", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Location"}}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new location", "operationId": "createLocation", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationCreate"}}}}, "responses": {"201": {"description": "Location created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Location"}}}}}, "security": [{"bearerAuth": []}]}}, "/urlCategories": {"get": {"summary": "List all URL categories", "operationId": "listUrlCategories", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/UrlCategory"}}}}}}, "security": [{"bearerAuth": []}]}}, "/urlFilters": {"get": {"summary": "List all URL filters", "operationId": "listUrlFilters", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/UrlFilter"}}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new URL filter", "operationId": "createUrlFilter", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UrlFilterCreate"}}}}, "responses": {"201": {"description": "URL filter created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UrlFilter"}}}}}, "security": [{"bearerAuth": []}]}}, "/adminUsers": {"get": {"summary": "List all admin users", "operationId": "listAdminUsers", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AdminUser"}}}}}}, "security": [{"bearerAuth": []}]}}, "/auditLogs": {"get": {"summary": "Get audit logs", "operationId": "getAuditLogs", "parameters": [{"name": "startTime", "in": "query", "schema": {"type": "string", "format": "date-time"}}, {"name": "endTime", "in": "query", "schema": {"type": "string", "format": "date-time"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AuditLog"}}}}}}, "security": [{"bearerAuth": []}]}}}, "components": {"schemas": {"AuthenticationRequest": {"type": "object", "properties": {"username": {"type": "string"}, "password": {"type": "string"}, "apiKey": {"type": "string"}}, "required": ["username", "password", "apiKey"]}, "AuthenticationResponse": {"type": "object", "properties": {"authToken": {"type": "string"}, "expiresAt": {"type": "string", "format": "date-time"}}}, "User": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "email": {"type": "string"}, "groups": {"type": "array", "items": {"type": "string"}}, "department": {"type": "string"}}}, "UserCreate": {"type": "object", "properties": {"name": {"type": "string"}, "email": {"type": "string"}, "password": {"type": "string"}, "groups": {"type": "array", "items": {"type": "string"}}, "department": {"type": "string"}}, "required": ["name", "email", "password"]}, "UserUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "email": {"type": "string"}, "groups": {"type": "array", "items": {"type": "string"}}, "department": {"type": "string"}}}, "Location": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "ipAddresses": {"type": "array", "items": {"type": "string"}}, "vpnCredentials": {"type": "string"}}}, "LocationCreate": {"type": "object", "properties": {"name": {"type": "string"}, "ipAddresses": {"type": "array", "items": {"type": "string"}}, "vpnCredentials": {"type": "string"}}, "required": ["name", "ipAddresses"]}, "UrlCategory": {"type": "object", "properties": {"id": {"type": "string"}, "configuredName": {"type": "string"}, "superCategory": {"type": "string"}, "keywords": {"type": "array", "items": {"type": "string"}}, "urls": {"type": "array", "items": {"type": "string"}}}}, "UrlFilter": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "order": {"type": "integer"}, "protocols": {"type": "array", "items": {"type": "string"}}, "locations": {"type": "array", "items": {"type": "integer"}}, "groups": {"type": "array", "items": {"type": "string"}}, "state": {"type": "string", "enum": ["ENABLED", "DISABLED"]}, "action": {"type": "string", "enum": ["ALLOW", "BLOCK", "CAUTION"]}}}, "UrlFilterCreate": {"type": "object", "properties": {"name": {"type": "string"}, "order": {"type": "integer"}, "protocols": {"type": "array", "items": {"type": "string"}}, "locations": {"type": "array", "items": {"type": "integer"}}, "groups": {"type": "array", "items": {"type": "string"}}, "state": {"type": "string", "enum": ["ENABLED", "DISABLED"]}, "action": {"type": "string", "enum": ["ALLOW", "BLOCK", "CAUTION"]}}, "required": ["name", "action"]}, "AdminUser": {"type": "object", "properties": {"id": {"type": "integer"}, "loginName": {"type": "string"}, "userName": {"type": "string"}, "email": {"type": "string"}, "role": {"type": "string"}, "adminScopeType": {"type": "string"}, "adminScopeScopeEntities": {"type": "array", "items": {"type": "string"}}}}, "AuditLog": {"type": "object", "properties": {"id": {"type": "string"}, "action": {"type": "string"}, "actionType": {"type": "string"}, "adminName": {"type": "string"}, "clientIp": {"type": "string"}, "creationTime": {"type": "string", "format": "date-time"}, "impersonatorName": {"type": "string"}, "objectId": {"type": "string"}, "objectName": {"type": "string"}, "result": {"type": "string"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "Zendesk API", "content": {"openapi": "3.0.0", "info": {"title": "Zendesk API", "description": "API for interacting with Zendesk support ticketing system", "version": "1.0.0", "contact": {"name": "Zendesk Support", "url": "https://support.zendesk.com"}}, "servers": [{"url": "https://{subdomain}.zendesk.com/api/v2", "variables": {"subdomain": {"default": "your-subdomain", "description": "Your Zendesk subdomain"}}}], "security": [{"basicAuth": []}, {"apiToken": []}], "paths": {"/tickets": {"get": {"summary": "List Tickets", "description": "Retrieve a list of tickets", "parameters": [{"name": "page", "in": "query", "schema": {"type": "integer"}, "description": "Page number for pagination"}, {"name": "per_page", "in": "query", "schema": {"type": "integer"}, "description": "Number of results per page"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TicketList"}}}}}}, "post": {"summary": "Create Ticket", "description": "Create a new ticket", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TicketCreate"}}}}, "responses": {"201": {"description": "Ticket created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ticket"}}}}}}}, "/tickets/{id}": {"get": {"summary": "Get Ticket", "description": "Retrieve a specific ticket", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "Ticket ID"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ticket"}}}}}}, "put": {"summary": "Update Ticket", "description": "Update an existing ticket", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "Ticket ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TicketUpdate"}}}}, "responses": {"200": {"description": "Ticket updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ticket"}}}}}}, "delete": {"summary": "Delete Ticket", "description": "Delete a specific ticket", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "Ticket ID"}], "responses": {"204": {"description": "Ticket deleted successfully"}}}}, "/users": {"get": {"summary": "List Users", "description": "Retrieve a list of users", "parameters": [{"name": "page", "in": "query", "schema": {"type": "integer"}, "description": "Page number for pagination"}, {"name": "per_page", "in": "query", "schema": {"type": "integer"}, "description": "Number of results per page"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}}}}, "post": {"summary": "Create User", "description": "Create a new user", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"201": {"description": "User created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}}, "/users/{id}": {"get": {"summary": "Get User", "description": "Retrieve a specific user", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "User ID"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}, "put": {"summary": "Update User", "description": "Update an existing user", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "User ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"200": {"description": "User updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}, "delete": {"summary": "Delete User", "description": "Delete a specific user", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "User ID"}], "responses": {"204": {"description": "User deleted successfully"}}}}, "/organizations": {"get": {"summary": "List Organizations", "description": "Retrieve a list of organizations", "parameters": [{"name": "page", "in": "query", "schema": {"type": "integer"}, "description": "Page number for pagination"}, {"name": "per_page", "in": "query", "schema": {"type": "integer"}, "description": "Number of results per page"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationList"}}}}}}, "post": {"summary": "Create Organization", "description": "Create a new organization", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationCreate"}}}}, "responses": {"201": {"description": "Organization created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Organization"}}}}}}}, "/organizations/{id}": {"get": {"summary": "Get Organization", "description": "Retrieve a specific organization", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "Organization ID"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Organization"}}}}}}, "put": {"summary": "Update Organization", "description": "Update an existing organization", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "Organization ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationUpdate"}}}}, "responses": {"200": {"description": "Organization updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Organization"}}}}}}, "delete": {"summary": "Delete Organization", "description": "Delete a specific organization", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "Organization ID"}], "responses": {"204": {"description": "Organization deleted successfully"}}}}}, "components": {"schemas": {"Ticket": {"type": "object", "properties": {"id": {"type": "integer"}, "subject": {"type": "string"}, "description": {"type": "string"}, "status": {"type": "string", "enum": ["new", "open", "pending", "hold", "solved", "closed"]}, "requester_id": {"type": "integer"}, "assignee_id": {"type": "integer"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}}}, "TicketList": {"type": "object", "properties": {"tickets": {"type": "array", "items": {"$ref": "#/components/schemas/Ticket"}}, "next_page": {"type": "string"}, "previous_page": {"type": "string"}, "count": {"type": "integer"}}}, "TicketCreate": {"type": "object", "required": ["subject", "description", "requester_id"], "properties": {"subject": {"type": "string"}, "description": {"type": "string"}, "requester_id": {"type": "integer"}, "assignee_id": {"type": "integer"}, "status": {"type": "string", "enum": ["new", "open", "pending", "hold", "solved", "closed"]}}}, "TicketUpdate": {"type": "object", "properties": {"subject": {"type": "string"}, "description": {"type": "string"}, "status": {"type": "string", "enum": ["new", "open", "pending", "hold", "solved", "closed"]}, "assignee_id": {"type": "integer"}}}, "User": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "email": {"type": "string"}, "role": {"type": "string", "enum": ["end-user", "agent", "admin"]}, "organization_id": {"type": "integer"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}}}, "UserList": {"type": "object", "properties": {"users": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}, "next_page": {"type": "string"}, "previous_page": {"type": "string"}, "count": {"type": "integer"}}}, "UserCreate": {"type": "object", "required": ["name", "email"], "properties": {"name": {"type": "string"}, "email": {"type": "string"}, "role": {"type": "string", "enum": ["end-user", "agent", "admin"]}, "organization_id": {"type": "integer"}}}, "UserUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "email": {"type": "string"}, "role": {"type": "string", "enum": ["end-user", "agent", "admin"]}, "organization_id": {"type": "integer"}}}, "Organization": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "domain_names": {"type": "array", "items": {"type": "string"}}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}}}, "OrganizationList": {"type": "object", "properties": {"organizations": {"type": "array", "items": {"$ref": "#/components/schemas/Organization"}}, "next_page": {"type": "string"}, "previous_page": {"type": "string"}, "count": {"type": "integer"}}}, "OrganizationCreate": {"type": "object", "required": ["name"], "properties": {"name": {"type": "string"}, "domain_names": {"type": "array", "items": {"type": "string"}}}}, "OrganizationUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "domain_names": {"type": "array", "items": {"type": "string"}}}}}, "securitySchemes": {"basicAuth": {"type": "http", "scheme": "basic"}, "apiToken": {"type": "apiKey", "in": "header", "name": "Authorization"}}}}}, {"title": "PagerDuty API", "content": {"openapi": "3.0.0", "info": {"title": "PagerDuty API", "description": "API for interacting with PagerDuty's incident management platform", "version": "2.0.0", "contact": {"name": "PagerDuty Support", "url": "https://www.pagerduty.com/support/", "email": "support@pagerduty.com"}}, "servers": [{"url": "https://api.pagerduty.com/", "description": "Production server"}], "paths": {"/incidents": {"get": {"summary": "List incidents", "description": "Get a list of incidents", "parameters": [{"name": "status", "in": "query", "description": "Filter incidents by status", "schema": {"type": "string", "enum": ["triggered", "acknowledged", "resolved"]}}, {"name": "service_ids[]", "in": "query", "description": "Filter incidents by service IDs", "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}}}}, "post": {"summary": "Create an incident", "description": "Create a new incident", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentCreate"}}}}, "responses": {"201": {"description": "Incident created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Incident"}}}}}}}, "/incidents/{id}": {"get": {"summary": "Get an incident", "description": "Get details of a specific incident", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Incident"}}}}}}, "put": {"summary": "Update an incident", "description": "Update a specific incident", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentUpdate"}}}}, "responses": {"200": {"description": "Incident updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Incident"}}}}}}}, "/services": {"get": {"summary": "List services", "description": "Get a list of services", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceList"}}}}}}, "post": {"summary": "Create a service", "description": "Create a new service", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceCreate"}}}}, "responses": {"201": {"description": "Service created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Service"}}}}}}}, "/schedules": {"get": {"summary": "List schedules", "description": "Get a list of schedules", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ScheduleList"}}}}}}, "post": {"summary": "Create a schedule", "description": "Create a new schedule", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ScheduleCreate"}}}}, "responses": {"201": {"description": "Schedule created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Schedule"}}}}}}}, "/users": {"get": {"summary": "List users", "description": "Get a list of users", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}}}}, "post": {"summary": "Create a user", "description": "Create a new user", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"201": {"description": "User created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}}}, "components": {"schemas": {"Incident": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["incident"]}, "summary": {"type": "string"}, "status": {"type": "string", "enum": ["triggered", "acknowledged", "resolved"]}, "urgency": {"type": "string", "enum": ["high", "low"]}, "created_at": {"type": "string", "format": "date-time"}, "service": {"$ref": "#/components/schemas/ServiceReference"}, "assignments": {"type": "array", "items": {"$ref": "#/components/schemas/Assignment"}}}}, "IncidentList": {"type": "object", "properties": {"incidents": {"type": "array", "items": {"$ref": "#/components/schemas/Incident"}}}}, "IncidentCreate": {"type": "object", "properties": {"type": {"type": "string", "enum": ["incident"]}, "title": {"type": "string"}, "service": {"$ref": "#/components/schemas/ServiceReference"}, "urgency": {"type": "string", "enum": ["high", "low"]}, "body": {"type": "object", "properties": {"type": {"type": "string", "enum": ["incident_body"]}, "details": {"type": "string"}}}}, "required": ["type", "title", "service"]}, "IncidentUpdate": {"type": "object", "properties": {"type": {"type": "string", "enum": ["incident"]}, "status": {"type": "string", "enum": ["acknowledged", "resolved"]}}, "required": ["type", "status"]}, "Service": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["service"]}, "name": {"type": "string"}, "description": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "status": {"type": "string", "enum": ["active", "warning", "critical", "maintenance", "disabled"]}}}, "ServiceList": {"type": "object", "properties": {"services": {"type": "array", "items": {"$ref": "#/components/schemas/Service"}}}}, "ServiceCreate": {"type": "object", "properties": {"type": {"type": "string", "enum": ["service"]}, "name": {"type": "string"}, "description": {"type": "string"}, "escalation_policy": {"$ref": "#/components/schemas/EscalationPolicyReference"}}, "required": ["type", "name", "escalation_policy"]}, "Schedule": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["schedule"]}, "summary": {"type": "string"}, "description": {"type": "string"}, "time_zone": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}}}, "ScheduleList": {"type": "object", "properties": {"schedules": {"type": "array", "items": {"$ref": "#/components/schemas/Schedule"}}}}, "ScheduleCreate": {"type": "object", "properties": {"type": {"type": "string", "enum": ["schedule"]}, "name": {"type": "string"}, "time_zone": {"type": "string"}, "description": {"type": "string"}}, "required": ["type", "name", "time_zone"]}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["user"]}, "name": {"type": "string"}, "email": {"type": "string", "format": "email"}, "time_zone": {"type": "string"}, "color": {"type": "string"}, "role": {"type": "string", "enum": ["admin", "user", "limited_user", "observer"]}, "job_title": {"type": "string"}}}, "UserList": {"type": "object", "properties": {"users": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "UserCreate": {"type": "object", "properties": {"type": {"type": "string", "enum": ["user"]}, "name": {"type": "string"}, "email": {"type": "string", "format": "email"}, "time_zone": {"type": "string"}, "role": {"type": "string", "enum": ["admin", "user", "limited_user", "observer"]}}, "required": ["type", "name", "email"]}, "ServiceReference": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["service_reference"]}}}, "EscalationPolicyReference": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string", "enum": ["escalation_policy_reference"]}}}, "Assignment": {"type": "object", "properties": {"assignee": {"$ref": "#/components/schemas/User"}, "at": {"type": "string", "format": "date-time"}}}}, "securitySchemes": {"api_key": {"type": "apiKey", "name": "Authorization", "in": "header"}}}, "security": [{"api_key": []}]}}, {"title": "Facebook API", "content": {"openapi": "3.0.0", "info": {"title": "Facebook API", "description": "API for interacting with Facebook's social network features", "version": "v13.0", "contact": {"name": "Facebook Developer Support", "url": "https://developers.facebook.com/support/"}}, "servers": [{"url": "https://graph.facebook.com/v13.0"}], "paths": {"/me": {"get": {"summary": "Get current user's profile", "description": "Retrieve the profile information of the currently authenticated user", "security": [{"oauth2": ["user_profile"]}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Unauthorized"}}}}, "/me/feed": {"get": {"summary": "Get user's feed", "description": "Retrieve posts from the current user's feed", "security": [{"oauth2": ["user_posts"]}], "parameters": [{"name": "limit", "in": "query", "description": "Number of posts to retrieve", "schema": {"type": "integer", "default": 25}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Post"}}}}}, "401": {"description": "Unauthorized"}}}, "post": {"summary": "Create a post", "description": "Create a new post on the user's feed", "security": [{"oauth2": ["publish_to_groups"]}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PostInput"}}}}, "responses": {"201": {"description": "Post created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Post"}}}}, "401": {"description": "Unauthorized"}}}}, "/me/friends": {"get": {"summary": "Get user's friends", "description": "Retrieve a list of the current user's friends", "security": [{"oauth2": ["user_friends"]}], "parameters": [{"name": "limit", "in": "query", "description": "Number of friends to retrieve", "schema": {"type": "integer", "default": 25}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}, "401": {"description": "Unauthorized"}}}}, "/me/photos": {"get": {"summary": "Get user's photos", "description": "Retrieve photos uploaded by the current user", "security": [{"oauth2": ["user_photos"]}], "parameters": [{"name": "limit", "in": "query", "description": "Number of photos to retrieve", "schema": {"type": "integer", "default": 25}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Photo"}}}}}, "401": {"description": "Unauthorized"}}}, "post": {"summary": "Upload a photo", "description": "Upload a new photo to the user's account", "security": [{"oauth2": ["publish_to_groups"]}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"type": "object", "properties": {"source": {"type": "string", "format": "binary"}, "message": {"type": "string"}}}}}}, "responses": {"201": {"description": "Photo uploaded successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Photo"}}}}, "401": {"description": "Unauthorized"}}}}, "/page/{page_id}": {"get": {"summary": "Get page information", "description": "Retrieve information about a specific Facebook page", "parameters": [{"name": "page_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Page"}}}}, "404": {"description": "Page not found"}}}}, "/page/{page_id}/feed": {"get": {"summary": "Get page feed", "description": "Retrieve posts from a specific Facebook page's feed", "parameters": [{"name": "page_id", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Number of posts to retrieve", "schema": {"type": "integer", "default": 25}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Post"}}}}}, "404": {"description": "Page not found"}}}}}, "components": {"schemas": {"User": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "email": {"type": "string"}, "picture": {"type": "string"}}}, "Post": {"type": "object", "properties": {"id": {"type": "string"}, "message": {"type": "string"}, "created_time": {"type": "string", "format": "date-time"}, "author": {"$ref": "#/components/schemas/User"}}}, "PostInput": {"type": "object", "properties": {"message": {"type": "string"}, "link": {"type": "string"}}, "required": ["message"]}, "Photo": {"type": "object", "properties": {"id": {"type": "string"}, "source": {"type": "string"}, "created_time": {"type": "string", "format": "date-time"}, "album": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}}}}}, "Page": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "category": {"type": "string"}, "fan_count": {"type": "integer"}}}}, "securitySchemes": {"oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://www.facebook.com/v13.0/dialog/oauth", "tokenUrl": "https://graph.facebook.com/v13.0/oauth/access_token", "scopes": {"user_profile": "Access user's basic profile", "user_posts": "Access user's posts", "publish_to_groups": "Publish posts and photos", "user_friends": "Access user's friend list", "user_photos": "Access user's photos"}}}}}}}}, {"title": "Vonage API", "content": {"openapi": "3.0.0", "info": {"title": "Vonage API", "description": "API for Vonage communication services", "version": "1.0.0", "contact": {"name": "Vonage API Support", "url": "https://developer.vonage.com/", "email": "support@vonage.com"}}, "servers": [{"url": "https://api.vonage.com"}], "paths": {"/sms/json": {"post": {"summary": "Send an SMS", "operationId": "sendSMS", "tags": ["SMS"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SMSRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SMSResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"basicAuth": []}]}}, "/verify/json": {"post": {"summary": "Start verification process", "operationId": "startVerification", "tags": ["Verify"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifyRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifyResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"basicAuth": []}]}}, "/verify/check/json": {"post": {"summary": "Check verification code", "operationId": "checkVerification", "tags": ["Verify"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifyCheckRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifyCheckResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"basicAuth": []}]}}, "/voice/json": {"post": {"summary": "Make a voice call", "operationId": "makeVoiceCall", "tags": ["Voice"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VoiceCallRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VoiceCallResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"basicAuth": []}]}}}, "components": {"schemas": {"SMSRequest": {"type": "object", "required": ["from", "to", "text"], "properties": {"from": {"type": "string", "description": "The sender ID"}, "to": {"type": "string", "description": "The recipient's phone number"}, "text": {"type": "string", "description": "The content of the SMS"}}}, "SMSResponse": {"type": "object", "properties": {"message-count": {"type": "string", "description": "The number of messages sent"}, "messages": {"type": "array", "items": {"type": "object", "properties": {"to": {"type": "string"}, "message-id": {"type": "string"}, "status": {"type": "string"}, "remaining-balance": {"type": "string"}, "message-price": {"type": "string"}, "network": {"type": "string"}}}}}}, "VerifyRequest": {"type": "object", "required": ["number", "brand"], "properties": {"number": {"type": "string", "description": "The phone number to verify"}, "brand": {"type": "string", "description": "The name of the company or app"}, "code_length": {"type": "integer", "description": "The length of the verification code"}}}, "VerifyResponse": {"type": "object", "properties": {"request_id": {"type": "string"}, "status": {"type": "string"}}}, "VerifyCheckRequest": {"type": "object", "required": ["request_id", "code"], "properties": {"request_id": {"type": "string", "description": "The ID of the Verify request"}, "code": {"type": "string", "description": "The verification code"}}}, "VerifyCheckResponse": {"type": "object", "properties": {"request_id": {"type": "string"}, "event_id": {"type": "string"}, "status": {"type": "string"}, "price": {"type": "string"}, "currency": {"type": "string"}}}, "VoiceCallRequest": {"type": "object", "required": ["to", "from", "text"], "properties": {"to": {"type": "string", "description": "The recipient's phone number"}, "from": {"type": "string", "description": "The caller's phone number"}, "text": {"type": "string", "description": "The message to be read out"}, "voice_name": {"type": "string", "description": "The voice to use for text-to-speech"}, "language": {"type": "string", "description": "The language of the message"}}}, "VoiceCallResponse": {"type": "object", "properties": {"to": {"type": "string"}, "message-id": {"type": "string"}, "status": {"type": "string"}, "remaining-balance": {"type": "string"}, "message-price": {"type": "string"}, "network": {"type": "string"}}}}, "securitySchemes": {"basicAuth": {"type": "http", "scheme": "basic"}}}}}, {"title": "DocuSign REST API", "content": {"openapi": "3.0.0", "info": {"title": "DocuSign REST API", "description": "The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.", "version": "v2.1", "contact": {"name": "DocuSign Support", "url": "https://support.docusign.com", "email": "support@docusign.com"}}, "servers": [{"url": "https://demo.docusign.net/restapi", "description": "DocuSign Demo/Sandbox server"}, {"url": "https://www.docusign.net/restapi", "description": "DocuSign Production server"}], "paths": {"/v2.1/accounts/{accountId}/envelopes": {"post": {"summary": "Create an envelope", "description": "Creates an envelope.", "operationId": "createEnvelope", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/EnvelopeDefinition"}}}, "required": true}, "responses": {"201": {"description": "Envelope created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EnvelopeSummary"}}}}, "400": {"description": "Bad Request"}, "401": {"description": "Unauthorized"}}, "security": [{"docusignAuth": []}]}, "get": {"summary": "List envelopes", "description": "Returns a list of envelopes.", "operationId": "listEnvelopes", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "from_date", "in": "query", "schema": {"type": "string", "format": "date-time"}}, {"name": "to_date", "in": "query", "schema": {"type": "string", "format": "date-time"}}, {"name": "status", "in": "query", "schema": {"type": "string", "enum": ["created", "sent", "delivered", "signed", "completed", "declined"]}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EnvelopesInformation"}}}}, "400": {"description": "Bad Request"}, "401": {"description": "Unauthorized"}}, "security": [{"docusignAuth": []}]}}, "/v2.1/accounts/{accountId}/envelopes/{envelopeId}": {"get": {"summary": "Get envelope information", "description": "Retrieves the overall status for the specified envelope.", "operationId": "getEnvelope", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "envelopeId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Envelope"}}}}, "400": {"description": "Bad Request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Not Found"}}, "security": [{"docusignAuth": []}]}}, "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents": {"get": {"summary": "List envelope documents", "description": "Returns a list of documents associated with the specified envelope.", "operationId": "listEnvelopeDocuments", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "envelopeId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EnvelopeDocumentsResult"}}}}, "400": {"description": "Bad Request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Not Found"}}, "security": [{"docusignAuth": []}]}}, "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients": {"get": {"summary": "Get envelope recipient information", "description": "Retrieves the status of recipients for a single envelope.", "operationId": "listEnvelopeRecipients", "parameters": [{"name": "accountId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "envelopeId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Recipients"}}}}, "400": {"description": "Bad Request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Not Found"}}, "security": [{"docusignAuth": []}]}}}, "components": {"schemas": {"EnvelopeDefinition": {"type": "object", "properties": {"emailSubject": {"type": "string"}, "emailBlurb": {"type": "string"}, "status": {"type": "string", "enum": ["created", "sent", "delivered", "signed", "completed", "declined"]}, "documents": {"type": "array", "items": {"$ref": "#/components/schemas/Document"}}, "recipients": {"$ref": "#/components/schemas/Recipients"}}}, "Document": {"type": "object", "properties": {"documentId": {"type": "string"}, "name": {"type": "string"}, "fileExtension": {"type": "string"}, "documentBase64": {"type": "string"}}}, "Recipients": {"type": "object", "properties": {"signers": {"type": "array", "items": {"$ref": "#/components/schemas/Signer"}}, "carbonCopies": {"type": "array", "items": {"$ref": "#/components/schemas/CarbonCopy"}}}}, "Signer": {"type": "object", "properties": {"email": {"type": "string"}, "name": {"type": "string"}, "recipientId": {"type": "string"}, "routingOrder": {"type": "integer"}, "tabs": {"$ref": "#/components/schemas/Tabs"}}}, "CarbonCopy": {"type": "object", "properties": {"email": {"type": "string"}, "name": {"type": "string"}, "recipientId": {"type": "string"}, "routingOrder": {"type": "integer"}}}, "Tabs": {"type": "object", "properties": {"signHereTabs": {"type": "array", "items": {"$ref": "#/components/schemas/SignHereTab"}}, "dateSignedTabs": {"type": "array", "items": {"$ref": "#/components/schemas/DateSignedTab"}}}}, "SignHereTab": {"type": "object", "properties": {"documentId": {"type": "string"}, "pageNumber": {"type": "integer"}, "xPosition": {"type": "integer"}, "yPosition": {"type": "integer"}}}, "DateSignedTab": {"type": "object", "properties": {"documentId": {"type": "string"}, "pageNumber": {"type": "integer"}, "xPosition": {"type": "integer"}, "yPosition": {"type": "integer"}}}, "EnvelopeSummary": {"type": "object", "properties": {"envelopeId": {"type": "string"}, "status": {"type": "string"}, "statusDateTime": {"type": "string", "format": "date-time"}}}, "EnvelopesInformation": {"type": "object", "properties": {"resultSetSize": {"type": "integer"}, "totalSetSize": {"type": "integer"}, "envelopes": {"type": "array", "items": {"$ref": "#/components/schemas/Envelope"}}}}, "Envelope": {"type": "object", "properties": {"envelopeId": {"type": "string"}, "status": {"type": "string"}, "statusDateTime": {"type": "string", "format": "date-time"}, "emailSubject": {"type": "string"}, "createdDateTime": {"type": "string", "format": "date-time"}, "sentDateTime": {"type": "string", "format": "date-time"}, "completedDateTime": {"type": "string", "format": "date-time"}}}, "EnvelopeDocumentsResult": {"type": "object", "properties": {"envelopeId": {"type": "string"}, "envelopeDocuments": {"type": "array", "items": {"$ref": "#/components/schemas/EnvelopeDocument"}}}}, "EnvelopeDocument": {"type": "object", "properties": {"documentId": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}, "uri": {"type": "string"}, "order": {"type": "integer"}, "pages": {"type": "integer"}}}}, "securitySchemes": {"docusignAuth": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://account-d.docusign.com/oauth/auth", "tokenUrl": "https://account-d.docusign.com/oauth/token", "scopes": {"signature": "Grants read/write access to envelope data", "extended": "Grants access to extended permissions"}}}}}}}}, {"title": "Okta API", "content": {"openapi": "3.0.0", "info": {"title": "Okta API", "description": "The Okta API enables you to manage users, groups, applications, and more in your Okta organization.", "version": "1.0.0", "contact": {"name": "Okta Developer Support", "url": "https://developer.okta.com/support/", "email": "developers@okta.com"}}, "servers": [{"url": "https://{yourOktaDomain}/api/v1", "variables": {"yourOktaDomain": {"default": "your-domain.okta.com", "description": "Your Okta domain"}}}], "paths": {"/users": {"get": {"summary": "List Users", "description": "Lists users in your organization with pagination.", "parameters": [{"name": "q", "in": "query", "description": "Searches for users with a supported filtering expression", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Specifies the number of results returned", "schema": {"type": "integer", "default": 200, "maximum": 200}}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}}, "security": [{"oktaAuth": []}]}, "post": {"summary": "Create User", "description": "Creates a new user in your Okta organization", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"oktaAuth": []}]}}, "/users/{userId}": {"get": {"summary": "Get User", "description": "Gets a user by ID", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"oktaAuth": []}]}, "put": {"summary": "Update User", "description": "Updates a user's profile and/or credentials using the Profile object", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"oktaAuth": []}]}, "delete": {"summary": "Delete User", "description": "Deletes a user permanently", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "No Content"}}, "security": [{"oktaAuth": []}]}}, "/groups": {"get": {"summary": "List Groups", "description": "Lists groups in your organization with pagination", "parameters": [{"name": "q", "in": "query", "description": "Searches for groups with a supported filtering expression", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Specifies the number of results returned", "schema": {"type": "integer", "default": 200, "maximum": 200}}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Group"}}}}}}, "security": [{"oktaAuth": []}]}, "post": {"summary": "Create Group", "description": "Creates a new group in your Okta organization", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}}, "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}}}, "security": [{"oktaAuth": []}]}}, "/apps": {"get": {"summary": "List Applications", "description": "Lists applications in your organization with pagination", "parameters": [{"name": "q", "in": "query", "description": "Searches for applications with a supported filtering expression", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Specifies the number of results returned", "schema": {"type": "integer", "default": 200, "maximum": 200}}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Application"}}}}}}, "security": [{"oktaAuth": []}]}, "post": {"summary": "Create Application", "description": "Creates a new application in your Okta organization", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Application"}}}}, "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Application"}}}}}, "security": [{"oktaAuth": []}]}}}, "components": {"schemas": {"User": {"type": "object", "properties": {"id": {"type": "string"}, "status": {"type": "string", "enum": ["ACTIVE", "DEPROVISIONED", "LOCKED_OUT", "PASSWORD_EXPIRED", "PROVISIONED", "RECOVERY", "STAGED", "SUSPENDED"]}, "created": {"type": "string", "format": "date-time"}, "activated": {"type": "string", "format": "date-time"}, "statusChanged": {"type": "string", "format": "date-time"}, "lastLogin": {"type": "string", "format": "date-time"}, "lastUpdated": {"type": "string", "format": "date-time"}, "passwordChanged": {"type": "string", "format": "date-time"}, "profile": {"type": "object", "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string"}, "login": {"type": "string"}, "mobilePhone": {"type": "string"}}}, "credentials": {"type": "object", "properties": {"password": {"type": "object", "properties": {"value": {"type": "string"}}}, "recovery_question": {"type": "object", "properties": {"question": {"type": "string"}, "answer": {"type": "string"}}}}}}}, "Group": {"type": "object", "properties": {"id": {"type": "string"}, "created": {"type": "string", "format": "date-time"}, "lastUpdated": {"type": "string", "format": "date-time"}, "lastMembershipUpdated": {"type": "string", "format": "date-time"}, "objectClass": {"type": "array", "items": {"type": "string"}}, "type": {"type": "string"}, "profile": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}}}}}, "Application": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "label": {"type": "string"}, "status": {"type": "string", "enum": ["ACTIVE", "INACTIVE"]}, "lastUpdated": {"type": "string", "format": "date-time"}, "created": {"type": "string", "format": "date-time"}, "accessibility": {"type": "object", "properties": {"selfService": {"type": "boolean"}, "errorRedirectUrl": {"type": "string"}, "loginRedirectUrl": {"type": "string"}}}, "visibility": {"type": "object", "properties": {"autoSubmitToolbar": {"type": "boolean"}, "hide": {"type": "object", "properties": {"iOS": {"type": "boolean"}, "web": {"type": "boolean"}}}}}, "features": {"type": "array", "items": {"type": "string"}}, "signOnMode": {"type": "string"}, "credentials": {"type": "object", "properties": {"userNameTemplate": {"type": "object", "properties": {"template": {"type": "string"}, "type": {"type": "string"}}}, "signing": {"type": "object", "properties": {"kid": {"type": "string"}}}}}, "settings": {"type": "object", "properties": {"app": {"type": "object"}}}}}}, "securitySchemes": {"oktaAuth": {"type": "apiKey", "name": "Authorization", "in": "header"}}}}}, {"title": "Salesforce API", "content": {"openapi": "3.0.0", "info": {"title": "Salesforce API", "description": "API for interacting with Salesforce CRM", "version": "1.0.0", "contact": {"name": "Salesforce Support", "url": "https://help.salesforce.com/", "email": "support@salesforce.com"}}, "servers": [{"url": "https://{instance}.salesforce.com/services/data/v54.0", "variables": {"instance": {"default": "na1", "description": "Salesforce instance"}}}], "paths": {"/sobjects/Account": {"get": {"summary": "Get Account metadata", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SObjectMetadata"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new Account", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Account"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateResponse"}}}}}, "security": [{"bearerAuth": []}]}}, "/sobjects/Account/{id}": {"get": {"summary": "Get Account by ID", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Account"}}}}}, "security": [{"bearerAuth": []}]}, "patch": {"summary": "Update Account", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Account"}}}}, "responses": {"204": {"description": "Successful update"}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete Account", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Successful deletion"}}, "security": [{"bearerAuth": []}]}}, "/sobjects/Contact": {"get": {"summary": "Get Contact metadata", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SObjectMetadata"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new Contact", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Contact"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateResponse"}}}}}, "security": [{"bearerAuth": []}]}}, "/sobjects/Contact/{id}": {"get": {"summary": "Get Contact by ID", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Contact"}}}}}, "security": [{"bearerAuth": []}]}, "patch": {"summary": "Update Contact", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Contact"}}}}, "responses": {"204": {"description": "Successful update"}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete Contact", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Successful deletion"}}, "security": [{"bearerAuth": []}]}}, "/sobjects/Opportunity": {"get": {"summary": "Get Opportunity metadata", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SObjectMetadata"}}}}}, "security": [{"bearerAuth": []}]}, "post": {"summary": "Create a new Opportunity", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Opportunity"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateResponse"}}}}}, "security": [{"bearerAuth": []}]}}, "/sobjects/Opportunity/{id}": {"get": {"summary": "Get Opportunity by ID", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Opportunity"}}}}}, "security": [{"bearerAuth": []}]}, "patch": {"summary": "Update Opportunity", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Opportunity"}}}}, "responses": {"204": {"description": "Successful update"}}, "security": [{"bearerAuth": []}]}, "delete": {"summary": "Delete Opportunity", "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Successful deletion"}}, "security": [{"bearerAuth": []}]}}, "/query": {"get": {"summary": "Execute SOQL Query", "parameters": [{"name": "q", "in": "query", "required": true, "schema": {"type": "string"}, "description": "SOQL Query"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueryResult"}}}}}, "security": [{"bearerAuth": []}]}}}, "components": {"schemas": {"SObjectMetadata": {"type": "object", "properties": {"objectDescribe": {"type": "object", "properties": {"name": {"type": "string"}, "label": {"type": "string"}, "keyPrefix": {"type": "string"}, "custom": {"type": "boolean"}, "customSetting": {"type": "boolean"}, "createable": {"type": "boolean"}, "updateable": {"type": "boolean"}, "deletable": {"type": "boolean"}}}, "recentItems": {"type": "array", "items": {"type": "object", "properties": {"Id": {"type": "string"}, "Name": {"type": "string"}}}}}}, "Account": {"type": "object", "properties": {"Id": {"type": "string"}, "Name": {"type": "string"}, "Type": {"type": "string"}, "Industry": {"type": "string"}, "AnnualRevenue": {"type": "number"}, "Phone": {"type": "string"}, "Website": {"type": "string"}}}, "Contact": {"type": "object", "properties": {"Id": {"type": "string"}, "FirstName": {"type": "string"}, "LastName": {"type": "string"}, "Email": {"type": "string"}, "Phone": {"type": "string"}, "AccountId": {"type": "string"}}}, "Opportunity": {"type": "object", "properties": {"Id": {"type": "string"}, "Name": {"type": "string"}, "StageName": {"type": "string"}, "Amount": {"type": "number"}, "CloseDate": {"type": "string", "format": "date"}, "AccountId": {"type": "string"}}}, "CreateResponse": {"type": "object", "properties": {"id": {"type": "string"}, "success": {"type": "boolean"}, "errors": {"type": "array", "items": {"type": "string"}}}}, "QueryResult": {"type": "object", "properties": {"totalSize": {"type": "integer"}, "done": {"type": "boolean"}, "records": {"type": "array", "items": {"type": "object"}}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "Workday API", "content": {"openapi": "3.0.0", "info": {"title": "Workday API", "description": "API for interacting with Workday HR and Finance systems", "version": "1.0.0", "contact": {"name": "Workday API Support", "url": "https://www.workday.com/api-support", "email": "api-support@workday.com"}}, "servers": [{"url": "https://api.workday.com/v1"}], "paths": {"/employees": {"get": {"summary": "List employees", "description": "Retrieve a list of employees", "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 50}, "description": "Number of employees to return"}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "Number of employees to skip"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Employee"}}}}}}}, "post": {"summary": "Create employee", "description": "Create a new employee record", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EmployeeInput"}}}}, "responses": {"201": {"description": "Employee created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Employee"}}}}}}}, "/employees/{employeeId}": {"get": {"summary": "Get employee", "description": "Retrieve details of a specific employee", "parameters": [{"name": "employeeId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Employee"}}}}, "404": {"description": "Employee not found"}}}, "put": {"summary": "Update employee", "description": "Update details of a specific employee", "parameters": [{"name": "employeeId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EmployeeInput"}}}}, "responses": {"200": {"description": "Employee updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Employee"}}}}, "404": {"description": "Employee not found"}}}, "delete": {"summary": "Delete employee", "description": "Delete a specific employee", "parameters": [{"name": "employeeId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Employee deleted successfully"}, "404": {"description": "Employee not found"}}}}, "/payroll": {"get": {"summary": "List payroll entries", "description": "Retrieve a list of payroll entries", "parameters": [{"name": "startDate", "in": "query", "schema": {"type": "string", "format": "date"}, "description": "Start date for payroll entries"}, {"name": "endDate", "in": "query", "schema": {"type": "string", "format": "date"}, "description": "End date for payroll entries"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PayrollEntry"}}}}}}}, "post": {"summary": "Create payroll entry", "description": "Create a new payroll entry", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PayrollEntryInput"}}}}, "responses": {"201": {"description": "Payroll entry created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PayrollEntry"}}}}}}}, "/time-off": {"get": {"summary": "List time-off requests", "description": "Retrieve a list of time-off requests", "parameters": [{"name": "employeeId", "in": "query", "schema": {"type": "string"}, "description": "Filter by employee ID"}, {"name": "status", "in": "query", "schema": {"type": "string", "enum": ["pending", "approved", "rejected"]}, "description": "Filter by request status"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TimeOffRequest"}}}}}}}, "post": {"summary": "Create time-off request", "description": "Create a new time-off request", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TimeOffRequestInput"}}}}, "responses": {"201": {"description": "Time-off request created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TimeOffRequest"}}}}}}}, "/performance-reviews": {"get": {"summary": "List performance reviews", "description": "Retrieve a list of performance reviews", "parameters": [{"name": "employeeId", "in": "query", "schema": {"type": "string"}, "description": "Filter by employee ID"}, {"name": "year", "in": "query", "schema": {"type": "integer"}, "description": "Filter by review year"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PerformanceReview"}}}}}}}, "post": {"summary": "Create performance review", "description": "Create a new performance review", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PerformanceReviewInput"}}}}, "responses": {"201": {"description": "Performance review created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PerformanceReview"}}}}}}}}, "components": {"schemas": {"Employee": {"type": "object", "properties": {"id": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string", "format": "email"}, "hireDate": {"type": "string", "format": "date"}, "position": {"type": "string"}, "department": {"type": "string"}, "salary": {"type": "number"}}}, "EmployeeInput": {"type": "object", "required": ["firstName", "lastName", "email", "hireDate", "position", "department", "salary"], "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string", "format": "email"}, "hireDate": {"type": "string", "format": "date"}, "position": {"type": "string"}, "department": {"type": "string"}, "salary": {"type": "number"}}}, "PayrollEntry": {"type": "object", "properties": {"id": {"type": "string"}, "employeeId": {"type": "string"}, "payPeriodStart": {"type": "string", "format": "date"}, "payPeriodEnd": {"type": "string", "format": "date"}, "grossPay": {"type": "number"}, "netPay": {"type": "number"}, "deductions": {"type": "object"}}}, "PayrollEntryInput": {"type": "object", "required": ["employeeId", "payPeriodStart", "payPeriodEnd", "grossPay", "netPay"], "properties": {"employeeId": {"type": "string"}, "payPeriodStart": {"type": "string", "format": "date"}, "payPeriodEnd": {"type": "string", "format": "date"}, "grossPay": {"type": "number"}, "netPay": {"type": "number"}, "deductions": {"type": "object"}}}, "TimeOffRequest": {"type": "object", "properties": {"id": {"type": "string"}, "employeeId": {"type": "string"}, "startDate": {"type": "string", "format": "date"}, "endDate": {"type": "string", "format": "date"}, "type": {"type": "string", "enum": ["vacation", "sick", "personal"]}, "status": {"type": "string", "enum": ["pending", "approved", "rejected"]}}}, "TimeOffRequestInput": {"type": "object", "required": ["employeeId", "startDate", "endDate", "type"], "properties": {"employeeId": {"type": "string"}, "startDate": {"type": "string", "format": "date"}, "endDate": {"type": "string", "format": "date"}, "type": {"type": "string", "enum": ["vacation", "sick", "personal"]}}}, "PerformanceReview": {"type": "object", "properties": {"id": {"type": "string"}, "employeeId": {"type": "string"}, "reviewerId": {"type": "string"}, "year": {"type": "integer"}, "overallRating": {"type": "number"}, "comments": {"type": "string"}, "goals": {"type": "array", "items": {"type": "string"}}}}, "PerformanceReviewInput": {"type": "object", "required": ["employeeId", "reviewerId", "year", "overallRating"], "properties": {"employeeId": {"type": "string"}, "reviewerId": {"type": "string"}, "year": {"type": "integer"}, "overallRating": {"type": "number"}, "comments": {"type": "string"}, "goals": {"type": "array", "items": {"type": "string"}}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}, "security": [{"bearerAuth": []}]}}, {"title": "Shopify API", "content": {"openapi": "3.0.0", "info": {"title": "Shopify API", "description": "API for interacting with Shopify e-commerce platform", "version": "2023-04", "contact": {"name": "Shopify API Support", "url": "https://shopify.dev/support"}}, "servers": [{"url": "https://{shop}.myshopify.com/admin/api/{version}", "variables": {"shop": {"default": "your-shop-name", "description": "Your Shopify shop name"}, "version": {"default": "2023-04", "description": "API version"}}}], "paths": {"/products.json": {"get": {"summary": "Get all products", "description": "Retrieve a list of products", "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 50}, "description": "The number of products to return"}, {"name": "fields", "in": "query", "schema": {"type": "string"}, "description": "Comma-separated list of fields to include in the response"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductList"}}}}}}, "post": {"summary": "Create a product", "description": "Create a new product", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductCreate"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}}}}, "/products/{product_id}.json": {"get": {"summary": "Get a product", "description": "Retrieve a single product", "parameters": [{"name": "product_id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the product"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}}}, "put": {"summary": "Update a product", "description": "Update an existing product", "parameters": [{"name": "product_id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the product"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}}}, "delete": {"summary": "Delete a product", "description": "Delete an existing product", "parameters": [{"name": "product_id", "in": "path", "required": true, "schema": {"type": "integer"}, "description": "The ID of the product"}], "responses": {"200": {"description": "Successful response"}}}}, "/orders.json": {"get": {"summary": "Get all orders", "description": "Retrieve a list of orders", "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 50}, "description": "The number of orders to return"}, {"name": "status", "in": "query", "schema": {"type": "string", "enum": ["open", "closed", "cancelled", "any"]}, "description": "Filter orders by status"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrderList"}}}}}}, "post": {"summary": "Create an order", "description": "Create a new order", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrderCreate"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}}}}, "/customers.json": {"get": {"summary": "Get all customers", "description": "Retrieve a list of customers", "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 50}, "description": "The number of customers to return"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomerList"}}}}}}, "post": {"summary": "Create a customer", "description": "Create a new customer", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CustomerCreate"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Customer"}}}}}}}}, "components": {"schemas": {"Product": {"type": "object", "properties": {"id": {"type": "integer"}, "title": {"type": "string"}, "body_html": {"type": "string"}, "vendor": {"type": "string"}, "product_type": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}, "variants": {"type": "array", "items": {"$ref": "#/components/schemas/ProductVariant"}}, "images": {"type": "array", "items": {"$ref": "#/components/schemas/Image"}}}}, "ProductVariant": {"type": "object", "properties": {"id": {"type": "integer"}, "product_id": {"type": "integer"}, "title": {"type": "string"}, "price": {"type": "string"}, "sku": {"type": "string"}, "inventory_quantity": {"type": "integer"}}}, "Image": {"type": "object", "properties": {"id": {"type": "integer"}, "product_id": {"type": "integer"}, "src": {"type": "string"}, "width": {"type": "integer"}, "height": {"type": "integer"}}}, "ProductList": {"type": "object", "properties": {"products": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}, "ProductCreate": {"type": "object", "properties": {"product": {"type": "object", "properties": {"title": {"type": "string"}, "body_html": {"type": "string"}, "vendor": {"type": "string"}, "product_type": {"type": "string"}, "variants": {"type": "array", "items": {"$ref": "#/components/schemas/ProductVariant"}}}, "required": ["title"]}}}, "ProductUpdate": {"type": "object", "properties": {"product": {"type": "object", "properties": {"id": {"type": "integer"}, "title": {"type": "string"}, "body_html": {"type": "string"}, "vendor": {"type": "string"}, "product_type": {"type": "string"}, "variants": {"type": "array", "items": {"$ref": "#/components/schemas/ProductVariant"}}}, "required": ["id"]}}}, "Order": {"type": "object", "properties": {"id": {"type": "integer"}, "email": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}, "total_price": {"type": "string"}, "subtotal_price": {"type": "string"}, "total_tax": {"type": "string"}, "currency": {"type": "string"}, "financial_status": {"type": "string"}, "fulfillment_status": {"type": "string"}, "line_items": {"type": "array", "items": {"$ref": "#/components/schemas/LineItem"}}, "shipping_address": {"$ref": "#/components/schemas/Address"}, "billing_address": {"$ref": "#/components/schemas/Address"}, "customer": {"$ref": "#/components/schemas/Customer"}}}, "OrderList": {"type": "object", "properties": {"orders": {"type": "array", "items": {"$ref": "#/components/schemas/Order"}}}}, "OrderCreate": {"type": "object", "properties": {"order": {"type": "object", "properties": {"email": {"type": "string"}, "line_items": {"type": "array", "items": {"$ref": "#/components/schemas/LineItem"}}, "shipping_address": {"$ref": "#/components/schemas/Address"}, "billing_address": {"$ref": "#/components/schemas/Address"}}, "required": ["email", "line_items"]}}}, "LineItem": {"type": "object", "properties": {"variant_id": {"type": "integer"}, "quantity": {"type": "integer"}, "price": {"type": "string"}}}, "Address": {"type": "object", "properties": {"first_name": {"type": "string"}, "last_name": {"type": "string"}, "address1": {"type": "string"}, "address2": {"type": "string"}, "city": {"type": "string"}, "province": {"type": "string"}, "country": {"type": "string"}, "zip": {"type": "string"}, "phone": {"type": "string"}}}, "Customer": {"type": "object", "properties": {"id": {"type": "integer"}, "email": {"type": "string"}, "first_name": {"type": "string"}, "last_name": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}, "orders_count": {"type": "integer"}, "state": {"type": "string"}, "total_spent": {"type": "string"}, "addresses": {"type": "array", "items": {"$ref": "#/components/schemas/Address"}}}}, "CustomerList": {"type": "object", "properties": {"customers": {"type": "array", "items": {"$ref": "#/components/schemas/Customer"}}}}, "CustomerCreate": {"type": "object", "properties": {"customer": {"type": "object", "properties": {"email": {"type": "string"}, "first_name": {"type": "string"}, "last_name": {"type": "string"}, "phone": {"type": "string"}, "addresses": {"type": "array", "items": {"$ref": "#/components/schemas/Address"}}}, "required": ["email"]}}}}, "securitySchemes": {"AccessToken": {"type": "apiKey", "in": "header", "name": "X-Shopify-Access-Token"}}}, "security": [{"AccessToken": []}]}}, {"title": "Microsoft API", "content": {"openapi": "3.0.0", "info": {"title": "Microsoft API", "description": "A comprehensive API for Microsoft services and products", "version": "1.0.0", "contact": {"name": "Microsoft Support", "url": "https://support.microsoft.com", "email": "support@microsoft.com"}, "license": {"name": "Microsoft License", "url": "https://www.microsoft.com/en-us/legal/intellectualproperty/copyright/default.aspx"}}, "servers": [{"url": "https://api.microsoft.com/v1"}], "tags": [{"name": "Office365", "description": "Microsoft Office 365 related operations"}, {"name": "Azure", "description": "Microsoft Azure related operations"}, {"name": "Windows", "description": "Windows operating system related operations"}, {"name": "Xbox", "description": "Xbox gaming related operations"}, {"name": "Dynamics365", "description": "Dynamics 365 related operations"}], "paths": {"/office365/users": {"get": {"summary": "Get all Office 365 users", "tags": ["Office365"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}}}, "post": {"summary": "Create a new Office 365 user", "tags": ["Office365"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "responses": {"201": {"description": "User created successfully"}}}}, "/azure/resources": {"get": {"summary": "Get all Azure resources", "tags": ["Azure"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AzureResource"}}}}}}}}, "/windows/updates": {"get": {"summary": "Get available Windows updates", "tags": ["Windows"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/WindowsUpdate"}}}}}}}}, "/xbox/games": {"get": {"summary": "Get Xbox games catalog", "tags": ["Xbox"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/XboxGame"}}}}}}}}, "/dynamics365/customers": {"get": {"summary": "Get all Dynamics 365 customers", "tags": ["Dynamics365"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Customer"}}}}}}}}}, "components": {"schemas": {"User": {"type": "object", "properties": {"id": {"type": "string"}, "username": {"type": "string"}, "email": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}}}, "AzureResource": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}, "location": {"type": "string"}}}, "WindowsUpdate": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "releaseDate": {"type": "string", "format": "date-time"}}}, "XboxGame": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "publisher": {"type": "string"}, "releaseDate": {"type": "string", "format": "date"}}}, "Customer": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "email": {"type": "string"}, "phone": {"type": "string"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}, "security": [{"bearerAuth": []}]}}, {"title": "SAP API", "content": {"openapi": "3.0.0", "info": {"title": "SAP API", "description": "API for interacting with SAP ERP system", "version": "1.0.0", "contact": {"name": "SAP API Support", "email": "api-support@sap.com", "url": "https://api.sap.com/support"}}, "servers": [{"url": "https://api.sap.com/v1", "description": "Production server"}, {"url": "https://api-test.sap.com/v1", "description": "Test server"}], "tags": [{"name": "Sales", "description": "Sales-related operations"}, {"name": "Finance", "description": "Finance-related operations"}, {"name": "HR", "description": "Human Resources operations"}, {"name": "Inventory", "description": "Inventory management operations"}], "paths": {"/sales/orders": {"get": {"summary": "List sales orders", "tags": ["Sales"], "parameters": [{"in": "query", "name": "status", "schema": {"type": "string", "enum": ["open", "closed", "cancelled"]}, "description": "Filter orders by status"}, {"in": "query", "name": "dateFrom", "schema": {"type": "string", "format": "date"}, "description": "Filter orders from this date"}, {"in": "query", "name": "dateTo", "schema": {"type": "string", "format": "date"}, "description": "Filter orders to this date"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/SalesOrder"}}}}}}}, "post": {"summary": "Create a new sales order", "tags": ["Sales"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SalesOrderInput"}}}}, "responses": {"201": {"description": "Sales order created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SalesOrder"}}}}}}}, "/sales/orders/{orderId}": {"get": {"summary": "Get a specific sales order", "tags": ["Sales"], "parameters": [{"in": "path", "name": "orderId", "required": true, "schema": {"type": "string"}, "description": "The ID of the sales order"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SalesOrder"}}}}, "404": {"description": "Sales order not found"}}}, "put": {"summary": "Update a sales order", "tags": ["Sales"], "parameters": [{"in": "path", "name": "orderId", "required": true, "schema": {"type": "string"}, "description": "The ID of the sales order"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SalesOrderInput"}}}}, "responses": {"200": {"description": "Sales order updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SalesOrder"}}}}, "404": {"description": "Sales order not found"}}}, "delete": {"summary": "Delete a sales order", "tags": ["Sales"], "parameters": [{"in": "path", "name": "orderId", "required": true, "schema": {"type": "string"}, "description": "The ID of the sales order"}], "responses": {"204": {"description": "Sales order deleted"}, "404": {"description": "Sales order not found"}}}}, "/finance/invoices": {"get": {"summary": "List invoices", "tags": ["Finance"], "parameters": [{"in": "query", "name": "status", "schema": {"type": "string", "enum": ["paid", "unpaid", "overdue"]}, "description": "Filter invoices by status"}, {"in": "query", "name": "dateFrom", "schema": {"type": "string", "format": "date"}, "description": "Filter invoices from this date"}, {"in": "query", "name": "dateTo", "schema": {"type": "string", "format": "date"}, "description": "Filter invoices to this date"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Invoice"}}}}}}}, "post": {"summary": "Create a new invoice", "tags": ["Finance"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvoiceInput"}}}}, "responses": {"201": {"description": "Invoice created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Invoice"}}}}}}}, "/finance/invoices/{invoiceId}": {"get": {"summary": "Get a specific invoice", "tags": ["Finance"], "parameters": [{"in": "path", "name": "invoiceId", "required": true, "schema": {"type": "string"}, "description": "The ID of the invoice"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Invoice"}}}}, "404": {"description": "Invoice not found"}}}, "put": {"summary": "Update an invoice", "tags": ["Finance"], "parameters": [{"in": "path", "name": "invoiceId", "required": true, "schema": {"type": "string"}, "description": "The ID of the invoice"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvoiceInput"}}}}, "responses": {"200": {"description": "Invoice updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Invoice"}}}}, "404": {"description": "Invoice not found"}}}}, "/hr/employees": {"get": {"summary": "List employees", "tags": ["HR"], "parameters": [{"in": "query", "name": "department", "schema": {"type": "string"}, "description": "Filter employees by department"}, {"in": "query", "name": "status", "schema": {"type": "string", "enum": ["active", "inactive", "onLeave"]}, "description": "Filter employees by status"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Employee"}}}}}}}, "post": {"summary": "Create a new employee", "tags": ["HR"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EmployeeInput"}}}}, "responses": {"201": {"description": "Employee created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Employee"}}}}}}}, "/hr/employees/{employeeId}": {"get": {"summary": "Get a specific employee", "tags": ["HR"], "parameters": [{"in": "path", "name": "employeeId", "required": true, "schema": {"type": "string"}, "description": "The ID of the employee"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Employee"}}}}, "404": {"description": "Employee not found"}}}, "put": {"summary": "Update an employee", "tags": ["HR"], "parameters": [{"in": "path", "name": "employeeId", "required": true, "schema": {"type": "string"}, "description": "The ID of the employee"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EmployeeInput"}}}}, "responses": {"200": {"description": "Employee updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Employee"}}}}, "404": {"description": "Employee not found"}}}}, "/inventory/products": {"get": {"summary": "List products", "tags": ["Inventory"], "parameters": [{"in": "query", "name": "category", "schema": {"type": "string"}, "description": "Filter products by category"}, {"in": "query", "name": "inStock", "schema": {"type": "boolean"}, "description": "Filter products by availability"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}}}}, "post": {"summary": "Create a new product", "tags": ["Inventory"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductInput"}}}}, "responses": {"201": {"description": "Product created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}}}}, "/inventory/products/{productId}": {"get": {"summary": "Get a specific product", "tags": ["Inventory"], "parameters": [{"in": "path", "name": "productId", "required": true, "schema": {"type": "string"}, "description": "The ID of the product"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}, "put": {"summary": "Update a product", "tags": ["Inventory"], "parameters": [{"in": "path", "name": "productId", "required": true, "schema": {"type": "string"}, "description": "The ID of the product"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductInput"}}}}, "responses": {"200": {"description": "Product updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}}}, "components": {"schemas": {"SalesOrder": {"type": "object", "properties": {"id": {"type": "string"}, "customerId": {"type": "string"}, "orderDate": {"type": "string", "format": "date-time"}, "status": {"type": "string", "enum": ["open", "closed", "cancelled"]}, "items": {"type": "array", "items": {"$ref": "#/components/schemas/OrderItem"}}, "totalAmount": {"type": "number"}}}, "SalesOrderInput": {"type": "object", "required": ["customerId", "items"], "properties": {"customerId": {"type": "string"}, "items": {"type": "array", "items": {"$ref": "#/components/schemas/OrderItem"}}}}, "OrderItem": {"type": "object", "properties": {"productId": {"type": "string"}, "quantity": {"type": "integer", "minimum": 1}, "unitPrice": {"type": "number"}}}, "Invoice": {"type": "object", "properties": {"id": {"type": "string"}, "customerId": {"type": "string"}, "orderId": {"type": "string"}, "invoiceDate": {"type": "string", "format": "date-time"}, "dueDate": {"type": "string", "format": "date-time"}, "status": {"type": "string", "enum": ["paid", "unpaid", "overdue"]}, "amount": {"type": "number"}}}, "InvoiceInput": {"type": "object", "required": ["customerId", "orderId", "amount"], "properties": {"customerId": {"type": "string"}, "orderId": {"type": "string"}, "amount": {"type": "number"}, "dueDate": {"type": "string", "format": "date-time"}}}, "Employee": {"type": "object", "properties": {"id": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string", "format": "email"}, "department": {"type": "string"}, "position": {"type": "string"}, "hireDate": {"type": "string", "format": "date"}, "status": {"type": "string", "enum": ["active", "inactive", "onLeave"]}}}, "EmployeeInput": {"type": "object", "required": ["firstName", "lastName", "email", "department", "position"], "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string", "format": "email"}, "department": {"type": "string"}, "position": {"type": "string"}, "hireDate": {"type": "string", "format": "date"}}}, "Product": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "category": {"type": "string"}, "price": {"type": "number"}, "inStock": {"type": "boolean"}, "quantity": {"type": "integer"}}}, "ProductInput": {"type": "object", "required": ["name", "category", "price"], "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "category": {"type": "string"}, "price": {"type": "number"}, "quantity": {"type": "integer"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}, "security": [{"bearerAuth": []}]}}, {"title": "Zillow API", "content": {"openapi": "3.0.0", "info": {"title": "Zillow API", "description": "API for accessing Zillow's real estate data and services", "version": "1.0.0", "contact": {"name": "Zillow API Support", "url": "https://www.zillow.com/api-support", "email": "api-support@zillow.com"}}, "servers": [{"url": "https://api.zillow.com/v1"}], "paths": {"/properties": {"get": {"summary": "Search for properties", "description": "Search for properties based on various criteria", "parameters": [{"name": "location", "in": "query", "description": "Location to search (city, state, zip code, or neighborhood)", "required": true, "schema": {"type": "string"}}, {"name": "min_price", "in": "query", "description": "Minimum price", "schema": {"type": "integer"}}, {"name": "max_price", "in": "query", "description": "Maximum price", "schema": {"type": "integer"}}, {"name": "bedrooms", "in": "query", "description": "Number of bedrooms", "schema": {"type": "integer"}}, {"name": "bathrooms", "in": "query", "description": "Number of bathrooms", "schema": {"type": "number"}}, {"name": "home_type", "in": "query", "description": "Type of home", "schema": {"type": "string", "enum": ["house", "apartment", "condo", "townhouse"]}}, {"name": "sort", "in": "query", "description": "Sort order", "schema": {"type": "string", "enum": ["price_asc", "price_desc", "date_asc", "date_desc"]}}, {"name": "page", "in": "query", "description": "Page number for pagination", "schema": {"type": "integer", "default": 1}}, {"name": "limit", "in": "query", "description": "Number of results per page", "schema": {"type": "integer", "default": 20, "maximum": 100}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PropertySearchResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "429": {"description": "Too many requests"}, "500": {"description": "Internal server error"}}}}, "/properties/{zpid}": {"get": {"summary": "Get property details", "description": "Retrieve detailed information about a specific property", "parameters": [{"name": "zpid", "in": "path", "description": "Zillow Property ID", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PropertyDetails"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Property not found"}, "429": {"description": "Too many requests"}, "500": {"description": "Internal server error"}}}}, "/zestimate/{zpid}": {"get": {"summary": "Get Zestimate", "description": "Retrieve Zillow's estimated market value for a property", "parameters": [{"name": "zpid", "in": "path", "description": "Zillow Property ID", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Zestimate"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Property not found"}, "429": {"description": "Too many requests"}, "500": {"description": "Internal server error"}}}}, "/mortgage/rates": {"get": {"summary": "Get mortgage rates", "description": "Retrieve current mortgage rates", "parameters": [{"name": "loan_type", "in": "query", "description": "Type of loan", "schema": {"type": "string", "enum": ["30-year-fixed", "15-year-fixed", "5-1-arm"]}}, {"name": "credit_score", "in": "query", "description": "Credit score range", "schema": {"type": "string", "enum": ["excellent", "good", "fair", "poor"]}}, {"name": "loan_amount", "in": "query", "description": "Loan amount", "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MortgageRates"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "429": {"description": "Too many requests"}, "500": {"description": "Internal server error"}}}}, "/mortgage/calculator": {"post": {"summary": "Calculate mortgage payments", "description": "Calculate estimated mortgage payments based on input parameters", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MortgageCalculatorInput"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MortgageCalculatorOutput"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "429": {"description": "Too many requests"}, "500": {"description": "Internal server error"}}}}, "/agents": {"get": {"summary": "Search for agents", "description": "Search for real estate agents in a specific area", "parameters": [{"name": "location", "in": "query", "description": "Location to search (city, state, or zip code)", "required": true, "schema": {"type": "string"}}, {"name": "specialization", "in": "query", "description": "Agent specialization", "schema": {"type": "string", "enum": ["buyer", "seller", "both"]}}, {"name": "page", "in": "query", "description": "Page number for pagination", "schema": {"type": "integer", "default": 1}}, {"name": "limit", "in": "query", "description": "Number of results per page", "schema": {"type": "integer", "default": 20, "maximum": 50}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AgentSearchResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "429": {"description": "Too many requests"}, "500": {"description": "Internal server error"}}}}}, "components": {"schemas": {"PropertySearchResponse": {"type": "object", "properties": {"total_results": {"type": "integer"}, "page": {"type": "integer"}, "limit": {"type": "integer"}, "properties": {"type": "array", "items": {"$ref": "#/components/schemas/PropertySummary"}}}}, "PropertySummary": {"type": "object", "properties": {"zpid": {"type": "string"}, "address": {"type": "string"}, "price": {"type": "integer"}, "bedrooms": {"type": "integer"}, "bathrooms": {"type": "number"}, "home_type": {"type": "string"}, "square_feet": {"type": "integer"}, "lot_size": {"type": "number"}, "year_built": {"type": "integer"}, "days_on_zillow": {"type": "integer"}, "thumbnail_url": {"type": "string"}}}, "PropertyDetails": {"type": "object", "properties": {"zpid": {"type": "string"}, "address": {"type": "string"}, "price": {"type": "integer"}, "bedrooms": {"type": "integer"}, "bathrooms": {"type": "number"}, "home_type": {"type": "string"}, "description": {"type": "string"}, "square_feet": {"type": "integer"}, "lot_size": {"type": "number"}, "year_built": {"type": "integer"}, "days_on_zillow": {"type": "integer"}, "zestimate": {"type": "integer"}, "rent_zestimate": {"type": "integer"}, "features": {"type": "array", "items": {"type": "string"}}, "schools": {"type": "array", "items": {"$ref": "#/components/schemas/School"}}, "photos": {"type": "array", "items": {"type": "string"}}, "tax_history": {"type": "array", "items": {"$ref": "#/components/schemas/TaxHistory"}}, "price_history": {"type": "array", "items": {"$ref": "#/components/schemas/PriceHistory"}}}}, "School": {"type": "object", "properties": {"name": {"type": "string"}, "type": {"type": "string"}, "grades": {"type": "string"}, "rating": {"type": "integer"}, "distance": {"type": "number"}}}, "TaxHistory": {"type": "object", "properties": {"year": {"type": "integer"}, "tax_amount": {"type": "number"}, "assessed_value": {"type": "integer"}}}, "PriceHistory": {"type": "object", "properties": {"date": {"type": "string", "format": "date"}, "price": {"type": "integer"}, "event": {"type": "string"}}}, "Zestimate": {"type": "object", "properties": {"zpid": {"type": "string"}, "zestimate": {"type": "integer"}, "rent_zestimate": {"type": "integer"}, "valuation_range": {"type": "object", "properties": {"low": {"type": "integer"}, "high": {"type": "integer"}}}, "last_updated": {"type": "string", "format": "date-time"}}}, "MortgageRates": {"type": "object", "properties": {"loan_type": {"type": "string"}, "rate": {"type": "number"}, "apr": {"type": "number"}}}, "MortgageCalculatorInput": {"type": "object", "properties": {"home_price": {"type": "integer"}, "down_payment": {"type": "integer"}, "loan_term": {"type": "integer"}, "interest_rate": {"type": "number"}, "property_tax": {"type": "number"}, "home_insurance": {"type": "number"}, "hoa_fees": {"type": "number"}}, "required": ["home_price", "down_payment", "loan_term", "interest_rate"]}, "MortgageCalculatorOutput": {"type": "object", "properties": {"monthly_payment": {"type": "number"}, "principal_and_interest": {"type": "number"}, "property_tax": {"type": "number"}, "home_insurance": {"type": "number"}, "hoa_fees": {"type": "number"}, "total_payment": {"type": "number"}, "amortization_schedule": {"type": "array", "items": {"$ref": "#/components/schemas/AmortizationEntry"}}}}, "AmortizationEntry": {"type": "object", "properties": {"month": {"type": "integer"}, "balance": {"type": "number"}, "principal_payment": {"type": "number"}, "interest_payment": {"type": "number"}, "total_payment": {"type": "number"}}}, "AgentSearchResponse": {"type": "object", "properties": {"total_results": {"type": "integer"}, "page": {"type": "integer"}, "limit": {"type": "integer"}, "agents": {"type": "array", "items": {"$ref": "#/components/schemas/Agent"}}}}, "Agent": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "photo_url": {"type": "string"}, "brokerage": {"type": "string"}, "phone": {"type": "string"}, "email": {"type": "string"}, "specialization": {"type": "string"}, "years_of_experience": {"type": "integer"}, "active_listings": {"type": "integer"}, "recent_sales": {"type": "integer"}, "rating": {"type": "number"}, "review_count": {"type": "integer"}}}}, "securitySchemes": {"ApiKeyAuth": {"type": "apiKey", "in": "header", "name": "X-API-Key"}}}, "security": [{"ApiKeyAuth": []}]}}, {"title": "Dropbox API", "content": {"openapi": "3.0.0", "info": {"title": "Dropbox API", "description": "The Dropbox API allows developers to integrate Dropbox functionality into their applications.", "version": "2.0.0", "contact": {"name": "Dropbox API Support", "url": "https://www.dropbox.com/developers/support"}}, "servers": [{"url": "https://api.dropboxapi.com/2"}], "paths": {"/files/list_folder": {"post": {"summary": "List folder contents", "description": "Returns the contents of a folder.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListFolderRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListFolderResult"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["files.metadata.read"]}]}}, "/files/upload": {"post": {"summary": "Upload file", "description": "Upload a file to a user's Dropbox.", "requestBody": {"required": true, "content": {"application/octet-stream": {"schema": {"type": "string", "format": "binary"}}}}, "parameters": [{"name": "Dropbox-API-Arg", "in": "header", "required": true, "schema": {"$ref": "#/components/schemas/UploadArg"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FileMetadata"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["files.content.write"]}]}}, "/files/download": {"post": {"summary": "Download file", "description": "Download a file from a user's Dropbox.", "parameters": [{"name": "Dropbox-API-Arg", "in": "header", "required": true, "schema": {"$ref": "#/components/schemas/DownloadArg"}}], "responses": {"200": {"description": "Successful response", "content": {"application/octet-stream": {"schema": {"type": "string", "format": "binary"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["files.content.read"]}]}}, "/files/delete_v2": {"post": {"summary": "Delete file", "description": "Delete a file or folder.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteArg"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteResult"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["files.content.write"]}]}}, "/files/create_folder_v2": {"post": {"summary": "Create folder", "description": "Create a folder at a given path.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateFolderArg"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateFolderResult"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}, "security": [{"oauth2": ["files.content.write"]}]}}}, "components": {"schemas": {"ListFolderRequest": {"type": "object", "properties": {"path": {"type": "string", "description": "The path to the folder you want to see the contents of."}, "recursive": {"type": "boolean", "description": "If true, the list folder operation will be applied recursively to all subfolders."}, "include_media_info": {"type": "boolean", "description": "If true, FileMetadata.media_info is set for photo and video."}}, "required": ["path"]}, "ListFolderResult": {"type": "object", "properties": {"entries": {"type": "array", "items": {"$ref": "#/components/schemas/Metadata"}}, "cursor": {"type": "string"}, "has_more": {"type": "boolean"}}}, "Metadata": {"type": "object", "properties": {".tag": {"type": "string", "enum": ["file", "folder", "deleted"]}, "name": {"type": "string"}, "path_lower": {"type": "string"}, "path_display": {"type": "string"}, "id": {"type": "string"}}}, "FileMetadata": {"allOf": [{"$ref": "#/components/schemas/Metadata"}, {"type": "object", "properties": {"client_modified": {"type": "string", "format": "date-time"}, "server_modified": {"type": "string", "format": "date-time"}, "rev": {"type": "string"}, "size": {"type": "integer"}, "media_info": {"type": "object"}}}]}, "UploadArg": {"type": "object", "properties": {"path": {"type": "string", "description": "Path in the user's Dropbox to save the file."}, "mode": {"type": "string", "enum": ["add", "overwrite", "update"], "default": "add"}, "autorename": {"type": "boolean", "default": false}, "client_modified": {"type": "string", "format": "date-time"}, "mute": {"type": "boolean", "default": false}}, "required": ["path"]}, "DownloadArg": {"type": "object", "properties": {"path": {"type": "string", "description": "The path of the file to download."}}, "required": ["path"]}, "DeleteArg": {"type": "object", "properties": {"path": {"type": "string", "description": "Path in the user's Dropbox to delete."}}, "required": ["path"]}, "DeleteResult": {"type": "object", "properties": {"metadata": {"$ref": "#/components/schemas/Metadata"}}}, "CreateFolderArg": {"type": "object", "properties": {"path": {"type": "string", "description": "Path in the user's Dropbox to create."}, "autorename": {"type": "boolean", "default": false}}, "required": ["path"]}, "CreateFolderResult": {"type": "object", "properties": {"metadata": {"$ref": "#/components/schemas/FolderMetadata"}}}, "FolderMetadata": {"allOf": [{"$ref": "#/components/schemas/Metadata"}, {"type": "object", "properties": {"id": {"type": "string"}, "shared_folder_id": {"type": "string"}}}]}, "Error": {"type": "object", "properties": {"error_summary": {"type": "string"}, "error": {"type": "object"}}}}, "securitySchemes": {"oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://www.dropbox.com/oauth2/authorize", "tokenUrl": "https://api.dropboxapi.com/oauth2/token", "scopes": {"files.metadata.read": "Read file and folder metadata", "files.content.read": "Read files", "files.content.write": "Create, modify, and delete files"}}}}}}}}, {"title": "CrowdStrike API", "content": {"openapi": "3.0.0", "info": {"title": "CrowdStrike API", "description": "API for interacting with CrowdStrike Falcon platform", "version": "1.0.0", "contact": {"name": "CrowdStrike Support", "url": "https://www.crowdstrike.com/support/", "email": "support@crowdstrike.com"}}, "servers": [{"url": "https://api.crowdstrike.com/v1"}], "paths": {"/devices": {"get": {"summary": "Get a list of devices", "description": "Retrieve a list of devices registered with CrowdStrike Falcon", "operationId": "listDevices", "parameters": [{"name": "limit", "in": "query", "description": "Maximum number of devices to return", "schema": {"type": "integer", "default": 100}}, {"name": "offset", "in": "query", "description": "Offset for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceList"}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}, "security": [{"BearerAuth": []}]}}, "/devices/{device_id}": {"get": {"summary": "Get device details", "description": "Retrieve details for a specific device", "operationId": "getDevice", "parameters": [{"name": "device_id", "in": "path", "required": true, "description": "Unique identifier of the device", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Device"}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}, "404": {"description": "Device not found"}}, "security": [{"BearerAuth": []}]}}, "/detects": {"get": {"summary": "Get a list of detections", "description": "Retrieve a list of detections from CrowdStrike Falcon", "operationId": "listDetections", "parameters": [{"name": "limit", "in": "query", "description": "Maximum number of detections to return", "schema": {"type": "integer", "default": 100}}, {"name": "offset", "in": "query", "description": "Offset for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetectionList"}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}, "security": [{"BearerAuth": []}]}}, "/incidents": {"get": {"summary": "Get a list of incidents", "description": "Retrieve a list of incidents from CrowdStrike Falcon", "operationId": "listIncidents", "parameters": [{"name": "limit", "in": "query", "description": "Maximum number of incidents to return", "schema": {"type": "integer", "default": 100}}, {"name": "offset", "in": "query", "description": "Offset for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}, "security": [{"BearerAuth": []}]}}, "/intel/indicators": {"get": {"summary": "Get a list of threat indicators", "description": "Retrieve a list of threat indicators from CrowdStrike Falcon Intel", "operationId": "listThreatIndicators", "parameters": [{"name": "limit", "in": "query", "description": "Maximum number of indicators to return", "schema": {"type": "integer", "default": 100}}, {"name": "offset", "in": "query", "description": "Offset for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ThreatIndicatorList"}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}, "security": [{"BearerAuth": []}]}}}, "components": {"schemas": {"Device": {"type": "object", "properties": {"device_id": {"type": "string"}, "hostname": {"type": "string"}, "local_ip": {"type": "string"}, "external_ip": {"type": "string"}, "mac_address": {"type": "string"}, "os_version": {"type": "string"}, "first_seen": {"type": "string", "format": "date-time"}, "last_seen": {"type": "string", "format": "date-time"}, "status": {"type": "string", "enum": ["active", "inactive"]}}}, "DeviceList": {"type": "object", "properties": {"resources": {"type": "array", "items": {"$ref": "#/components/schemas/Device"}}, "meta": {"$ref": "#/components/schemas/Meta"}}}, "Detection": {"type": "object", "properties": {"detection_id": {"type": "string"}, "device_id": {"type": "string"}, "severity": {"type": "string", "enum": ["low", "medium", "high", "critical"]}, "status": {"type": "string", "enum": ["new", "in_progress", "true_positive", "false_positive", "closed"]}, "technique": {"type": "string"}, "description": {"type": "string"}, "detection_time": {"type": "string", "format": "date-time"}}}, "DetectionList": {"type": "object", "properties": {"resources": {"type": "array", "items": {"$ref": "#/components/schemas/Detection"}}, "meta": {"$ref": "#/components/schemas/Meta"}}}, "Incident": {"type": "object", "properties": {"incident_id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "status": {"type": "string", "enum": ["new", "in_progress", "resolved", "closed"]}, "severity": {"type": "string", "enum": ["low", "medium", "high", "critical"]}, "created_time": {"type": "string", "format": "date-time"}, "updated_time": {"type": "string", "format": "date-time"}}}, "IncidentList": {"type": "object", "properties": {"resources": {"type": "array", "items": {"$ref": "#/components/schemas/Incident"}}, "meta": {"$ref": "#/components/schemas/Meta"}}}, "ThreatIndicator": {"type": "object", "properties": {"indicator_id": {"type": "string"}, "type": {"type": "string", "enum": ["ip", "domain", "hash", "url"]}, "value": {"type": "string"}, "severity": {"type": "string", "enum": ["low", "medium", "high"]}, "confidence": {"type": "integer", "minimum": 1, "maximum": 100}, "published_date": {"type": "string", "format": "date-time"}, "last_updated": {"type": "string", "format": "date-time"}}}, "ThreatIndicatorList": {"type": "object", "properties": {"resources": {"type": "array", "items": {"$ref": "#/components/schemas/ThreatIndicator"}}, "meta": {"$ref": "#/components/schemas/Meta"}}}, "Meta": {"type": "object", "properties": {"total": {"type": "integer"}, "limit": {"type": "integer"}, "offset": {"type": "integer"}}}}, "securitySchemes": {"BearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "Twitter API", "content": {"openapi": "3.0.0", "info": {"title": "Twitter API", "description": "API for interacting with Twitter", "version": "2.0.0", "contact": {"name": "Twitter Developer Support", "url": "https://developer.twitter.com/en/support"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "https://api.twitter.com/2"}], "paths": {"/tweets": {"post": {"summary": "Create a Tweet", "operationId": "createTweet", "tags": ["Tweets"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateTweetRequest"}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tweet"}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}, "security": [{"BearerAuth": []}]}, "get": {"summary": "Search Tweets", "operationId": "searchTweets", "tags": ["Tweets"], "parameters": [{"name": "query", "in": "query", "description": "Search query", "required": true, "schema": {"type": "string"}}, {"name": "max_results", "in": "query", "description": "Maximum number of results to return", "schema": {"type": "integer", "maximum": 100, "default": 10}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tweet"}}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"BearerAuth": []}]}}, "/tweets/{id}": {"get": {"summary": "Get a Tweet", "operationId": "getTweet", "tags": ["Tweets"], "parameters": [{"name": "id", "in": "path", "description": "Tweet ID", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tweet"}}}}, "404": {"description": "Tweet not found"}}, "security": [{"BearerAuth": []}]}, "delete": {"summary": "Delete a Tweet", "operationId": "deleteTweet", "tags": ["Tweets"], "parameters": [{"name": "id", "in": "path", "description": "Tweet ID", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Tweet deleted successfully"}, "401": {"description": "Unauthorized"}, "404": {"description": "Tweet not found"}}, "security": [{"BearerAuth": []}]}}, "/users/{id}": {"get": {"summary": "Get a user", "operationId": "getUser", "tags": ["Users"], "parameters": [{"name": "id", "in": "path", "description": "User ID", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}, "security": [{"BearerAuth": []}]}}, "/users/{id}/tweets": {"get": {"summary": "Get user's Tweets", "operationId": "getUserTweets", "tags": ["Users", "Tweets"], "parameters": [{"name": "id", "in": "path", "description": "User ID", "required": true, "schema": {"type": "string"}}, {"name": "max_results", "in": "query", "description": "Maximum number of results to return", "schema": {"type": "integer", "maximum": 100, "default": 10}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tweet"}}}}}, "404": {"description": "User not found"}}, "security": [{"BearerAuth": []}]}}, "/users/{id}/followers": {"get": {"summary": "Get user's followers", "operationId": "getUserFollowers", "tags": ["Users"], "parameters": [{"name": "id", "in": "path", "description": "User ID", "required": true, "schema": {"type": "string"}}, {"name": "max_results", "in": "query", "description": "Maximum number of results to return", "schema": {"type": "integer", "maximum": 1000, "default": 100}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}, "404": {"description": "User not found"}}, "security": [{"BearerAuth": []}]}}, "/users/{id}/following": {"get": {"summary": "Get users the specified user is following", "operationId": "getUserFollowing", "tags": ["Users"], "parameters": [{"name": "id", "in": "path", "description": "User ID", "required": true, "schema": {"type": "string"}}, {"name": "max_results", "in": "query", "description": "Maximum number of results to return", "schema": {"type": "integer", "maximum": 1000, "default": 100}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}, "404": {"description": "User not found"}}, "security": [{"BearerAuth": []}]}}}, "components": {"schemas": {"Tweet": {"type": "object", "properties": {"id": {"type": "string"}, "text": {"type": "string"}, "author_id": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "public_metrics": {"type": "object", "properties": {"retweet_count": {"type": "integer"}, "reply_count": {"type": "integer"}, "like_count": {"type": "integer"}, "quote_count": {"type": "integer"}}}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "username": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "description": {"type": "string"}, "public_metrics": {"type": "object", "properties": {"followers_count": {"type": "integer"}, "following_count": {"type": "integer"}, "tweet_count": {"type": "integer"}, "listed_count": {"type": "integer"}}}}}, "CreateTweetRequest": {"type": "object", "required": ["text"], "properties": {"text": {"type": "string", "maxLength": 280}, "reply": {"type": "object", "properties": {"in_reply_to_tweet_id": {"type": "string"}}}, "media": {"type": "object", "properties": {"media_ids": {"type": "array", "items": {"type": "string"}}}}}}}, "securitySchemes": {"BearerAuth": {"type": "http", "scheme": "bearer"}}}}}, {"title": "GitHub API", "content": {"openapi": "3.0.0", "info": {"title": "GitHub API", "description": "The official REST API for GitHub", "version": "1.0.0", "contact": {"name": "GitHub Support", "url": "https://support.github.com"}, "license": {"name": "MIT", "url": "https://opensource.org/licenses/MIT"}}, "servers": [{"url": "https://api.github.com/v3"}], "paths": {"/user": {"get": {"summary": "Get authenticated user", "description": "Provides information about the authenticated user.", "tags": ["Users"], "security": [{"bearerAuth": []}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Unauthorized"}}}, "patch": {"summary": "Update authenticated user", "description": "Update the authenticated user's information.", "tags": ["Users"], "security": [{"bearerAuth": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Unauthorized"}}}}, "/users/{username}": {"get": {"summary": "Get a user", "description": "Provides publicly available information about someone with a GitHub account.", "tags": ["Users"], "parameters": [{"name": "username", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found"}}}}, "/repos/{owner}/{repo}": {"get": {"summary": "Get a repository", "description": "Get details about a repository.", "tags": ["Repositories"], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "repo", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Repository"}}}}, "404": {"description": "Repository not found"}}}}, "/repos/{owner}/{repo}/issues": {"get": {"summary": "List repository issues", "description": "List issues for a repository.", "tags": ["Issues"], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "repo", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "query", "schema": {"type": "string", "enum": ["open", "closed", "all"], "default": "open"}}, {"name": "per_page", "in": "query", "schema": {"type": "integer", "default": 30}}, {"name": "page", "in": "query", "schema": {"type": "integer", "default": 1}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Issue"}}}}}}}, "post": {"summary": "Create an issue", "description": "Create a new issue in a repository.", "tags": ["Issues"], "security": [{"bearerAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "repo", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IssueCreate"}}}}, "responses": {"201": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Issue"}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}}}}, "components": {"securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}, "schemas": {"User": {"type": "object", "properties": {"login": {"type": "string"}, "id": {"type": "integer"}, "node_id": {"type": "string"}, "avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "url": {"type": "string"}, "html_url": {"type": "string"}, "followers_url": {"type": "string"}, "following_url": {"type": "string"}, "gists_url": {"type": "string"}, "starred_url": {"type": "string"}, "subscriptions_url": {"type": "string"}, "organizations_url": {"type": "string"}, "repos_url": {"type": "string"}, "events_url": {"type": "string"}, "received_events_url": {"type": "string"}, "type": {"type": "string"}, "site_admin": {"type": "boolean"}, "name": {"type": "string"}, "company": {"type": "string"}, "blog": {"type": "string"}, "location": {"type": "string"}, "email": {"type": "string"}, "hireable": {"type": "boolean"}, "bio": {"type": "string"}, "twitter_username": {"type": "string"}, "public_repos": {"type": "integer"}, "public_gists": {"type": "integer"}, "followers": {"type": "integer"}, "following": {"type": "integer"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}}}, "UserUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "email": {"type": "string"}, "blog": {"type": "string"}, "company": {"type": "string"}, "location": {"type": "string"}, "hireable": {"type": "boolean"}, "bio": {"type": "string"}}}, "Repository": {"type": "object", "properties": {"id": {"type": "integer"}, "node_id": {"type": "string"}, "name": {"type": "string"}, "full_name": {"type": "string"}, "private": {"type": "boolean"}, "owner": {"$ref": "#/components/schemas/User"}, "html_url": {"type": "string"}, "description": {"type": "string"}, "fork": {"type": "boolean"}, "url": {"type": "string"}, "forks_url": {"type": "string"}, "keys_url": {"type": "string"}, "collaborators_url": {"type": "string"}, "teams_url": {"type": "string"}, "hooks_url": {"type": "string"}, "issue_events_url": {"type": "string"}, "events_url": {"type": "string"}, "assignees_url": {"type": "string"}, "branches_url": {"type": "string"}, "tags_url": {"type": "string"}, "blobs_url": {"type": "string"}, "git_tags_url": {"type": "string"}, "git_refs_url": {"type": "string"}, "trees_url": {"type": "string"}, "statuses_url": {"type": "string"}, "languages_url": {"type": "string"}, "stargazers_url": {"type": "string"}, "contributors_url": {"type": "string"}, "subscribers_url": {"type": "string"}, "subscription_url": {"type": "string"}, "commits_url": {"type": "string"}, "git_commits_url": {"type": "string"}, "comments_url": {"type": "string"}, "issue_comment_url": {"type": "string"}, "contents_url": {"type": "string"}, "compare_url": {"type": "string"}, "merges_url": {"type": "string"}, "archive_url": {"type": "string"}, "downloads_url": {"type": "string"}, "issues_url": {"type": "string"}, "pulls_url": {"type": "string"}, "milestones_url": {"type": "string"}, "notifications_url": {"type": "string"}, "labels_url": {"type": "string"}, "releases_url": {"type": "string"}, "deployments_url": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}, "pushed_at": {"type": "string", "format": "date-time"}, "git_url": {"type": "string"}, "ssh_url": {"type": "string"}, "clone_url": {"type": "string"}, "svn_url": {"type": "string"}, "homepage": {"type": "string"}, "size": {"type": "integer"}, "stargazers_count": {"type": "integer"}, "watchers_count": {"type": "integer"}, "language": {"type": "string"}, "has_issues": {"type": "boolean"}, "has_projects": {"type": "boolean"}, "has_downloads": {"type": "boolean"}, "has_wiki": {"type": "boolean"}, "has_pages": {"type": "boolean"}, "forks_count": {"type": "integer"}, "mirror_url": {"type": "string"}, "archived": {"type": "boolean"}, "disabled": {"type": "boolean"}, "open_issues_count": {"type": "integer"}, "license": {"type": "object", "properties": {"key": {"type": "string"}, "name": {"type": "string"}, "spdx_id": {"type": "string"}, "url": {"type": "string"}, "node_id": {"type": "string"}}}, "forks": {"type": "integer"}, "open_issues": {"type": "integer"}, "watchers": {"type": "integer"}, "default_branch": {"type": "string"}}}, "Issue": {"type": "object", "properties": {"url": {"type": "string"}, "repository_url": {"type": "string"}, "labels_url": {"type": "string"}, "comments_url": {"type": "string"}, "events_url": {"type": "string"}, "html_url": {"type": "string"}, "id": {"type": "integer"}, "node_id": {"type": "string"}, "number": {"type": "integer"}, "title": {"type": "string"}, "user": {"$ref": "#/components/schemas/User"}, "labels": {"type": "array", "items": {"type": "object", "properties": {"id": {"type": "integer"}, "node_id": {"type": "string"}, "url": {"type": "string"}, "name": {"type": "string"}, "color": {"type": "string"}, "default": {"type": "boolean"}, "description": {"type": "string"}}}}, "state": {"type": "string", "enum": ["open", "closed"]}, "locked": {"type": "boolean"}, "assignee": {"$ref": "#/components/schemas/User"}, "assignees": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}, "milestone": {"type": "object", "properties": {"url": {"type": "string"}, "html_url": {"type": "string"}, "labels_url": {"type": "string"}, "id": {"type": "integer"}, "node_id": {"type": "string"}, "number": {"type": "integer"}, "title": {"type": "string"}, "description": {"type": "string"}, "creator": {"$ref": "#/components/schemas/User"}, "open_issues": {"type": "integer"}, "closed_issues": {"type": "integer"}, "state": {"type": "string", "enum": ["open", "closed"]}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}, "due_on": {"type": "string", "format": "date-time"}, "closed_at": {"type": "string", "format": "date-time"}}}, "comments": {"type": "integer"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}, "closed_at": {"type": "string", "format": "date-time"}, "author_association": {"type": "string"}, "active_lock_reason": {"type": "string"}, "body": {"type": "string"}, "reactions": {"type": "object", "properties": {"url": {"type": "string"}, "total_count": {"type": "integer"}, "+1": {"type": "integer"}, "-1": {"type": "integer"}, "laugh": {"type": "integer"}, "hooray": {"type": "integer"}, "confused": {"type": "integer"}, "heart": {"type": "integer"}, "rocket": {"type": "integer"}, "eyes": {"type": "integer"}}}, "timeline_url": {"type": "string"}, "performed_via_github_app": {"type": "object"}, "state_reason": {"type": "string"}}}, "IssueCreate": {"type": "object", "required": ["title"], "properties": {"title": {"type": "string"}, "body": {"type": "string"}, "assignees": {"type": "array", "items": {"type": "string"}}, "milestone": {"type": "integer"}, "labels": {"type": "array", "items": {"type": "string"}}}}}}}}, {"title": "Zoom API", "content": {"openapi": "3.0.0", "info": {"title": "Zoom API", "description": "API for interacting with Zoom's video conferencing platform", "version": "2.0.0", "contact": {"name": "Zoom Support", "url": "https://support.zoom.us/hc/en-us", "email": "support@zoom.us"}}, "servers": [{"url": "https://api.zoom.us/v2"}], "paths": {"/users": {"get": {"summary": "List users", "description": "List all users on your account", "parameters": [{"name": "status", "in": "query", "schema": {"type": "string", "enum": ["active", "inactive", "pending"]}}, {"name": "page_size", "in": "query", "schema": {"type": "integer", "minimum": 1, "maximum": 300}}, {"name": "page_number", "in": "query", "schema": {"type": "integer", "minimum": 1}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}}}}, "post": {"summary": "Create a user", "description": "Create a new user on your account", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"201": {"description": "User created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}}, "/users/{userId}": {"get": {"summary": "Get a user", "description": "Retrieve a user's information", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}, "patch": {"summary": "Update a user", "description": "Update a user's information", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"204": {"description": "User updated successfully"}}}, "delete": {"summary": "Delete a user", "description": "Delete a user from your account", "parameters": [{"name": "userId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "User deleted successfully"}}}}, "/meetings": {"get": {"summary": "List meetings", "description": "List all meetings for a user", "parameters": [{"name": "user_id", "in": "query", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "query", "schema": {"type": "string", "enum": ["scheduled", "live", "upcoming"]}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MeetingList"}}}}}}, "post": {"summary": "Create a meeting", "description": "Create a new meeting", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MeetingCreate"}}}}, "responses": {"201": {"description": "Meeting created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Meeting"}}}}}}}, "/meetings/{meetingId}": {"get": {"summary": "Get a meeting", "description": "Retrieve a meeting's information", "parameters": [{"name": "meetingId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Meeting"}}}}}}, "patch": {"summary": "Update a meeting", "description": "Update a meeting's information", "parameters": [{"name": "meetingId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MeetingUpdate"}}}}, "responses": {"204": {"description": "Meeting updated successfully"}}}, "delete": {"summary": "Delete a meeting", "description": "Delete a meeting", "parameters": [{"name": "meetingId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Meeting deleted successfully"}}}}, "/webinars": {"get": {"summary": "List webinars", "description": "List all webinars for a user", "parameters": [{"name": "user_id", "in": "query", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WebinarList"}}}}}}, "post": {"summary": "Create a webinar", "description": "Create a new webinar", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WebinarCreate"}}}}, "responses": {"201": {"description": "Webinar created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Webinar"}}}}}}}, "/webinars/{webinarId}": {"get": {"summary": "Get a webinar", "description": "Retrieve a webinar's information", "parameters": [{"name": "webinarId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Webinar"}}}}}}, "patch": {"summary": "Update a webinar", "description": "Update a webinar's information", "parameters": [{"name": "webinarId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WebinarUpdate"}}}}, "responses": {"204": {"description": "Webinar updated successfully"}}}, "delete": {"summary": "Delete a webinar", "description": "Delete a webinar", "parameters": [{"name": "webinarId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Webinar deleted successfully"}}}}}, "components": {"schemas": {"User": {"type": "object", "properties": {"id": {"type": "string"}, "first_name": {"type": "string"}, "last_name": {"type": "string"}, "email": {"type": "string"}, "type": {"type": "integer"}, "pmi": {"type": "string"}, "timezone": {"type": "string"}, "verified": {"type": "integer"}, "created_at": {"type": "string", "format": "date-time"}, "last_login_time": {"type": "string", "format": "date-time"}, "language": {"type": "string"}, "status": {"type": "string"}}}, "UserCreate": {"type": "object", "required": ["action", "user_info"], "properties": {"action": {"type": "string", "enum": ["create", "autoCreate", "custCreate", "ssoCreate"]}, "user_info": {"type": "object", "required": ["email", "type", "first_name", "last_name"], "properties": {"email": {"type": "string"}, "type": {"type": "integer", "enum": [1, 2, 3]}, "first_name": {"type": "string"}, "last_name": {"type": "string"}}}}}, "UserUpdate": {"type": "object", "properties": {"first_name": {"type": "string"}, "last_name": {"type": "string"}, "type": {"type": "integer", "enum": [1, 2, 3]}, "pmi": {"type": "string"}, "timezone": {"type": "string"}, "language": {"type": "string"}}}, "UserList": {"type": "object", "properties": {"page_count": {"type": "integer"}, "page_number": {"type": "integer"}, "page_size": {"type": "integer"}, "total_records": {"type": "integer"}, "users": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "Meeting": {"type": "object", "properties": {"id": {"type": "string"}, "topic": {"type": "string"}, "type": {"type": "integer"}, "start_time": {"type": "string", "format": "date-time"}, "duration": {"type": "integer"}, "timezone": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "join_url": {"type": "string"}, "agenda": {"type": "string"}, "settings": {"type": "object"}}}, "MeetingCreate": {"type": "object", "required": ["topic", "type", "start_time", "duration"], "properties": {"topic": {"type": "string"}, "type": {"type": "integer", "enum": [1, 2, 3, 8]}, "start_time": {"type": "string", "format": "date-time"}, "duration": {"type": "integer"}, "timezone": {"type": "string"}, "agenda": {"type": "string"}, "settings": {"type": "object"}}}, "MeetingUpdate": {"type": "object", "properties": {"topic": {"type": "string"}, "type": {"type": "integer", "enum": [1, 2, 3, 8]}, "start_time": {"type": "string", "format": "date-time"}, "duration": {"type": "integer"}, "timezone": {"type": "string"}, "agenda": {"type": "string"}, "settings": {"type": "object"}}}, "MeetingList": {"type": "object", "properties": {"page_count": {"type": "integer"}, "page_number": {"type": "integer"}, "page_size": {"type": "integer"}, "total_records": {"type": "integer"}, "meetings": {"type": "array", "items": {"$ref": "#/components/schemas/Meeting"}}}}, "Webinar": {"type": "object", "properties": {"id": {"type": "string"}, "topic": {"type": "string"}, "type": {"type": "integer"}, "start_time": {"type": "string", "format": "date-time"}, "duration": {"type": "integer"}, "timezone": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "join_url": {"type": "string"}, "agenda": {"type": "string"}, "settings": {"type": "object"}}}, "WebinarCreate": {"type": "object", "required": ["topic", "type", "start_time", "duration"], "properties": {"topic": {"type": "string"}, "type": {"type": "integer", "enum": [5, 6, 9]}, "start_time": {"type": "string", "format": "date-time"}, "duration": {"type": "integer"}, "timezone": {"type": "string"}, "agenda": {"type": "string"}, "settings": {"type": "object"}}}, "WebinarUpdate": {"type": "object", "properties": {"topic": {"type": "string"}, "type": {"type": "integer", "enum": [5, 6, 9]}, "start_time": {"type": "string", "format": "date-time"}, "duration": {"type": "integer"}, "timezone": {"type": "string"}, "agenda": {"type": "string"}, "settings": {"type": "object"}}}, "WebinarList": {"type": "object", "properties": {"page_count": {"type": "integer"}, "page_number": {"type": "integer"}, "page_size": {"type": "integer"}, "total_records": {"type": "integer"}, "webinars": {"type": "array", "items": {"$ref": "#/components/schemas/Webinar"}}}}}, "securitySchemes": {"OAuth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://zoom.us/oauth/authorize", "tokenUrl": "https://zoom.us/oauth/token", "scopes": {"user:read": "Read user's profile information", "user:write": "Edit user's profile information", "meeting:read": "View user's meetings", "meeting:write": "Create and edit user's meetings", "webinar:read": "View user's webinars", "webinar:write": "Create and edit user's webinars"}}}}}}, "security": [{"OAuth2": []}]}}, {"title": "New Relic API", "content": {"openapi": "3.0.0", "info": {"title": "New Relic API", "description": "API for interacting with New Relic's observability platform", "version": "1.0.0", "contact": {"name": "New Relic Support", "url": "https://support.newrelic.com", "email": "support@newrelic.com"}}, "servers": [{"url": "https://api.newrelic.com/v2"}], "paths": {"/applications": {"get": {"summary": "List all applications", "description": "Retrieve a list of all monitored applications", "operationId": "listApplications", "tags": ["Applications"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Application"}}}}}}}}, "/applications/{id}": {"get": {"summary": "Get application details", "description": "Retrieve details for a specific application", "operationId": "getApplication", "tags": ["Applications"], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Application"}}}}}}}, "/alerts_policies": {"get": {"summary": "List alert policies", "description": "Retrieve a list of alert policies", "operationId": "listAlertPolicies", "tags": ["Alerts"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AlertPolicy"}}}}}}}, "post": {"summary": "Create alert policy", "description": "Create a new alert policy", "operationId": "createAlertPolicy", "tags": ["Alerts"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AlertPolicyInput"}}}}, "responses": {"201": {"description": "Successfully created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AlertPolicy"}}}}}}}, "/metrics/data": {"get": {"summary": "Get metric data", "description": "Retrieve metric data for specified parameters", "operationId": "getMetricData", "tags": ["Metrics"], "parameters": [{"name": "names[]", "in": "query", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "from", "in": "query", "required": true, "schema": {"type": "string", "format": "date-time"}}, {"name": "to", "in": "query", "required": true, "schema": {"type": "string", "format": "date-time"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MetricData"}}}}}}}}, "components": {"schemas": {"Application": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "language": {"type": "string"}, "health_status": {"type": "string"}, "reporting": {"type": "boolean"}}}, "AlertPolicy": {"type": "object", "properties": {"id": {"type": "integer"}, "name": {"type": "string"}, "incident_preference": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "updated_at": {"type": "string", "format": "date-time"}}}, "AlertPolicyInput": {"type": "object", "required": ["name", "incident_preference"], "properties": {"name": {"type": "string"}, "incident_preference": {"type": "string", "enum": ["PER_POLICY", "PER_CONDITION", "PER_CONDITION_AND_TARGET"]}}}, "MetricData": {"type": "object", "properties": {"from": {"type": "string", "format": "date-time"}, "to": {"type": "string", "format": "date-time"}, "metrics": {"type": "array", "items": {"type": "object", "properties": {"name": {"type": "string"}, "timeslices": {"type": "array", "items": {"type": "object", "properties": {"from": {"type": "string", "format": "date-time"}, "to": {"type": "string", "format": "date-time"}, "values": {"type": "object", "additionalProperties": {"type": "number"}}}}}}}}}}}, "securitySchemes": {"apiKey": {"type": "apiKey", "in": "header", "name": "X-Api-Key"}}}, "security": [{"apiKey": []}]}}, {"title": "Datadog API", "content": {"openapi": "3.0.0", "info": {"title": "Datadog API", "description": "API for interacting with Datadog monitoring and analytics platform", "version": "1.0.0", "contact": {"name": "Datadog Support", "url": "https://www.datadoghq.com/support/", "email": "support@datadoghq.com"}}, "servers": [{"url": "https://api.datadoghq.com/api/v1"}], "paths": {"/metrics": {"post": {"summary": "Submit metrics", "description": "Submit metrics for storage and visualization", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MetricsPayload"}}}}, "responses": {"202": {"description": "Accepted"}, "400": {"description": "Bad Request"}, "403": {"description": "Forbidden"}}, "security": [{"apiKeyAuth": []}]}}, "/events": {"post": {"summary": "Post an event", "description": "Post an event to the event stream", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Event"}}}}, "responses": {"202": {"description": "Accepted"}, "400": {"description": "Bad Request"}, "403": {"description": "Forbidden"}}, "security": [{"apiKeyAuth": []}]}, "get": {"summary": "Get all events", "description": "Get all events from a specified time period", "parameters": [{"name": "start", "in": "query", "required": true, "schema": {"type": "integer"}, "description": "POSIX timestamp"}, {"name": "end", "in": "query", "required": true, "schema": {"type": "integer"}, "description": "POSIX timestamp"}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Event"}}}}}, "400": {"description": "Bad Request"}, "403": {"description": "Forbidden"}}, "security": [{"apiKeyAuth": []}]}}, "/monitors": {"post": {"summary": "Create a monitor", "description": "Create a new monitor", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Monitor"}}}}, "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Monitor"}}}}, "400": {"description": "Bad Request"}, "403": {"description": "Forbidden"}}, "security": [{"apiKeyAuth": []}]}, "get": {"summary": "Get all monitors", "description": "Get details for all monitors", "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Monitor"}}}}}, "403": {"description": "Forbidden"}}, "security": [{"apiKeyAuth": []}]}}, "/monitors/{monitor_id}": {"get": {"summary": "Get a monitor", "description": "Get details about a specific monitor", "parameters": [{"name": "monitor_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Monitor"}}}}, "403": {"description": "Forbidden"}, "404": {"description": "Not Found"}}, "security": [{"apiKeyAuth": []}]}, "put": {"summary": "Update a monitor", "description": "Update an existing monitor", "parameters": [{"name": "monitor_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Monitor"}}}}, "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Monitor"}}}}, "400": {"description": "Bad Request"}, "403": {"description": "Forbidden"}, "404": {"description": "Not Found"}}, "security": [{"apiKeyAuth": []}]}, "delete": {"summary": "Delete a monitor", "description": "Delete an existing monitor", "parameters": [{"name": "monitor_id", "in": "path", "required": true, "schema": {"type": "integer"}}], "responses": {"204": {"description": "Success"}, "403": {"description": "Forbidden"}, "404": {"description": "Not Found"}}, "security": [{"apiKeyAuth": []}]}}, "/dashboards": {"post": {"summary": "Create a dashboard", "description": "Create a new dashboard", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Dashboard"}}}}, "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Dashboard"}}}}, "400": {"description": "Bad Request"}, "403": {"description": "Forbidden"}}, "security": [{"apiKeyAuth": []}]}, "get": {"summary": "Get all dashboards", "description": "Get details for all dashboards", "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Dashboard"}}}}}, "403": {"description": "Forbidden"}}, "security": [{"apiKeyAuth": []}]}}}, "components": {"schemas": {"MetricsPayload": {"type": "object", "properties": {"series": {"type": "array", "items": {"$ref": "#/components/schemas/MetricSeries"}}}}, "MetricSeries": {"type": "object", "properties": {"metric": {"type": "string"}, "points": {"type": "array", "items": {"type": "array", "minItems": 2, "maxItems": 2, "items": {"type": "number"}}}, "tags": {"type": "array", "items": {"type": "string"}}}}, "Event": {"type": "object", "properties": {"title": {"type": "string"}, "text": {"type": "string"}, "date_happened": {"type": "integer"}, "priority": {"type": "string", "enum": ["normal", "low"]}, "tags": {"type": "array", "items": {"type": "string"}}}}, "Monitor": {"type": "object", "properties": {"name": {"type": "string"}, "type": {"type": "string", "enum": ["metric alert", "service check", "event alert", "query alert"]}, "query": {"type": "string"}, "message": {"type": "string"}, "tags": {"type": "array", "items": {"type": "string"}}, "options": {"type": "object"}}}, "Dashboard": {"type": "object", "properties": {"title": {"type": "string"}, "description": {"type": "string"}, "layout_type": {"type": "string", "enum": ["ordered", "free"]}, "widgets": {"type": "array", "items": {"$ref": "#/components/schemas/Widget"}}}}, "Widget": {"type": "object", "properties": {"definition": {"type": "object"}}}}, "securitySchemes": {"apiKeyAuth": {"type": "apiKey", "in": "header", "name": "DD-API-KEY"}}}}}, {"title": "Twilio API", "content": {"openapi": "3.0.0", "info": {"title": "Twilio API", "description": "The Twilio API for SMS, Voice, Video, and Verify services.", "version": "2010-04-01", "contact": {"name": "Twilio Support", "url": "https://www.twilio.com/help/contact", "email": "support@twilio.com"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "https://api.twilio.com/2010-04-01"}], "paths": {"/Accounts/{AccountSid}/Messages.json": {"post": {"summary": "Send an SMS or MMS message", "operationId": "createMessage", "tags": ["SMS"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"To": {"type": "string", "description": "The destination phone number"}, "From": {"type": "string", "description": "The Twilio phone number or Messaging Service SID to send the message from"}, "Body": {"type": "string", "description": "The text of the message you want to send"}, "MediaUrl": {"type": "string", "description": "The URL of the media you wish to send"}}, "required": ["To", "From", "Body"]}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}}}, "get": {"summary": "List SMS messages", "operationId": "listMessages", "tags": ["SMS"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "To", "in": "query", "schema": {"type": "string"}}, {"name": "From", "in": "query", "schema": {"type": "string"}}, {"name": "DateSent", "in": "query", "schema": {"type": "string", "format": "date"}}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"type": "object", "properties": {"messages": {"type": "array", "items": {"$ref": "#/components/schemas/Message"}}}}}}}}}}, "/Accounts/{AccountSid}/Calls.json": {"post": {"summary": "Make a phone call", "operationId": "createCall", "tags": ["Voice"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"To": {"type": "string", "description": "The phone number to call"}, "From": {"type": "string", "description": "The Twilio phone number to use as the caller ID"}, "Url": {"type": "string", "description": "The URL of the TwiML instructions for the call"}}, "required": ["To", "From", "Url"]}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Call"}}}}}}, "get": {"summary": "List phone calls", "operationId": "listCalls", "tags": ["Voice"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "To", "in": "query", "schema": {"type": "string"}}, {"name": "From", "in": "query", "schema": {"type": "string"}}, {"name": "Status", "in": "query", "schema": {"type": "string", "enum": ["queued", "ringing", "in-progress", "completed", "failed", "busy", "no-answer"]}}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"type": "object", "properties": {"calls": {"type": "array", "items": {"$ref": "#/components/schemas/Call"}}}}}}}}}}, "/Accounts/{AccountSid}/Verify/Services": {"post": {"summary": "Create a Verify service", "operationId": "createVerifyService", "tags": ["Verify"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"FriendlyName": {"type": "string", "description": "A descriptive string that you create to describe the verification service"}}, "required": ["FriendlyName"]}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifyService"}}}}}}}, "/Accounts/{AccountSid}/Verify/Services/{ServiceSid}/Verifications": {"post": {"summary": "Start a verification", "operationId": "createVerification", "tags": ["Verify"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "ServiceSid", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"To": {"type": "string", "description": "The phone number or email to verify"}, "Channel": {"type": "string", "description": "The verification method to use", "enum": ["sms", "call", "email"]}}, "required": ["To", "Channel"]}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Verification"}}}}}}}, "/Accounts/{AccountSid}/Verify/Services/{ServiceSid}/VerificationCheck": {"post": {"summary": "Check a verification", "operationId": "checkVerification", "tags": ["Verify"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "ServiceSid", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"To": {"type": "string", "description": "The phone number or email being verified"}, "Code": {"type": "string", "description": "The verification code"}}, "required": ["To", "Code"]}}}}, "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerificationCheck"}}}}}}}, "/Accounts/{AccountSid}/Conferences": {"post": {"summary": "Create a conference", "operationId": "createConference", "tags": ["Voice"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"FriendlyName": {"type": "string", "description": "A descriptive string that you create to describe the conference"}}, "required": ["FriendlyName"]}}}}, "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Conference"}}}}}}}, "/Accounts/{AccountSid}/Recordings": {"get": {"summary": "List recordings", "operationId": "listRecordings", "tags": ["Voice"], "parameters": [{"name": "AccountSid", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "DateCreated", "in": "query", "schema": {"type": "string", "format": "date"}}, {"name": "CallSid", "in": "query", "schema": {"type": "string"}}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"type": "object", "properties": {"recordings": {"type": "array", "items": {"$ref": "#/components/schemas/Recording"}}}}}}}}}}}, "components": {"securitySchemes": {"basicAuth": {"type": "http", "scheme": "basic"}}, "schemas": {"Message": {"type": "object", "properties": {"sid": {"type": "string"}, "date_created": {"type": "string", "format": "date-time"}, "date_updated": {"type": "string", "format": "date-time"}, "date_sent": {"type": "string", "format": "date-time"}, "account_sid": {"type": "string"}, "to": {"type": "string"}, "from": {"type": "string"}, "messaging_service_sid": {"type": "string"}, "body": {"type": "string"}, "status": {"type": "string", "enum": ["queued", "sending", "sent", "failed", "delivered"]}, "num_segments": {"type": "string"}, "num_media": {"type": "string"}, "direction": {"type": "string", "enum": ["inbound", "outbound-api", "outbound-call", "outbound-reply"]}, "api_version": {"type": "string"}, "price": {"type": "string"}, "price_unit": {"type": "string"}, "error_code": {"type": "string"}, "error_message": {"type": "string"}, "uri": {"type": "string"}, "subresource_uris": {"type": "object"}}}, "Call": {"type": "object", "properties": {"sid": {"type": "string"}, "date_created": {"type": "string", "format": "date-time"}, "date_updated": {"type": "string", "format": "date-time"}, "parent_call_sid": {"type": "string"}, "account_sid": {"type": "string"}, "to": {"type": "string"}, "to_formatted": {"type": "string"}, "from": {"type": "string"}, "from_formatted": {"type": "string"}, "phone_number_sid": {"type": "string"}, "status": {"type": "string", "enum": ["queued", "ringing", "in-progress", "completed", "failed", "busy", "no-answer"]}, "start_time": {"type": "string", "format": "date-time"}, "end_time": {"type": "string", "format": "date-time"}, "duration": {"type": "string"}, "price": {"type": "string"}, "price_unit": {"type": "string"}, "direction": {"type": "string", "enum": ["inbound", "outbound-api", "outbound-dial"]}, "answered_by": {"type": "string"}, "api_version": {"type": "string"}, "forwarded_from": {"type": "string"}, "group_sid": {"type": "string"}, "caller_name": {"type": "string"}, "uri": {"type": "string"}, "subresource_uris": {"type": "object"}}}, "VerifyService": {"type": "object", "properties": {"sid": {"type": "string"}, "account_sid": {"type": "string"}, "friendly_name": {"type": "string"}, "code_length": {"type": "integer"}, "lookup_enabled": {"type": "boolean"}, "psd2_enabled": {"type": "boolean"}, "skip_sms_to_landlines": {"type": "boolean"}, "dtmf_input_required": {"type": "boolean"}, "tts_name": {"type": "string"}, "date_created": {"type": "string", "format": "date-time"}, "date_updated": {"type": "string", "format": "date-time"}, "url": {"type": "string"}}}, "Verification": {"type": "object", "properties": {"sid": {"type": "string"}, "service_sid": {"type": "string"}, "account_sid": {"type": "string"}, "to": {"type": "string"}, "channel": {"type": "string"}, "status": {"type": "string"}, "valid": {"type": "boolean"}, "date_created": {"type": "string", "format": "date-time"}, "date_updated": {"type": "string", "format": "date-time"}, "url": {"type": "string"}}}, "VerificationCheck": {"type": "object", "properties": {"sid": {"type": "string"}, "service_sid": {"type": "string"}, "account_sid": {"type": "string"}, "to": {"type": "string"}, "channel": {"type": "string"}, "status": {"type": "string"}, "valid": {"type": "boolean"}, "date_created": {"type": "string", "format": "date-time"}, "date_updated": {"type": "string", "format": "date-time"}}}, "Conference": {"type": "object", "properties": {"sid": {"type": "string"}, "friendly_name": {"type": "string"}, "status": {"type": "string"}, "date_created": {"type": "string", "format": "date-time"}, "date_updated": {"type": "string", "format": "date-time"}, "account_sid": {"type": "string"}, "uri": {"type": "string"}}}, "Recording": {"type": "object", "properties": {"sid": {"type": "string"}, "date_created": {"type": "string", "format": "date-time"}, "date_updated": {"type": "string", "format": "date-time"}, "account_sid": {"type": "string"}, "call_sid": {"type": "string"}, "duration": {"type": "string"}, "price": {"type": "string"}, "price_unit": {"type": "string"}, "status": {"type": "string"}, "channels": {"type": "integer"}, "source": {"type": "string"}, "error_code": {"type": "string"}, "uri": {"type": "string"}}}}}, "security": [{"basicAuth": []}]}}, {"title": "eBay API", "content": {"openapi": "3.0.0", "info": {"title": "eBay API", "description": "API for interacting with eBay's marketplace", "version": "1.0.0", "contact": {"name": "eBay Developer Support", "url": "https://developer.ebay.com/support"}}, "servers": [{"url": "https://api.ebay.com/v1"}], "paths": {"/sell/inventory/v1/inventory_item": {"post": {"summary": "Create or update an inventory item", "operationId": "createOrReplaceInventoryItem", "tags": ["Inventory"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InventoryItem"}}}}, "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InventoryItemResponse"}}}}}}}, "/sell/inventory/v1/inventory_item/{sku}": {"get": {"summary": "Get an inventory item", "operationId": "getInventoryItem", "tags": ["Inventory"], "parameters": [{"name": "sku", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InventoryItem"}}}}}}}, "/sell/account/v1/payment_policy": {"post": {"summary": "Create a payment policy", "operationId": "createPaymentPolicy", "tags": ["Account"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaymentPolicy"}}}}, "responses": {"201": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaymentPolicyResponse"}}}}}}}, "/sell/account/v1/return_policy": {"post": {"summary": "Create a return policy", "operationId": "createReturnPolicy", "tags": ["Account"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReturnPolicy"}}}}, "responses": {"201": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReturnPolicyResponse"}}}}}}}, "/sell/fulfillment/v1/order/{orderId}": {"get": {"summary": "Get an order", "operationId": "getOrder", "tags": ["Fulfillment"], "parameters": [{"name": "orderId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}}}}, "/sell/marketing/v1/ad_campaign": {"post": {"summary": "Create an ad campaign", "operationId": "createAdCampaign", "tags": ["Marketing"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdCampaign"}}}}, "responses": {"201": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AdCampaignResponse"}}}}}}}, "/buy/browse/v1/item_summary/search": {"get": {"summary": "Search for items", "operationId": "searchItems", "tags": ["Browse"], "parameters": [{"name": "q", "in": "query", "description": "A string consisting of one or more keywords to use to search for items", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "The number of items to return", "schema": {"type": "integer"}}], "responses": {"200": {"description": "Success", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SearchResult"}}}}}}}}, "components": {"schemas": {"InventoryItem": {"type": "object", "properties": {"sku": {"type": "string"}, "product": {"$ref": "#/components/schemas/Product"}, "availability": {"$ref": "#/components/schemas/Availability"}}}, "Product": {"type": "object", "properties": {"title": {"type": "string"}, "description": {"type": "string"}, "aspects": {"type": "object", "additionalProperties": {"type": "array", "items": {"type": "string"}}}, "imageUrls": {"type": "array", "items": {"type": "string"}}}}, "Availability": {"type": "object", "properties": {"shipToLocationAvailability": {"$ref": "#/components/schemas/ShipToLocationAvailability"}}}, "ShipToLocationAvailability": {"type": "object", "properties": {"quantity": {"type": "integer"}}}, "InventoryItemResponse": {"type": "object", "properties": {"sku": {"type": "string"}, "warnings": {"type": "array", "items": {"$ref": "#/components/schemas/Error"}}}}, "PaymentPolicy": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "paymentMethods": {"type": "array", "items": {"$ref": "#/components/schemas/PaymentMethod"}}}}, "PaymentMethod": {"type": "object", "properties": {"paymentMethodType": {"type": "string", "enum": ["PAYPAL", "CREDIT_CARD", "BANK_TRANSFER"]}}}, "PaymentPolicyResponse": {"type": "object", "properties": {"paymentPolicyId": {"type": "string"}, "warnings": {"type": "array", "items": {"$ref": "#/components/schemas/Error"}}}}, "ReturnPolicy": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "returnsAccepted": {"type": "boolean"}, "returnPeriod": {"$ref": "#/components/schemas/TimeDuration"}}}, "TimeDuration": {"type": "object", "properties": {"value": {"type": "integer"}, "unit": {"type": "string", "enum": ["DAY", "MONTH", "YEAR"]}}}, "ReturnPolicyResponse": {"type": "object", "properties": {"returnPolicyId": {"type": "string"}, "warnings": {"type": "array", "items": {"$ref": "#/components/schemas/Error"}}}}, "Order": {"type": "object", "properties": {"orderId": {"type": "string"}, "buyer": {"$ref": "#/components/schemas/Buyer"}, "orderItems": {"type": "array", "items": {"$ref": "#/components/schemas/OrderItem"}}, "totalAmount": {"$ref": "#/components/schemas/Amount"}}}, "Buyer": {"type": "object", "properties": {"username": {"type": "string"}, "email": {"type": "string"}}}, "OrderItem": {"type": "object", "properties": {"itemId": {"type": "string"}, "quantity": {"type": "integer"}, "price": {"$ref": "#/components/schemas/Amount"}}}, "Amount": {"type": "object", "properties": {"value": {"type": "number"}, "currency": {"type": "string"}}}, "AdCampaign": {"type": "object", "properties": {"campaignName": {"type": "string"}, "fundingStrategy": {"$ref": "#/components/schemas/FundingStrategy"}, "startDate": {"type": "string", "format": "date-time"}, "endDate": {"type": "string", "format": "date-time"}}}, "FundingStrategy": {"type": "object", "properties": {"fundingModel": {"type": "string", "enum": ["COST_PER_CLICK", "COST_PER_SALE"]}, "bidPercentage": {"type": "number"}}}, "AdCampaignResponse": {"type": "object", "properties": {"campaignId": {"type": "string"}, "warnings": {"type": "array", "items": {"$ref": "#/components/schemas/Error"}}}}, "SearchResult": {"type": "object", "properties": {"total": {"type": "integer"}, "itemSummaries": {"type": "array", "items": {"$ref": "#/components/schemas/ItemSummary"}}}}, "ItemSummary": {"type": "object", "properties": {"itemId": {"type": "string"}, "title": {"type": "string"}, "price": {"$ref": "#/components/schemas/Amount"}, "image": {"$ref": "#/components/schemas/Image"}}}, "Image": {"type": "object", "properties": {"imageUrl": {"type": "string"}}}, "Error": {"type": "object", "properties": {"errorId": {"type": "integer"}, "domain": {"type": "string"}, "category": {"type": "string"}, "message": {"type": "string"}}}}, "securitySchemes": {"api_key": {"type": "apiKey", "name": "Authorization", "in": "header"}, "oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://auth.ebay.com/oauth2/authorize", "tokenUrl": "https://api.ebay.com/identity/v1/oauth2/token", "scopes": {"https://api.ebay.com/oauth/api_scope": "View public data", "https://api.ebay.com/oauth/api_scope/sell.inventory": "View and manage inventory", "https://api.ebay.com/oauth/api_scope/sell.account": "View and manage account settings", "https://api.ebay.com/oauth/api_scope/sell.fulfillment": "View and manage orders", "https://api.ebay.com/oauth/api_scope/sell.marketing": "View and manage marketing activities"}}}}}}, "security": [{"api_key": []}, {"oauth2": []}]}}, {"title": "Slack API", "content": {"openapi": "3.0.0", "info": {"title": "Slack API", "description": "API for interacting with Slack workspaces, channels, and messages", "version": "1.0.0", "contact": {"name": "Slack API Support", "url": "https://api.slack.com/support", "email": "api@slack.com"}}, "servers": [{"url": "https://slack.com/api"}], "tags": [{"name": "auth", "description": "Authentication and authorization"}, {"name": "channels", "description": "Operations related to channels"}, {"name": "chat", "description": "Sending and managing messages"}, {"name": "users", "description": "User management and information"}, {"name": "files", "description": "File upload and management"}, {"name": "teams", "description": "Team information and settings"}], "paths": {"/auth.test": {"get": {"summary": "Test authentication", "tags": ["auth"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthTestResponse"}}}}}, "security": [{"slackAuth": []}]}}, "/channels.list": {"get": {"summary": "List channels", "tags": ["channels"], "parameters": [{"name": "exclude_archived", "in": "query", "schema": {"type": "boolean"}}, {"name": "limit", "in": "query", "schema": {"type": "integer"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChannelsListResponse"}}}}}, "security": [{"slackAuth": []}]}}, "/chat.postMessage": {"post": {"summary": "Post a message to a channel", "tags": ["chat"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PostMessageRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PostMessageResponse"}}}}}, "security": [{"slackAuth": []}]}}, "/users.list": {"get": {"summary": "List users in a workspace", "tags": ["users"], "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UsersListResponse"}}}}}, "security": [{"slackAuth": []}]}}, "/files.upload": {"post": {"summary": "Upload a file", "tags": ["files"], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/FileUploadRequest"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FileUploadResponse"}}}}}, "security": [{"slackAuth": []}]}}, "/team.info": {"get": {"summary": "Get team information", "tags": ["teams"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TeamInfoResponse"}}}}}, "security": [{"slackAuth": []}]}}}, "components": {"schemas": {"AuthTestResponse": {"type": "object", "properties": {"ok": {"type": "boolean"}, "url": {"type": "string"}, "team": {"type": "string"}, "user": {"type": "string"}, "team_id": {"type": "string"}, "user_id": {"type": "string"}}}, "ChannelsListResponse": {"type": "object", "properties": {"ok": {"type": "boolean"}, "channels": {"type": "array", "items": {"$ref": "#/components/schemas/Channel"}}}}, "Channel": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "is_channel": {"type": "boolean"}, "created": {"type": "integer"}, "creator": {"type": "string"}, "is_archived": {"type": "boolean"}, "is_general": {"type": "boolean"}, "members": {"type": "array", "items": {"type": "string"}}, "topic": {"$ref": "#/components/schemas/ChannelTopic"}, "purpose": {"$ref": "#/components/schemas/ChannelPurpose"}}}, "ChannelTopic": {"type": "object", "properties": {"value": {"type": "string"}, "creator": {"type": "string"}, "last_set": {"type": "integer"}}}, "ChannelPurpose": {"type": "object", "properties": {"value": {"type": "string"}, "creator": {"type": "string"}, "last_set": {"type": "integer"}}}, "PostMessageRequest": {"type": "object", "required": ["channel", "text"], "properties": {"channel": {"type": "string"}, "text": {"type": "string"}, "as_user": {"type": "boolean"}, "attachments": {"type": "array", "items": {"$ref": "#/components/schemas/Attachment"}}, "blocks": {"type": "array", "items": {"$ref": "#/components/schemas/Block"}}, "thread_ts": {"type": "string"}}}, "Attachment": {"type": "object", "properties": {"fallback": {"type": "string"}, "color": {"type": "string"}, "pretext": {"type": "string"}, "author_name": {"type": "string"}, "author_link": {"type": "string"}, "author_icon": {"type": "string"}, "title": {"type": "string"}, "title_link": {"type": "string"}, "text": {"type": "string"}, "fields": {"type": "array", "items": {"$ref": "#/components/schemas/AttachmentField"}}, "image_url": {"type": "string"}, "thumb_url": {"type": "string"}, "footer": {"type": "string"}, "footer_icon": {"type": "string"}, "ts": {"type": "integer"}}}, "AttachmentField": {"type": "object", "properties": {"title": {"type": "string"}, "value": {"type": "string"}, "short": {"type": "boolean"}}}, "Block": {"type": "object", "properties": {"type": {"type": "string"}, "text": {"$ref": "#/components/schemas/TextObject"}, "accessory": {"$ref": "#/components/schemas/BlockElement"}, "elements": {"type": "array", "items": {"$ref": "#/components/schemas/BlockElement"}}}}, "TextObject": {"type": "object", "properties": {"type": {"type": "string", "enum": ["plain_text", "mrkdwn"]}, "text": {"type": "string"}, "emoji": {"type": "boolean"}, "verbatim": {"type": "boolean"}}}, "BlockElement": {"type": "object", "properties": {"type": {"type": "string"}}}, "PostMessageResponse": {"type": "object", "properties": {"ok": {"type": "boolean"}, "channel": {"type": "string"}, "ts": {"type": "string"}, "message": {"$ref": "#/components/schemas/Message"}}}, "Message": {"type": "object", "properties": {"type": {"type": "string"}, "subtype": {"type": "string"}, "text": {"type": "string"}, "ts": {"type": "string"}, "username": {"type": "string"}, "bot_id": {"type": "string"}, "attachments": {"type": "array", "items": {"$ref": "#/components/schemas/Attachment"}}, "blocks": {"type": "array", "items": {"$ref": "#/components/schemas/Block"}}}}, "UsersListResponse": {"type": "object", "properties": {"ok": {"type": "boolean"}, "members": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}, "cache_ts": {"type": "integer"}, "response_metadata": {"type": "object", "properties": {"next_cursor": {"type": "string"}}}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "team_id": {"type": "string"}, "name": {"type": "string"}, "deleted": {"type": "boolean"}, "color": {"type": "string"}, "real_name": {"type": "string"}, "tz": {"type": "string"}, "tz_label": {"type": "string"}, "tz_offset": {"type": "integer"}, "profile": {"$ref": "#/components/schemas/UserProfile"}, "is_admin": {"type": "boolean"}, "is_owner": {"type": "boolean"}, "is_primary_owner": {"type": "boolean"}, "is_restricted": {"type": "boolean"}, "is_ultra_restricted": {"type": "boolean"}, "is_bot": {"type": "boolean"}, "updated": {"type": "integer"}, "is_app_user": {"type": "boolean"}, "has_2fa": {"type": "boolean"}}}, "UserProfile": {"type": "object", "properties": {"avatar_hash": {"type": "string"}, "status_text": {"type": "string"}, "status_emoji": {"type": "string"}, "real_name": {"type": "string"}, "display_name": {"type": "string"}, "real_name_normalized": {"type": "string"}, "display_name_normalized": {"type": "string"}, "email": {"type": "string"}, "image_24": {"type": "string"}, "image_32": {"type": "string"}, "image_48": {"type": "string"}, "image_72": {"type": "string"}, "image_192": {"type": "string"}, "image_512": {"type": "string"}, "team": {"type": "string"}}}, "FileUploadRequest": {"type": "object", "properties": {"file": {"type": "string", "format": "binary"}, "filename": {"type": "string"}, "initial_comment": {"type": "string"}, "channels": {"type": "string"}}}, "FileUploadResponse": {"type": "object", "properties": {"ok": {"type": "boolean"}, "file": {"$ref": "#/components/schemas/File"}}}, "File": {"type": "object", "properties": {"id": {"type": "string"}, "created": {"type": "integer"}, "timestamp": {"type": "integer"}, "name": {"type": "string"}, "title": {"type": "string"}, "mimetype": {"type": "string"}, "filetype": {"type": "string"}, "pretty_type": {"type": "string"}, "user": {"type": "string"}, "editable": {"type": "boolean"}, "size": {"type": "integer"}, "mode": {"type": "string"}, "is_external": {"type": "boolean"}, "external_type": {"type": "string"}, "is_public": {"type": "boolean"}, "public_url_shared": {"type": "boolean"}, "display_as_bot": {"type": "boolean"}, "username": {"type": "string"}, "url_private": {"type": "string"}, "url_private_download": {"type": "string"}, "thumb_64": {"type": "string"}, "thumb_80": {"type": "string"}, "thumb_360": {"type": "string"}, "thumb_360_w": {"type": "integer"}, "thumb_360_h": {"type": "integer"}, "thumb_480": {"type": "string"}, "thumb_480_w": {"type": "integer"}, "thumb_480_h": {"type": "integer"}, "thumb_160": {"type": "string"}, "permalink": {"type": "string"}, "permalink_public": {"type": "string"}, "edit_link": {"type": "string"}, "preview": {"type": "string"}, "preview_highlight": {"type": "string"}, "lines": {"type": "integer"}, "lines_more": {"type": "integer"}, "is_starred": {"type": "boolean"}, "has_rich_preview": {"type": "boolean"}}}, "TeamInfoResponse": {"type": "object", "properties": {"ok": {"type": "boolean"}, "team": {"$ref": "#/components/schemas/Team"}}}, "Team": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "domain": {"type": "string"}, "email_domain": {"type": "string"}, "icon": {"$ref": "#/components/schemas/TeamIcon"}}}, "TeamIcon": {"type": "object", "properties": {"image_34": {"type": "string"}, "image_44": {"type": "string"}, "image_68": {"type": "string"}, "image_88": {"type": "string"}, "image_102": {"type": "string"}, "image_132": {"type": "string"}, "image_230": {"type": "string"}, "image_original": {"type": "string"}}}}, "securitySchemes": {"slackAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}}}, {"title": "Adobe Sign API", "content": {"openapi": "3.0.0", "info": {"title": "Adobe Sign API", "description": "API for interacting with Adobe Sign e-signature service", "version": "1.0.0", "contact": {"name": "Adobe Sign Support", "url": "https://www.adobe.com/sign/support.html", "email": "adobesign-support@adobe.com"}}, "servers": [{"url": "https://api.na1.adobesign.com/api/rest/v6", "description": "Adobe Sign API Production Server"}], "paths": {"/agreements": {"get": {"summary": "Get agreements", "description": "Retrieves agreements for the user", "operationId": "getAgreements", "parameters": [{"name": "query", "in": "query", "description": "Search query to filter agreements", "schema": {"type": "string"}}, {"name": "status", "in": "query", "description": "Status of agreements to retrieve", "schema": {"type": "string", "enum": ["DRAFT", "OUT_FOR_SIGNATURE", "SIGNED", "APPROVED", "CANCELLED", "EXPIRED"]}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AgreementList"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"OAuth2": ["agreement_read"]}]}, "post": {"summary": "Create agreement", "description": "Creates a new agreement", "operationId": "createAgreement", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AgreementCreationInfo"}}}}, "responses": {"201": {"description": "Agreement created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AgreementCreationResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"OAuth2": ["agreement_write"]}]}}, "/agreements/{agreementId}": {"get": {"summary": "Get agreement info", "description": "Retrieves detailed information about an agreement", "operationId": "getAgreementInfo", "parameters": [{"name": "agreementId", "in": "path", "required": true, "description": "The agreement ID", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AgreementInfo"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Agreement not found"}}, "security": [{"OAuth2": ["agreement_read"]}]}}, "/agreements/{agreementId}/documents": {"get": {"summary": "Get agreement documents", "description": "Retrieves the IDs of all documents associated with an agreement", "operationId": "getAgreementDocuments", "parameters": [{"name": "agreementId", "in": "path", "required": true, "description": "The agreement ID", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AgreementDocuments"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Agreement not found"}}, "security": [{"OAuth2": ["agreement_read"]}]}}, "/agreements/{agreementId}/documents/{documentId}": {"get": {"summary": "Get agreement document", "description": "Retrieves a single document file associated with an agreement", "operationId": "getAgreementDocument", "parameters": [{"name": "agreementId", "in": "path", "required": true, "description": "The agreement ID", "schema": {"type": "string"}}, {"name": "documentId", "in": "path", "required": true, "description": "The document ID", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/pdf": {"schema": {"type": "string", "format": "binary"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Agreement or document not found"}}, "security": [{"OAuth2": ["agreement_read"]}]}}, "/agreements/{agreementId}/members": {"get": {"summary": "Get agreement members", "description": "Retrieves information about the members of an agreement", "operationId": "getAgreementMembers", "parameters": [{"name": "agreementId", "in": "path", "required": true, "description": "The agreement ID", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AgreementMembers"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Agreement not found"}}, "security": [{"OAuth2": ["agreement_read"]}]}}, "/agreements/{agreementId}/reminders": {"post": {"summary": "Send agreement reminder", "description": "Sends a reminder to the next signer of an agreement", "operationId": "sendAgreementReminder", "parameters": [{"name": "agreementId", "in": "path", "required": true, "description": "The agreement ID", "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReminderInfo"}}}}, "responses": {"204": {"description": "Reminder sent successfully"}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "404": {"description": "Agreement not found"}}, "security": [{"OAuth2": ["agreement_write"]}]}}}, "components": {"schemas": {"AgreementList": {"type": "object", "properties": {"userAgreementList": {"type": "array", "items": {"$ref": "#/components/schemas/AgreementInfo"}}}}, "AgreementInfo": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "status": {"type": "string", "enum": ["DRAFT", "OUT_FOR_SIGNATURE", "SIGNED", "APPROVED", "CANCELLED", "EXPIRED"]}, "createdDate": {"type": "string", "format": "date-time"}, "lastEventDate": {"type": "string", "format": "date-time"}}}, "AgreementCreationInfo": {"type": "object", "properties": {"fileInfos": {"type": "array", "items": {"$ref": "#/components/schemas/FileInfo"}}, "name": {"type": "string"}, "participantSetsInfo": {"type": "array", "items": {"$ref": "#/components/schemas/ParticipantSetInfo"}}, "signatureType": {"type": "string", "enum": ["ESIGN", "WRITTEN"]}, "state": {"type": "string", "enum": ["DRAFT", "IN_PROCESS"]}}}, "FileInfo": {"type": "object", "properties": {"transientDocumentId": {"type": "string"}}}, "ParticipantSetInfo": {"type": "object", "properties": {"memberInfos": {"type": "array", "items": {"$ref": "#/components/schemas/ParticipantInfo"}}, "order": {"type": "integer"}, "role": {"type": "string", "enum": ["SIGNER", "APPROVER", "ACCEPTOR", "CERTIFIED_RECIPIENT", "FORM_FILLER", "DELEGATE_TO_SIGNER", "DELEGATE_TO_APPROVER", "DELEGATE_TO_ACCEPTOR", "DELEGATE_TO_CERTIFIED_RECIPIENT", "DELEGATE_TO_FORM_FILLER"]}}}, "ParticipantInfo": {"type": "object", "properties": {"email": {"type": "string"}}}, "AgreementCreationResponse": {"type": "object", "properties": {"id": {"type": "string"}}}, "AgreementDocuments": {"type": "object", "properties": {"documents": {"type": "array", "items": {"$ref": "#/components/schemas/DocumentInfo"}}}}, "DocumentInfo": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "mimeType": {"type": "string"}}}, "AgreementMembers": {"type": "object", "properties": {"participantSets": {"type": "array", "items": {"$ref": "#/components/schemas/ParticipantSet"}}}}, "ParticipantSet": {"type": "object", "properties": {"memberInfos": {"type": "array", "items": {"$ref": "#/components/schemas/ParticipantInfo"}}, "order": {"type": "integer"}, "role": {"type": "string"}, "status": {"type": "string"}}}, "ReminderInfo": {"type": "object", "properties": {"recipientParticipantIds": {"type": "array", "items": {"type": "string"}}, "note": {"type": "string"}}}}, "securitySchemes": {"OAuth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://secure.na1.adobesign.com/public/oauth", "tokenUrl": "https://api.na1.adobesign.com/oauth/token", "scopes": {"agreement_read": "Read agreement information", "agreement_write": "Create and modify agreements", "agreement_send": "Send agreements"}}}}}}}}, {"title": "Reddit API", "content": {"openapi": "3.0.0", "info": {"title": "Reddit API", "description": "API for interacting with Reddit", "version": "1.0.0", "contact": {"name": "Reddit API Support", "url": "https://www.reddit.com/dev/api"}}, "servers": [{"url": "https://oauth.reddit.com/api/v1"}], "paths": {"/me": {"get": {"summary": "Get information about the authenticated user", "tags": ["User"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"oauth2": ["identity"]}]}}, "/subreddits/search": {"get": {"summary": "Search for subreddits", "tags": ["Subreddits"], "parameters": [{"name": "q", "in": "query", "description": "Search query", "required": true, "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Maximum number of results to return", "schema": {"type": "integer", "default": 25}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Subreddit"}}}}}}, "security": [{"oauth2": ["read"]}]}}, "/subreddits/{subreddit}/about": {"get": {"summary": "Get information about a subreddit", "tags": ["Subreddits"], "parameters": [{"name": "subreddit", "in": "path", "description": "Name of the subreddit", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Subreddit"}}}}}, "security": [{"oauth2": ["read"]}]}}, "/r/{subreddit}/submit": {"post": {"summary": "Submit a new post to a subreddit", "tags": ["Posts"], "parameters": [{"name": "subreddit", "in": "path", "description": "Name of the subreddit", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"title": {"type": "string", "description": "Title of the post"}, "text": {"type": "string", "description": "Text content of the post"}, "url": {"type": "string", "description": "URL for link posts"}, "kind": {"type": "string", "enum": ["self", "link"], "description": "Type of post"}}, "required": ["title", "kind"]}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Post"}}}}}, "security": [{"oauth2": ["submit"]}]}}, "/comments/{article}": {"get": {"summary": "Get comments for a post", "tags": ["Comments"], "parameters": [{"name": "article", "in": "path", "description": "ID of the post", "required": true, "schema": {"type": "string"}}, {"name": "sort", "in": "query", "description": "Sort order for comments", "schema": {"type": "string", "enum": ["top", "new", "controversial", "old", "qa"], "default": "top"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Comment"}}}}}}, "security": [{"oauth2": ["read"]}]}}, "/api/vote": {"post": {"summary": "Vote on a post or comment", "tags": ["Voting"], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"id": {"type": "string", "description": "Full name of the post or comment"}, "dir": {"type": "integer", "enum": [-1, 0, 1], "description": "Vote direction (-1 for downvote, 0 for no vote, 1 for upvote)"}}, "required": ["id", "dir"]}}}}, "responses": {"200": {"description": "Successful response"}}, "security": [{"oauth2": ["vote"]}]}}}, "components": {"schemas": {"User": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "created_utc": {"type": "number"}, "link_karma": {"type": "integer"}, "comment_karma": {"type": "integer"}}}, "Subreddit": {"type": "object", "properties": {"id": {"type": "string"}, "display_name": {"type": "string"}, "title": {"type": "string"}, "description": {"type": "string"}, "subscribers": {"type": "integer"}, "created_utc": {"type": "number"}}}, "Post": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "author": {"type": "string"}, "subreddit": {"type": "string"}, "score": {"type": "integer"}, "created_utc": {"type": "number"}, "num_comments": {"type": "integer"}, "url": {"type": "string"}, "selftext": {"type": "string"}}}, "Comment": {"type": "object", "properties": {"id": {"type": "string"}, "author": {"type": "string"}, "body": {"type": "string"}, "score": {"type": "integer"}, "created_utc": {"type": "number"}, "parent_id": {"type": "string"}, "replies": {"type": "array", "items": {"$ref": "#/components/schemas/Comment"}}}}}, "securitySchemes": {"oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://www.reddit.com/api/v1/authorize", "tokenUrl": "https://www.reddit.com/api/v1/access_token", "scopes": {"identity": "Access your identity", "read": "Read content", "submit": "Submit content", "vote": "Vote on content"}}}}}}}}, {"title": "Google Search API", "content": {"openapi": "3.0.0", "info": {"title": "Google Search API", "description": "API for performing Google searches and retrieving results", "version": "1.0.0", "contact": {"name": "Google Support", "url": "https://support.google.com", "email": "support@google.com"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "https://api.google.com/v1"}], "paths": {"/search": {"get": {"summary": "Perform a Google search", "description": "Search the web using Google's search engine and retrieve results", "operationId": "searchGoogle", "parameters": [{"name": "q", "in": "query", "description": "Search query string", "required": true, "schema": {"type": "string"}}, {"name": "num", "in": "query", "description": "Number of results to return (max 100)", "schema": {"type": "integer", "minimum": 1, "maximum": 100, "default": 10}}, {"name": "start", "in": "query", "description": "Index of the first result to return", "schema": {"type": "integer", "minimum": 0, "default": 0}}, {"name": "lr", "in": "query", "description": "Language restriction for search results", "schema": {"type": "string", "enum": ["lang_en", "lang_fr", "lang_de", "lang_es", "lang_it", "lang_ja"]}}, {"name": "safe", "in": "query", "description": "Safe search setting", "schema": {"type": "string", "enum": ["off", "medium", "high"], "default": "medium"}}, {"name": "dateRestrict", "in": "query", "description": "Restrict results to a specific time period", "schema": {"type": "string", "enum": ["d1", "w1", "m1", "y1"]}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SearchResults"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "429": {"description": "Too many requests", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "500": {"description": "Internal server error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/search/images": {"get": {"summary": "Perform a Google image search", "description": "Search for images using Google's image search engine and retrieve results", "operationId": "searchGoogleImages", "parameters": [{"name": "q", "in": "query", "description": "Search query string", "required": true, "schema": {"type": "string"}}, {"name": "num", "in": "query", "description": "Number of results to return (max 100)", "schema": {"type": "integer", "minimum": 1, "maximum": 100, "default": 10}}, {"name": "start", "in": "query", "description": "Index of the first result to return", "schema": {"type": "integer", "minimum": 0, "default": 0}}, {"name": "imgSize", "in": "query", "description": "Image size filter", "schema": {"type": "string", "enum": ["icon", "small", "medium", "large", "xlarge", "xxlarge", "huge"]}}, {"name": "imgType", "in": "query", "description": "Image type filter", "schema": {"type": "string", "enum": ["clipart", "face", "lineart", "news", "photo"]}}, {"name": "imgColorType", "in": "query", "description": "Image color type filter", "schema": {"type": "string", "enum": ["color", "gray", "mono"]}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImageSearchResults"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "429": {"description": "Too many requests", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "500": {"description": "Internal server error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}}, "components": {"schemas": {"SearchResults": {"type": "object", "properties": {"kind": {"type": "string", "example": "customsearch#search"}, "url": {"type": "object", "properties": {"type": {"type": "string", "example": "application/json"}, "template": {"type": "string", "example": "https://www.googleapis.com/customsearch/v1?q={searchTerms}&num={count?}&start={startIndex?}&lr={language?}&safe={safe?}&cx={cx?}&sort={sort?}&filter={filter?}&gl={gl?}&cr={cr?}&googlehost={googleHost?}&c2coff={disableCnTwTranslation?}&hq={hq?}&hl={hl?}&siteSearch={siteSearch?}&siteSearchFilter={siteSearchFilter?}&exactTerms={exactTerms?}&excludeTerms={excludeTerms?}&linkSite={linkSite?}&orTerms={orTerms?}&relatedSite={relatedSite?}&dateRestrict={dateRestrict?}&lowRange={lowRange?}&highRange={highRange?}&searchType={searchType}&fileType={fileType?}&rights={rights?}&imgSize={imgSize?}&imgType={imgType?}&imgColorType={imgColorType?}&imgDominantColor={imgDominantColor?}&alt=json"}}}, "queries": {"type": "object", "properties": {"request": {"type": "array", "items": {"type": "object", "properties": {"title": {"type": "string", "example": "Google Custom Search - test"}, "totalResults": {"type": "string", "example": "300000000"}, "searchTerms": {"type": "string", "example": "test"}, "count": {"type": "integer", "example": 10}, "startIndex": {"type": "integer", "example": 1}, "inputEncoding": {"type": "string", "example": "utf8"}, "outputEncoding": {"type": "string", "example": "utf8"}, "safe": {"type": "string", "example": "off"}, "cx": {"type": "string", "example": "your-custom-search-engine-id"}}}}, "nextPage": {"type": "array", "items": {"type": "object", "properties": {"title": {"type": "string", "example": "Google Custom Search - test"}, "totalResults": {"type": "string", "example": "300000000"}, "searchTerms": {"type": "string", "example": "test"}, "count": {"type": "integer", "example": 10}, "startIndex": {"type": "integer", "example": 11}, "inputEncoding": {"type": "string", "example": "utf8"}, "outputEncoding": {"type": "string", "example": "utf8"}, "safe": {"type": "string", "example": "off"}, "cx": {"type": "string", "example": "your-custom-search-engine-id"}}}}}}, "context": {"type": "object", "properties": {"title": {"type": "string", "example": "Google"}}}, "searchInformation": {"type": "object", "properties": {"searchTime": {"type": "number", "example": 0.24}, "formattedSearchTime": {"type": "string", "example": "0.24"}, "totalResults": {"type": "string", "example": "300000000"}, "formattedTotalResults": {"type": "string", "example": "300,000,000"}}}, "items": {"type": "array", "items": {"type": "object", "properties": {"kind": {"type": "string", "example": "customsearch#result"}, "title": {"type": "string", "example": "Test - Wikipedia"}, "htmlTitle": {"type": "string", "example": "<b>Test</b> - Wikipedia"}, "link": {"type": "string", "example": "https://en.wikipedia.org/wiki/Test"}, "displayLink": {"type": "string", "example": "en.wikipedia.org"}, "snippet": {"type": "string", "example": "Test(s), testing, or TEST may refer to: Test (assessment), an educational assessment intended to measure the respondents' knowledge or other abilities."}, "htmlSnippet": {"type": "string", "example": "<b>Test</b>(s), <b>testing</b>, or TEST may refer to: <b>Test</b> (assessment), an educational assessment intended to measure the respondents&#39; knowledge or other abilities."}, "cacheId": {"type": "string", "example": "9WlLIgfbRMgJ"}, "formattedUrl": {"type": "string", "example": "https://en.wikipedia.org/wiki/Test"}, "htmlFormattedUrl": {"type": "string", "example": "https://en.wikipedia.org/wiki/<b>Test</b>"}, "pagemap": {"type": "object", "properties": {"metatags": {"type": "array", "items": {"type": "object", "additionalProperties": {"type": "string"}}}}}}}}}}, "ImageSearchResults": {"type": "object", "properties": {"kind": {"type": "string", "example": "customsearch#search"}, "url": {"type": "object", "properties": {"type": {"type": "string", "example": "application/json"}, "template": {"type": "string", "example": "https://www.googleapis.com/customsearch/v1?q={searchTerms}&num={count?}&start={startIndex?}&lr={language?}&safe={safe?}&cx={cx?}&sort={sort?}&filter={filter?}&gl={gl?}&cr={cr?}&googlehost={googleHost?}&c2coff={disableCnTwTranslation?}&hq={hq?}&hl={hl?}&siteSearch={siteSearch?}&siteSearchFilter={siteSearchFilter?}&exactTerms={exactTerms?}&excludeTerms={excludeTerms?}&linkSite={linkSite?}&orTerms={orTerms?}&relatedSite={relatedSite?}&dateRestrict={dateRestrict?}&lowRange={lowRange?}&highRange={highRange?}&searchType={searchType}&fileType={fileType?}&rights={rights?}&imgSize={imgSize?}&imgType={imgType?}&imgColorType={imgColorType?}&imgDominantColor={imgDominantColor?}&alt=json"}}}, "queries": {"type": "object", "properties": {"request": {"type": "array", "items": {"type": "object", "properties": {"title": {"type": "string", "example": "Google Custom Search - test"}, "totalResults": {"type": "string", "example": "3620000000"}, "searchTerms": {"type": "string", "example": "test"}, "count": {"type": "integer", "example": 10}, "startIndex": {"type": "integer", "example": 1}, "inputEncoding": {"type": "string", "example": "utf8"}, "outputEncoding": {"type": "string", "example": "utf8"}, "safe": {"type": "string", "example": "off"}, "cx": {"type": "string", "example": "your-custom-search-engine-id"}, "searchType": {"type": "string", "example": "image"}}}}, "nextPage": {"type": "array", "items": {"type": "object", "properties": {"title": {"type": "string", "example": "Google Custom Search - test"}, "totalResults": {"type": "string", "example": "3620000000"}, "searchTerms": {"type": "string", "example": "test"}, "count": {"type": "integer", "example": 10}, "startIndex": {"type": "integer", "example": 11}, "inputEncoding": {"type": "string", "example": "utf8"}, "outputEncoding": {"type": "string", "example": "utf8"}, "safe": {"type": "string", "example": "off"}, "cx": {"type": "string", "example": "your-custom-search-engine-id"}, "searchType": {"type": "string", "example": "image"}}}}}}, "context": {"type": "object", "properties": {"title": {"type": "string", "example": "Google"}}}, "searchInformation": {"type": "object", "properties": {"searchTime": {"type": "number", "example": 0.304821}, "formattedSearchTime": {"type": "string", "example": "0.30"}, "totalResults": {"type": "string", "example": "3620000000"}, "formattedTotalResults": {"type": "string", "example": "3,620,000,000"}}}, "items": {"type": "array", "items": {"type": "object", "properties": {"kind": {"type": "string", "example": "customsearch#result"}, "title": {"type": "string", "example": "Test Tube with Blue Liquid - Free Stock Photo - Pexels"}, "htmlTitle": {"type": "string", "example": "<b>Test</b> Tube with Blue Liquid - Free Stock Photo - Pexels"}, "link": {"type": "string", "example": "https://images.pexels.com/photos/2280571/pexels-photo-2280571.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500"}, "displayLink": {"type": "string", "example": "www.pexels.com"}, "snippet": {"type": "string", "example": "Test Tube with Blue Liquid"}, "htmlSnippet": {"type": "string", "example": "<b>Test</b> Tube with Blue Liquid"}, "mime": {"type": "string", "example": "image/jpeg"}, "fileFormat": {"type": "string", "example": "image/jpeg"}, "image": {"type": "object", "properties": {"contextLink": {"type": "string", "example": "https://www.pexels.com/photo/test-tube-with-blue-liquid-2280571/"}, "height": {"type": "integer", "example": 750}, "width": {"type": "integer", "example": 500}, "byteSize": {"type": "integer", "example": 26801}, "thumbnailLink": {"type": "string", "example": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQmY9Xty9QUU9iZF3dp2XF1A-GvUWO8jD7Lfg&usqp=CAU"}, "thumbnailHeight": {"type": "integer", "example": 225}, "thumbnailWidth": {"type": "integer", "example": 150}}}}}}}}, "Error": {"type": "object", "properties": {"code": {"type": "integer"}, "message": {"type": "string"}}}}, "securitySchemes": {"ApiKeyAuth": {"type": "apiKey", "in": "header", "name": "X-API-Key"}}}, "security": [{"ApiKeyAuth": []}]}}, {"title": "Pinterest API", "content": {"openapi": "3.0.0", "info": {"title": "Pinterest API", "description": "The Pinterest API allows developers to access and integrate Pinterest functionality into their applications.", "version": "5.0.0", "contact": {"name": "Pinterest Developer Support", "url": "https://developers.pinterest.com/support/", "email": "api-support@pinterest.com"}, "license": {"name": "Pinterest API Terms of Service", "url": "https://developers.pinterest.com/terms/"}}, "servers": [{"url": "https://api.pinterest.com/v5"}], "tags": [{"name": "Pins", "description": "Operations related to Pins"}, {"name": "Boards", "description": "Operations related to Boards"}, {"name": "Users", "description": "Operations related to Users"}, {"name": "Search", "description": "Search operations"}, {"name": "Analytics", "description": "Analytics operations"}], "paths": {"/v5/pins": {"post": {"summary": "Create Pin", "tags": ["Pins"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PinCreate"}}}}, "responses": {"201": {"description": "Pin created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pin"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"oauth2": ["pins:write"]}]}, "get": {"summary": "Get Pins", "tags": ["Pins"], "parameters": [{"in": "query", "name": "board_id", "schema": {"type": "string"}, "description": "The unique identifier of the board"}, {"in": "query", "name": "limit", "schema": {"type": "integer", "default": 25, "maximum": 100}, "description": "Maximum number of items to return"}, {"in": "query", "name": "bookmark", "schema": {"type": "string"}, "description": "Cursor for next page"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/Pin"}}, "bookmark": {"type": "string"}}}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"oauth2": ["pins:read"]}]}}, "/v5/pins/{pin_id}": {"get": {"summary": "Get Pin", "tags": ["Pins"], "parameters": [{"in": "path", "name": "pin_id", "required": true, "schema": {"type": "string"}, "description": "The unique identifier of the Pin"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pin"}}}}, "404": {"description": "Pin not found"}}, "security": [{"oauth2": ["pins:read"]}]}, "patch": {"summary": "Update Pin", "tags": ["Pins"], "parameters": [{"in": "path", "name": "pin_id", "required": true, "schema": {"type": "string"}, "description": "The unique identifier of the Pin"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PinUpdate"}}}}, "responses": {"200": {"description": "Pin updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Pin"}}}}, "400": {"description": "Bad request"}, "404": {"description": "Pin not found"}}, "security": [{"oauth2": ["pins:write"]}]}, "delete": {"summary": "Delete Pin", "tags": ["Pins"], "parameters": [{"in": "path", "name": "pin_id", "required": true, "schema": {"type": "string"}, "description": "The unique identifier of the Pin"}], "responses": {"204": {"description": "Pin deleted successfully"}, "404": {"description": "Pin not found"}}, "security": [{"oauth2": ["pins:write"]}]}}, "/v5/boards": {"post": {"summary": "Create Board", "tags": ["Boards"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardCreate"}}}}, "responses": {"201": {"description": "Board created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"oauth2": ["boards:write"]}]}, "get": {"summary": "Get Boards", "tags": ["Boards"], "parameters": [{"in": "query", "name": "limit", "schema": {"type": "integer", "default": 25, "maximum": 100}, "description": "Maximum number of items to return"}, {"in": "query", "name": "bookmark", "schema": {"type": "string"}, "description": "Cursor for next page"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/Board"}}, "bookmark": {"type": "string"}}}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"oauth2": ["boards:read"]}]}}, "/v5/boards/{board_id}": {"get": {"summary": "Get Board", "tags": ["Boards"], "parameters": [{"in": "path", "name": "board_id", "required": true, "schema": {"type": "string"}, "description": "The unique identifier of the Board"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "404": {"description": "Board not found"}}, "security": [{"oauth2": ["boards:read"]}]}, "patch": {"summary": "Update Board", "tags": ["Boards"], "parameters": [{"in": "path", "name": "board_id", "required": true, "schema": {"type": "string"}, "description": "The unique identifier of the Board"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardUpdate"}}}}, "responses": {"200": {"description": "Board updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "400": {"description": "Bad request"}, "404": {"description": "Board not found"}}, "security": [{"oauth2": ["boards:write"]}]}, "delete": {"summary": "Delete Board", "tags": ["Boards"], "parameters": [{"in": "path", "name": "board_id", "required": true, "schema": {"type": "string"}, "description": "The unique identifier of the Board"}], "responses": {"204": {"description": "Board deleted successfully"}, "404": {"description": "Board not found"}}, "security": [{"oauth2": ["boards:write"]}]}}, "/v5/user_account": {"get": {"summary": "Get User Account", "tags": ["Users"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Unauthorized"}}, "security": [{"oauth2": ["user_accounts:read"]}]}}, "/v5/search": {"get": {"summary": "Search", "tags": ["Search"], "parameters": [{"in": "query", "name": "query", "required": true, "schema": {"type": "string"}, "description": "Search query"}, {"in": "query", "name": "type", "schema": {"type": "string", "enum": ["pin", "board"]}, "description": "Type of content to search for"}, {"in": "query", "name": "limit", "schema": {"type": "integer", "default": 25, "maximum": 100}, "description": "Maximum number of items to return"}, {"in": "query", "name": "bookmark", "schema": {"type": "string"}, "description": "Cursor for next page"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "properties": {"items": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/Pin"}, {"$ref": "#/components/schemas/Board"}]}}, "bookmark": {"type": "string"}}}}}}, "400": {"description": "Bad request"}}, "security": [{"oauth2": ["read_public"]}]}}, "/v5/user_account/analytics": {"get": {"summary": "Get User Analytics", "tags": ["Analytics"], "parameters": [{"in": "query", "name": "start_date", "required": true, "schema": {"type": "string", "format": "date"}, "description": "Start date for analytics data"}, {"in": "query", "name": "end_date", "required": true, "schema": {"type": "string", "format": "date"}, "description": "End date for analytics data"}, {"in": "query", "name": "metric_types", "required": true, "schema": {"type": "array", "items": {"type": "string", "enum": ["IMPRESSION", "SAVE", "PIN_CLICK", "OUTBOUND_CLICK"]}}, "description": "Types of metrics to retrieve"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Analytics"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"oauth2": ["user_accounts:read_analytics"]}]}}}, "components": {"schemas": {"Pin": {"type": "object", "properties": {"id": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "link": {"type": "string"}, "title": {"type": "string"}, "description": {"type": "string"}, "dominant_color": {"type": "string"}, "alt_text": {"type": "string"}, "board_id": {"type": "string"}, "board_section_id": {"type": "string"}, "media": {"type": "object", "properties": {"media_type": {"type": "string", "enum": ["image", "video"]}, "images": {"type": "object", "properties": {"original": {"$ref": "#/components/schemas/Image"}}}}}}}, "PinCreate": {"type": "object", "required": ["board_id", "media_source"], "properties": {"board_id": {"type": "string"}, "media_source": {"type": "object", "properties": {"source_type": {"type": "string", "enum": ["image_url", "image_base64", "video_url"]}, "content_type": {"type": "string"}, "data": {"type": "string"}}}, "title": {"type": "string"}, "description": {"type": "string"}, "link": {"type": "string"}, "alt_text": {"type": "string"}, "board_section_id": {"type": "string"}}}, "PinUpdate": {"type": "object", "properties": {"title": {"type": "string"}, "description": {"type": "string"}, "link": {"type": "string"}, "alt_text": {"type": "string"}, "board_id": {"type": "string"}, "board_section_id": {"type": "string"}}}, "Board": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "owner": {"$ref": "#/components/schemas/User"}, "privacy": {"type": "string", "enum": ["PUBLIC", "PROTECTED", "SECRET"]}, "created_at": {"type": "string", "format": "date-time"}, "pin_count": {"type": "integer"}, "follower_count": {"type": "integer"}, "collaborator_count": {"type": "integer"}}}, "BoardCreate": {"type": "object", "required": ["name"], "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "privacy": {"type": "string", "enum": ["PUBLIC", "SECRET"]}}}, "BoardUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "privacy": {"type": "string", "enum": ["PUBLIC", "SECRET"]}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "username": {"type": "string"}, "first_name": {"type": "string"}, "last_name": {"type": "string"}, "bio": {"type": "string"}, "created_at": {"type": "string", "format": "date-time"}, "image": {"$ref": "#/components/schemas/Image"}}}, "Image": {"type": "object", "properties": {"url": {"type": "string"}, "width": {"type": "integer"}, "height": {"type": "integer"}}}, "Analytics": {"type": "object", "properties": {"daily_metrics": {"type": "array", "items": {"type": "object", "properties": {"date": {"type": "string", "format": "date"}, "metrics": {"type": "object", "additionalProperties": {"type": "integer"}}}}}}}}, "securitySchemes": {"oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://www.pinterest.com/oauth/", "tokenUrl": "https://api.pinterest.com/v5/oauth/token", "scopes": {"pins:read": "Read Pins", "pins:write": "Write Pins", "boards:read": "Read Boards", "boards:write": "Write Boards", "user_accounts:read": "Read User Accounts", "user_accounts:read_analytics": "Read User Analytics", "read_public": "Read Public Data"}}}}}}}}, {"title": "GoDaddy API", "content": {"openapi": "3.0.0", "info": {"title": "GoDaddy API", "description": "API for managing domains, DNS, and other GoDaddy services", "version": "1.0.0", "contact": {"name": "GoDaddy Support", "url": "https://www.godaddy.com/help", "email": "support@godaddy.com"}}, "servers": [{"url": "https://api.godaddy.com/v1"}], "paths": {"/domains": {"get": {"summary": "List domains", "description": "Get a list of domains for the authenticated user", "tags": ["Domains"], "security": [{"apiKey": []}], "parameters": [{"name": "statuses", "in": "query", "description": "Domain statuses to filter by", "schema": {"type": "array", "items": {"type": "string", "enum": ["ACTIVE", "AWAITING", "CANCELLED", "EXPIRED", "LOCKED", "PENDING_CANCEL", "PENDING_EXPIRATION", "PENDING_RESTORE", "TRANSFERRED_OUT"]}}}, {"name": "limit", "in": "query", "description": "Number of domains to return", "schema": {"type": "integer", "minimum": 1, "maximum": 1000, "default": 100}}, {"name": "marker", "in": "query", "description": "Marker for pagination", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Domain"}}}}}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}}, "post": {"summary": "Purchase a domain", "description": "Purchase a new domain", "tags": ["Domains"], "security": [{"apiKey": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DomainPurchase"}}}}, "responses": {"200": {"description": "Successful purchase", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Domain"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}}}, "/domains/{domain}": {"get": {"summary": "Get domain details", "description": "Get details for a specific domain", "tags": ["Domains"], "security": [{"apiKey": []}], "parameters": [{"name": "domain", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Domain"}}}}, "404": {"description": "Domain not found"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}}}, "/domains/{domain}/records": {"get": {"summary": "Get DNS records", "description": "Get DNS records for a specific domain", "tags": ["DNS"], "security": [{"apiKey": []}], "parameters": [{"name": "domain", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "query", "description": "Record type", "schema": {"type": "string", "enum": ["A", "AAAA", "CNAME", "MX", "NS", "SOA", "SRV", "TXT"]}}, {"name": "name", "in": "query", "description": "Record name", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/DNSRecord"}}}}}, "404": {"description": "Domain not found"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}}, "put": {"summary": "Update DNS records", "description": "Replace all DNS records for a specific domain", "tags": ["DNS"], "security": [{"apiKey": []}], "parameters": [{"name": "domain", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/DNSRecord"}}}}}, "responses": {"200": {"description": "Successful update"}, "400": {"description": "Bad request"}, "404": {"description": "Domain not found"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}}}, "/domains/available": {"post": {"summary": "Check domain availability", "description": "Check availability of multiple domains", "tags": ["Domains"], "security": [{"apiKey": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"domains": {"type": "array", "items": {"type": "string"}}, "checkType": {"type": "string", "enum": ["FAST", "FULL"], "default": "FAST"}}, "required": ["domains"]}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {"$ref": "#/components/schemas/DomainAvailability"}}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}, "403": {"description": "Forbidden"}}}}}, "components": {"securitySchemes": {"apiKey": {"type": "apiKey", "in": "header", "name": "Authorization"}}, "schemas": {"Domain": {"type": "object", "properties": {"domain": {"type": "string"}, "domainId": {"type": "integer"}, "status": {"type": "string", "enum": ["ACTIVE", "AWAITING", "CANCELLED", "EXPIRED", "LOCKED", "PENDING_CANCEL", "PENDING_EXPIRATION", "PENDING_RESTORE", "TRANSFERRED_OUT"]}, "expirationDate": {"type": "string", "format": "date-time"}, "createdAt": {"type": "string", "format": "date-time"}, "renewAuto": {"type": "boolean"}, "privacy": {"type": "boolean"}, "locked": {"type": "boolean"}, "transferProtected": {"type": "boolean"}, "nameServers": {"type": "array", "items": {"type": "string"}}, "contactRegistrant": {"$ref": "#/components/schemas/Contact"}, "contactAdmin": {"$ref": "#/components/schemas/Contact"}, "contactTech": {"$ref": "#/components/schemas/Contact"}, "contactBilling": {"$ref": "#/components/schemas/Contact"}}}, "Contact": {"type": "object", "properties": {"nameFirst": {"type": "string"}, "nameLast": {"type": "string"}, "organization": {"type": "string"}, "email": {"type": "string"}, "phone": {"type": "string"}, "addressMailing": {"$ref": "#/components/schemas/Address"}}}, "Address": {"type": "object", "properties": {"address1": {"type": "string"}, "address2": {"type": "string"}, "city": {"type": "string"}, "state": {"type": "string"}, "postalCode": {"type": "string"}, "country": {"type": "string"}}}, "DNSRecord": {"type": "object", "properties": {"type": {"type": "string", "enum": ["A", "AAAA", "CNAME", "MX", "NS", "SOA", "SRV", "TXT"]}, "name": {"type": "string"}, "data": {"type": "string"}, "priority": {"type": "integer"}, "ttl": {"type": "integer"}}, "required": ["type", "name", "data"]}, "DomainPurchase": {"type": "object", "properties": {"domain": {"type": "string"}, "period": {"type": "integer", "minimum": 1, "maximum": 10}, "nameServers": {"type": "array", "items": {"type": "string"}}, "renewAuto": {"type": "boolean"}, "privacy": {"type": "boolean"}, "contactRegistrant": {"$ref": "#/components/schemas/Contact"}, "contactAdmin": {"$ref": "#/components/schemas/Contact"}, "contactTech": {"$ref": "#/components/schemas/Contact"}, "contactBilling": {"$ref": "#/components/schemas/Contact"}}, "required": ["domain", "period", "contactRegistrant", "contactAdmin", "contactTech", "contactBilling"]}, "DomainAvailability": {"type": "object", "properties": {"available": {"type": "boolean"}, "currency": {"type": "string"}, "definitive": {"type": "boolean"}, "domain": {"type": "string"}, "period": {"type": "integer"}, "price": {"type": "number"}}}}}}}, {"title": "Squarespace API", "content": {"openapi": "3.0.0", "info": {"title": "Squarespace API", "description": "API for interacting with Squarespace websites and e-commerce platforms", "version": "1.0.0", "contact": {"name": "Squarespace Support", "url": "https://support.squarespace.com", "email": "api-support@squarespace.com"}}, "servers": [{"url": "https://api.squarespace.com/v1"}], "tags": [{"name": "Authentication", "description": "Authentication operations"}, {"name": "Websites", "description": "Website management operations"}, {"name": "Pages", "description": "Page management operations"}, {"name": "Products", "description": "E-commerce product operations"}, {"name": "Orders", "description": "E-commerce order operations"}, {"name": "Inventory", "description": "Inventory management operations"}, {"name": "Customers", "description": "Customer management operations"}, {"name": "Analytics", "description": "Analytics and reporting operations"}], "paths": {"/auth/token": {"post": {"tags": ["Authentication"], "summary": "Get access token", "description": "Authenticate and receive an access token", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthRequest"}}}}, "responses": {"200": {"description": "Successful authentication", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthResponse"}}}}, "401": {"description": "Unauthorized"}}}}, "/websites": {"get": {"tags": ["Websites"], "summary": "List websites", "description": "Get a list of websites associated with the authenticated account", "security": [{"bearerAuth": []}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Website"}}}}}, "401": {"description": "Unauthorized"}}}}, "/websites/{websiteId}": {"get": {"tags": ["Websites"], "summary": "Get website details", "description": "Get details of a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Website"}}}}, "404": {"description": "Website not found"}}}}, "/websites/{websiteId}/pages": {"get": {"tags": ["Pages"], "summary": "List pages", "description": "Get a list of pages for a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Page"}}}}}, "404": {"description": "Website not found"}}}, "post": {"tags": ["Pages"], "summary": "Create page", "description": "Create a new page for a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PageCreate"}}}}, "responses": {"201": {"description": "Page created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Page"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "Website not found"}}}}, "/websites/{websiteId}/pages/{pageId}": {"get": {"tags": ["Pages"], "summary": "Get page details", "description": "Get details of a specific page", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "pageId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Page"}}}}, "404": {"description": "Page not found"}}}, "put": {"tags": ["Pages"], "summary": "Update page", "description": "Update an existing page", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "pageId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PageUpdate"}}}}, "responses": {"200": {"description": "Page updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Page"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "Page not found"}}}, "delete": {"tags": ["Pages"], "summary": "Delete page", "description": "Delete a specific page", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "pageId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Page deleted successfully"}, "404": {"description": "Page not found"}}}}, "/websites/{websiteId}/products": {"get": {"tags": ["Products"], "summary": "List products", "description": "Get a list of products for a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}}, "404": {"description": "Website not found"}}}, "post": {"tags": ["Products"], "summary": "Create product", "description": "Create a new product for a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductCreate"}}}}, "responses": {"201": {"description": "Product created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "Website not found"}}}}, "/websites/{websiteId}/products/{productId}": {"get": {"tags": ["Products"], "summary": "Get product details", "description": "Get details of a specific product", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}, "put": {"tags": ["Products"], "summary": "Update product", "description": "Update an existing product", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductUpdate"}}}}, "responses": {"200": {"description": "Product updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "Product not found"}}}, "delete": {"tags": ["Products"], "summary": "Delete product", "description": "Delete a specific product", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "Product deleted successfully"}, "404": {"description": "Product not found"}}}}, "/websites/{websiteId}/orders": {"get": {"tags": ["Orders"], "summary": "List orders", "description": "Get a list of orders for a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Order"}}}}}, "404": {"description": "Website not found"}}}}, "/websites/{websiteId}/orders/{orderId}": {"get": {"tags": ["Orders"], "summary": "Get order details", "description": "Get details of a specific order", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "orderId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}, "404": {"description": "Order not found"}}}, "put": {"tags": ["Orders"], "summary": "Update order", "description": "Update an existing order", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "orderId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrderUpdate"}}}}, "responses": {"200": {"description": "Order updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "Order not found"}}}}, "/websites/{websiteId}/inventory": {"get": {"tags": ["Inventory"], "summary": "Get inventory", "description": "Get inventory information for a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/InventoryItem"}}}}}, "404": {"description": "Website not found"}}}}, "/websites/{websiteId}/inventory/{productId}": {"put": {"tags": ["Inventory"], "summary": "Update inventory", "description": "Update inventory for a specific product", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InventoryUpdate"}}}}, "responses": {"200": {"description": "Inventory updated successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InventoryItem"}}}}, "400": {"description": "Invalid input"}, "404": {"description": "Product not found"}}}}, "/websites/{websiteId}/customers": {"get": {"tags": ["Customers"], "summary": "List customers", "description": "Get a list of customers for a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Customer"}}}}}, "404": {"description": "Website not found"}}}}, "/websites/{websiteId}/customers/{customerId}": {"get": {"tags": ["Customers"], "summary": "Get customer details", "description": "Get details of a specific customer", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "customerId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Customer"}}}}, "404": {"description": "Customer not found"}}}}, "/websites/{websiteId}/analytics": {"get": {"tags": ["Analytics"], "summary": "Get analytics", "description": "Get analytics data for a specific website", "security": [{"bearerAuth": []}], "parameters": [{"name": "websiteId", "in": "path", "required": true, "schema": {"type": "string"}}, {"name": "startDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}}, {"name": "endDate", "in": "query", "required": true, "schema": {"type": "string", "format": "date"}}], "responses": {"200": {"description": "Successful operation", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Analytics"}}}}, "404": {"description": "Website not found"}}}}}, "components": {"schemas": {"AuthRequest": {"type": "object", "properties": {"clientId": {"type": "string"}, "clientSecret": {"type": "string"}}, "required": ["clientId", "clientSecret"]}, "AuthResponse": {"type": "object", "properties": {"accessToken": {"type": "string"}, "tokenType": {"type": "string"}, "expiresIn": {"type": "integer"}}}, "Website": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "url": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "Page": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "url": {"type": "string"}, "content": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "PageCreate": {"type": "object", "properties": {"title": {"type": "string"}, "content": {"type": "string"}}, "required": ["title", "content"]}, "PageUpdate": {"type": "object", "properties": {"title": {"type": "string"}, "content": {"type": "string"}}}, "Product": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "images": {"type": "array", "items": {"type": "string"}}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "ProductCreate": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "images": {"type": "array", "items": {"type": "string"}}}, "required": ["name", "price", "currency"]}, "ProductUpdate": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "price": {"type": "number"}, "currency": {"type": "string"}, "images": {"type": "array", "items": {"type": "string"}}}}, "Order": {"type": "object", "properties": {"id": {"type": "string"}, "customerId": {"type": "string"}, "items": {"type": "array", "items": {"$ref": "#/components/schemas/OrderItem"}}, "total": {"type": "number"}, "currency": {"type": "string"}, "status": {"type": "string", "enum": ["pending", "processing", "shipped", "delivered", "cancelled"]}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "OrderItem": {"type": "object", "properties": {"productId": {"type": "string"}, "quantity": {"type": "integer"}, "price": {"type": "number"}}}, "OrderUpdate": {"type": "object", "properties": {"status": {"type": "string", "enum": ["pending", "processing", "shipped", "delivered", "cancelled"]}}, "required": ["status"]}, "InventoryItem": {"type": "object", "properties": {"productId": {"type": "string"}, "quantity": {"type": "integer"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "InventoryUpdate": {"type": "object", "properties": {"quantity": {"type": "integer"}}, "required": ["quantity"]}, "Customer": {"type": "object", "properties": {"id": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string"}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}, "Analytics": {"type": "object", "properties": {"pageViews": {"type": "integer"}, "uniqueVisitors": {"type": "integer"}, "bounceRate": {"type": "number"}, "averageSessionDuration": {"type": "number"}, "topPages": {"type": "array", "items": {"$ref": "#/components/schemas/AnalyticsPage"}}}}, "AnalyticsPage": {"type": "object", "properties": {"url": {"type": "string"}, "pageViews": {"type": "integer"}}}}, "securitySchemes": {"bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}}}}}, {"title": "LinkedIn API", "content": {"openapi": "3.0.0", "info": {"title": "LinkedIn API", "description": "API for interacting with LinkedIn's professional network", "version": "1.0.0", "contact": {"name": "LinkedIn API Support", "url": "https://developer.linkedin.com/support", "email": "api-support@linkedin.com"}}, "servers": [{"url": "https://api.linkedin.com/v2"}], "paths": {"/me": {"get": {"summary": "Get current user's profile", "tags": ["Profile"], "security": [{"oauth2": ["r_liteprofile"]}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Profile"}}}}}}}, "/people/{id}": {"get": {"summary": "Get a member's profile", "tags": ["Profile"], "security": [{"oauth2": ["r_basicprofile"]}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Member's LinkedIn ID"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Profile"}}}}}}}, "/connections": {"get": {"summary": "Get user's connections", "tags": ["Connections"], "security": [{"oauth2": ["r_network"]}], "parameters": [{"name": "start", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "Starting index for pagination"}, {"name": "count", "in": "query", "schema": {"type": "integer", "default": 50, "maximum": 500}, "description": "Number of results to return"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Connection"}}}}}}}}, "/jobs/search": {"get": {"summary": "Search for jobs", "tags": ["Jobs"], "security": [{"oauth2": ["r_jobsearch"]}], "parameters": [{"name": "keywords", "in": "query", "schema": {"type": "string"}, "description": "Keywords to search for"}, {"name": "location", "in": "query", "schema": {"type": "string"}, "description": "Location to search in"}, {"name": "start", "in": "query", "schema": {"type": "integer", "default": 0}, "description": "Starting index for pagination"}, {"name": "count", "in": "query", "schema": {"type": "integer", "default": 10, "maximum": 100}, "description": "Number of results to return"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job"}}}}}}}}, "/companies/{id}": {"get": {"summary": "Get company profile", "tags": ["Companies"], "security": [{"oauth2": ["r_org_profile"]}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string"}, "description": "Company's LinkedIn ID"}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Company"}}}}}}}, "/shares": {"post": {"summary": "Create a share", "tags": ["Shares"], "security": [{"oauth2": ["w_member_social"]}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ShareRequest"}}}}, "responses": {"201": {"description": "Share created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Share"}}}}}}}, "/invitations": {"post": {"summary": "Send an invitation", "tags": ["Invitations"], "security": [{"oauth2": ["w_member_social"]}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InvitationRequest"}}}}, "responses": {"201": {"description": "Invitation sent successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Invitation"}}}}}}}}, "components": {"securitySchemes": {"oauth2": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://www.linkedin.com/oauth/v2/authorization", "tokenUrl": "https://www.linkedin.com/oauth/v2/accessToken", "scopes": {"r_liteprofile": "Read basic profile", "r_basicprofile": "Read full profile", "r_network": "Read network", "r_jobsearch": "Read job search", "r_org_profile": "Read organization profile", "w_member_social": "Write member social actions"}}}}}, "schemas": {"Profile": {"type": "object", "properties": {"id": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "headline": {"type": "string"}, "profilePicture": {"type": "string", "format": "uri"}, "industry": {"type": "string"}, "location": {"type": "object", "properties": {"country": {"type": "string"}, "city": {"type": "string"}}}, "positions": {"type": "array", "items": {"$ref": "#/components/schemas/Position"}}, "educations": {"type": "array", "items": {"$ref": "#/components/schemas/Education"}}, "skills": {"type": "array", "items": {"type": "string"}}}}, "Position": {"type": "object", "properties": {"title": {"type": "string"}, "company": {"type": "string"}, "startDate": {"type": "string", "format": "date"}, "endDate": {"type": "string", "format": "date"}, "description": {"type": "string"}}}, "Education": {"type": "object", "properties": {"schoolName": {"type": "string"}, "degree": {"type": "string"}, "fieldOfStudy": {"type": "string"}, "startDate": {"type": "string", "format": "date"}, "endDate": {"type": "string", "format": "date"}}}, "Connection": {"type": "object", "properties": {"id": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "headline": {"type": "string"}, "profilePicture": {"type": "string", "format": "uri"}}}, "Job": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "company": {"type": "string"}, "location": {"type": "string"}, "description": {"type": "string"}, "postedDate": {"type": "string", "format": "date-time"}, "applyUrl": {"type": "string", "format": "uri"}}}, "Company": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "website": {"type": "string", "format": "uri"}, "industry": {"type": "string"}, "logo": {"type": "string", "format": "uri"}, "employeeCount": {"type": "integer"}, "specialties": {"type": "array", "items": {"type": "string"}}}}, "ShareRequest": {"type": "object", "properties": {"content": {"type": "object", "properties": {"contentEntities": {"type": "array", "items": {"type": "object", "properties": {"entityLocation": {"type": "string", "format": "uri"}}}}, "title": {"type": "string"}, "description": {"type": "string"}}}, "distribution": {"type": "object", "properties": {"linkedInDistributionTarget": {"type": "object"}}}, "owner": {"type": "string"}, "subject": {"type": "string"}, "text": {"type": "string"}}}, "Share": {"type": "object", "properties": {"id": {"type": "string"}, "created": {"type": "string", "format": "date-time"}, "author": {"type": "string"}, "content": {"type": "object", "properties": {"title": {"type": "string"}, "description": {"type": "string"}}}}}, "InvitationRequest": {"type": "object", "properties": {"invitee": {"type": "object", "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string", "format": "email"}}}, "message": {"type": "string"}}}, "Invitation": {"type": "object", "properties": {"id": {"type": "string"}, "status": {"type": "string", "enum": ["PENDING", "ACCEPTED", "IGNORED"]}, "invitee": {"type": "object", "properties": {"firstName": {"type": "string"}, "lastName": {"type": "string"}, "email": {"type": "string", "format": "email"}}}, "sentAt": {"type": "string", "format": "date-time"}}}}}}}, {"title": "TripAdvisor API", "content": {"openapi": "3.0.0", "info": {"title": "TripAdvisor API", "description": "API for accessing TripAdvisor data and functionality", "version": "1.0.0", "contact": {"name": "TripAdvisor API Support", "url": "https://developer.tripadvisor.com/support", "email": "api-support@tripadvisor.com"}}, "servers": [{"url": "https://api.tripadvisor.com/v1"}], "paths": {"/locations": {"get": {"summary": "Search for locations", "description": "Search for locations based on various criteria", "parameters": [{"name": "query", "in": "query", "description": "Search query", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "query", "description": "Type of location", "schema": {"type": "string", "enum": ["hotel", "restaurant", "attraction"]}}, {"name": "latitude", "in": "query", "description": "Latitude for location-based search", "schema": {"type": "number", "format": "float"}}, {"name": "longitude", "in": "query", "description": "Longitude for location-based search", "schema": {"type": "number", "format": "float"}}, {"name": "limit", "in": "query", "description": "Number of results to return", "schema": {"type": "integer", "default": 20, "maximum": 50}}, {"name": "offset", "in": "query", "description": "Offset for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationList"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/locations/{locationId}": {"get": {"summary": "Get location details", "description": "Get detailed information about a specific location", "parameters": [{"name": "locationId", "in": "path", "description": "ID of the location", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Location"}}}}, "404": {"description": "Location not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/locations/{locationId}/reviews": {"get": {"summary": "Get location reviews", "description": "Get reviews for a specific location", "parameters": [{"name": "locationId", "in": "path", "description": "ID of the location", "required": true, "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Number of reviews to return", "schema": {"type": "integer", "default": 20, "maximum": 50}}, {"name": "offset", "in": "query", "description": "Offset for pagination", "schema": {"type": "integer", "default": 0}}, {"name": "sort", "in": "query", "description": "Sort order for reviews", "schema": {"type": "string", "enum": ["recent", "highest_rated", "lowest_rated"], "default": "recent"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReviewList"}}}}, "404": {"description": "Location not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}, "post": {"summary": "Add a review", "description": "Add a new review for a specific location", "parameters": [{"name": "locationId", "in": "path", "description": "ID of the location", "required": true, "schema": {"type": "string"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReviewInput"}}}}, "responses": {"201": {"description": "Review created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Review"}}}}, "400": {"description": "Bad request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}, "404": {"description": "Location not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/users/{userId}": {"get": {"summary": "Get user profile", "description": "Get profile information for a specific user", "parameters": [{"name": "userId", "in": "path", "description": "ID of the user", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "404": {"description": "User not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}, "/users/{userId}/reviews": {"get": {"summary": "Get user reviews", "description": "Get reviews written by a specific user", "parameters": [{"name": "userId", "in": "path", "description": "ID of the user", "required": true, "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "Number of reviews to return", "schema": {"type": "integer", "default": 20, "maximum": 50}}, {"name": "offset", "in": "query", "description": "Offset for pagination", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReviewList"}}}}, "404": {"description": "User not found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}}}}, "components": {"schemas": {"LocationList": {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Location"}}, "pagination": {"$ref": "#/components/schemas/Pagination"}}}, "Location": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string", "enum": ["hotel", "restaurant", "attraction"]}, "address": {"type": "string"}, "latitude": {"type": "number", "format": "float"}, "longitude": {"type": "number", "format": "float"}, "rating": {"type": "number", "format": "float"}, "num_reviews": {"type": "integer"}, "description": {"type": "string"}, "photo_url": {"type": "string"}, "website": {"type": "string"}, "phone": {"type": "string"}}}, "ReviewList": {"type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/components/schemas/Review"}}, "pagination": {"$ref": "#/components/schemas/Pagination"}}}, "Review": {"type": "object", "properties": {"id": {"type": "string"}, "user": {"$ref": "#/components/schemas/User"}, "location": {"$ref": "#/components/schemas/Location"}, "rating": {"type": "integer", "minimum": 1, "maximum": 5}, "title": {"type": "string"}, "text": {"type": "string"}, "date": {"type": "string", "format": "date-time"}, "helpful_votes": {"type": "integer"}}}, "ReviewInput": {"type": "object", "required": ["rating", "title", "text"], "properties": {"rating": {"type": "integer", "minimum": 1, "maximum": 5}, "title": {"type": "string"}, "text": {"type": "string"}}}, "User": {"type": "object", "properties": {"id": {"type": "string"}, "username": {"type": "string"}, "name": {"type": "string"}, "avatar_url": {"type": "string"}, "location": {"type": "string"}, "contributions": {"type": "integer"}, "joined_date": {"type": "string", "format": "date"}}}, "Pagination": {"type": "object", "properties": {"total": {"type": "integer"}, "limit": {"type": "integer"}, "offset": {"type": "integer"}}}, "Error": {"type": "object", "properties": {"code": {"type": "integer"}, "message": {"type": "string"}}}}, "securitySchemes": {"apiKey": {"type": "apiKey", "name": "api_key", "in": "header"}}}, "security": [{"apiKey": []}]}}, {"title": "Nvidia API", "content": {"openapi": "3.0.0", "info": {"title": "Nvidia API", "description": "API for accessing Nvidia products, services, and corporate information", "version": "1.0.0", "contact": {"name": "Nvidia API Support", "url": "https://developer.nvidia.com/support", "email": "api-support@nvidia.com"}}, "servers": [{"url": "https://api.nvidia.com/v1"}], "tags": [{"name": "Products", "description": "Endpoints related to Nvidia products"}, {"name": "Services", "description": "Endpoints related to Nvidia services"}, {"name": "Corporate", "description": "Endpoints related to corporate information"}, {"name": "Support", "description": "Endpoints related to customer support"}], "paths": {"/products": {"get": {"summary": "List all products", "tags": ["Products"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Product"}}}}}}}}, "/products/{productId}": {"get": {"summary": "Get product details", "tags": ["Products"], "parameters": [{"name": "productId", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}}}, "404": {"description": "Product not found"}}}}, "/drivers": {"get": {"summary": "List available drivers", "tags": ["Products"], "parameters": [{"name": "productId", "in": "query", "schema": {"type": "string"}}, {"name": "os", "in": "query", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Driver"}}}}}}}}, "/geforce-now/games": {"get": {"summary": "List GeForce NOW games", "tags": ["Services"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Game"}}}}}}}}, "/geforce-now/servers": {"get": {"summary": "Get GeForce NOW server status", "tags": ["Services"], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ServerStatus"}}}}}}}}, "/corporate/financials": {"get": {"summary": "Get financial reports", "tags": ["Corporate"], "parameters": [{"name": "year", "in": "query", "schema": {"type": "integer"}}, {"name": "quarter", "in": "query", "schema": {"type": "integer", "minimum": 1, "maximum": 4}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FinancialReport"}}}}}}}, "/corporate/press-releases": {"get": {"summary": "Get press releases", "tags": ["Corporate"], "parameters": [{"name": "limit", "in": "query", "schema": {"type": "integer", "default": 10}}, {"name": "offset", "in": "query", "schema": {"type": "integer", "default": 0}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PressRelease"}}}}}}}}, "/support/kb": {"get": {"summary": "Search knowledge base", "tags": ["Support"], "parameters": [{"name": "query", "in": "query", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/KBArticle"}}}}}}}}, "/support/tickets": {"post": {"summary": "Create support ticket", "tags": ["Support"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SupportTicket"}}}}, "responses": {"201": {"description": "Ticket created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SupportTicket"}}}}}}}}, "components": {"schemas": {"Product": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "category": {"type": "string"}, "description": {"type": "string"}, "specifications": {"type": "object"}, "price": {"type": "number"}, "releaseDate": {"type": "string", "format": "date"}}}, "Driver": {"type": "object", "properties": {"id": {"type": "string"}, "version": {"type": "string"}, "releaseDate": {"type": "string", "format": "date"}, "supportedProducts": {"type": "array", "items": {"type": "string"}}, "os": {"type": "string"}, "downloadUrl": {"type": "string"}}}, "Game": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "publisher": {"type": "string"}, "genre": {"type": "string"}, "releaseDate": {"type": "string", "format": "date"}}}, "ServerStatus": {"type": "object", "properties": {"region": {"type": "string"}, "status": {"type": "string", "enum": ["online", "offline", "maintenance"]}, "latency": {"type": "number"}, "capacity": {"type": "number"}}}, "FinancialReport": {"type": "object", "properties": {"year": {"type": "integer"}, "quarter": {"type": "integer"}, "revenue": {"type": "number"}, "netIncome": {"type": "number"}, "eps": {"type": "number"}}}, "PressRelease": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "date": {"type": "string", "format": "date"}, "content": {"type": "string"}}}, "KBArticle": {"type": "object", "properties": {"id": {"type": "string"}, "title": {"type": "string"}, "content": {"type": "string"}, "category": {"type": "string"}, "lastUpdated": {"type": "string", "format": "date-time"}}}, "SupportTicket": {"type": "object", "properties": {"id": {"type": "string"}, "subject": {"type": "string"}, "description": {"type": "string"}, "category": {"type": "string"}, "priority": {"type": "string", "enum": ["low", "medium", "high"]}, "status": {"type": "string", "enum": ["open", "in_progress", "resolved", "closed"]}, "createdAt": {"type": "string", "format": "date-time"}, "updatedAt": {"type": "string", "format": "date-time"}}}}}}}, {"title": "HelloSign API", "content": {"openapi": "3.0.0", "info": {"title": "HelloSign API", "description": "API for electronic signature and document management", "version": "1.0.0", "contact": {"name": "HelloSign Support", "url": "https://www.hellosign.com/contact", "email": "support@hellosign.com"}}, "servers": [{"url": "https://api.hellosign.com/v3"}], "paths": {"/signature_request/send": {"post": {"summary": "Send a signature request", "description": "Creates and sends a new SignatureRequest with the submitted documents", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SignatureRequestSend"}}}}, "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SignatureRequestResponse"}}}}, "400": {"description": "Bad request"}, "401": {"description": "Unauthorized"}}, "security": [{"ApiKeyAuth": []}]}}, "/signature_request/{signature_request_id}": {"get": {"summary": "Get signature request", "description": "Retrieves a SignatureRequest with the given signature_request_id", "parameters": [{"name": "signature_request_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SignatureRequestResponse"}}}}, "404": {"description": "Signature request not found"}}, "security": [{"ApiKeyAuth": []}]}}, "/signature_request/list": {"get": {"summary": "List signature requests", "description": "Returns a list of SignatureRequests that you can access", "parameters": [{"name": "page", "in": "query", "schema": {"type": "integer", "default": 1}}, {"name": "page_size", "in": "query", "schema": {"type": "integer", "default": 20}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SignatureRequestList"}}}}}, "security": [{"ApiKeyAuth": []}]}}, "/template/list": {"get": {"summary": "List templates", "description": "Returns a list of your Templates", "parameters": [{"name": "page", "in": "query", "schema": {"type": "integer", "default": 1}}, {"name": "page_size", "in": "query", "schema": {"type": "integer", "default": 20}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TemplateList"}}}}}, "security": [{"ApiKeyAuth": []}]}}, "/template/{template_id}": {"get": {"summary": "Get template", "description": "Retrieves a Template with the given template_id", "parameters": [{"name": "template_id", "in": "path", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Template"}}}}, "404": {"description": "Template not found"}}, "security": [{"ApiKeyAuth": []}]}}, "/account": {"get": {"summary": "Get account", "description": "Returns the properties of your Account", "responses": {"200": {"description": "Successful response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Account"}}}}}, "security": [{"ApiKeyAuth": []}]}}}, "components": {"schemas": {"SignatureRequestSend": {"type": "object", "required": ["signers", "files"], "properties": {"title": {"type": "string"}, "subject": {"type": "string"}, "message": {"type": "string"}, "signers": {"type": "array", "items": {"$ref": "#/components/schemas/Signer"}}, "files": {"type": "array", "items": {"type": "string", "format": "binary"}}, "metadata": {"type": "object", "additionalProperties": {"type": "string"}}}}, "Signer": {"type": "object", "required": ["email_address", "name"], "properties": {"email_address": {"type": "string", "format": "email"}, "name": {"type": "string"}, "order": {"type": "integer"}}}, "SignatureRequestResponse": {"type": "object", "properties": {"signature_request": {"$ref": "#/components/schemas/SignatureRequest"}}}, "SignatureRequest": {"type": "object", "properties": {"signature_request_id": {"type": "string"}, "title": {"type": "string"}, "subject": {"type": "string"}, "message": {"type": "string"}, "is_complete": {"type": "boolean"}, "has_error": {"type": "boolean"}, "files_url": {"type": "string"}, "signing_url": {"type": "string"}, "details_url": {"type": "string"}, "cc_email_addresses": {"type": "array", "items": {"type": "string"}}, "signing_redirect_url": {"type": "string"}, "custom_fields": {"type": "array", "items": {"$ref": "#/components/schemas/CustomField"}}, "metadata": {"type": "object", "additionalProperties": {"type": "string"}}}}, "CustomField": {"type": "object", "properties": {"name": {"type": "string"}, "value": {"type": "string"}, "type": {"type": "string", "enum": ["text", "checkbox"]}, "required": {"type": "boolean"}}}, "SignatureRequestList": {"type": "object", "properties": {"list_info": {"$ref": "#/components/schemas/ListInfo"}, "signature_requests": {"type": "array", "items": {"$ref": "#/components/schemas/SignatureRequest"}}}}, "ListInfo": {"type": "object", "properties": {"page": {"type": "integer"}, "num_pages": {"type": "integer"}, "num_results": {"type": "integer"}, "page_size": {"type": "integer"}}}, "TemplateList": {"type": "object", "properties": {"list_info": {"$ref": "#/components/schemas/ListInfo"}, "templates": {"type": "array", "items": {"$ref": "#/components/schemas/Template"}}}}, "Template": {"type": "object", "properties": {"template_id": {"type": "string"}, "title": {"type": "string"}, "message": {"type": "string"}, "signer_roles": {"type": "array", "items": {"$ref": "#/components/schemas/SignerRole"}}, "cc_roles": {"type": "array", "items": {"type": "string"}}, "documents": {"type": "array", "items": {"$ref": "#/components/schemas/Document"}}, "custom_fields": {"type": "array", "items": {"$ref": "#/components/schemas/CustomField"}}, "named_form_fields": {"type": "array", "items": {"$ref": "#/components/schemas/NamedFormField"}}}}, "SignerRole": {"type": "object", "properties": {"name": {"type": "string"}, "order": {"type": "integer"}}}, "Document": {"type": "object", "properties": {"name": {"type": "string"}, "index": {"type": "integer"}}}, "NamedFormField": {"type": "object", "properties": {"name": {"type": "string"}, "type": {"type": "string", "enum": ["text", "checkbox", "date", "signature"]}, "signer": {"type": "string"}, "x": {"type": "integer"}, "y": {"type": "integer"}, "width": {"type": "integer"}, "height": {"type": "integer"}, "required": {"type": "boolean"}}}, "Account": {"type": "object", "properties": {"account_id": {"type": "string"}, "email_address": {"type": "string"}, "is_paid_hs": {"type": "boolean"}, "is_paid_hf": {"type": "boolean"}, "quotas": {"$ref": "#/components/schemas/Quotas"}}}, "Quotas": {"type": "object", "properties": {"api_signature_requests_left": {"type": "integer"}, "documents_left": {"type": "integer"}, "templates_left": {"type": "integer"}}}}, "securitySchemes": {"ApiKeyAuth": {"type": "apiKey", "in": "header", "name": "Authorization"}}}}}]