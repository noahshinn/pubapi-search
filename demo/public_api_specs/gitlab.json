{
  "openapi": "3.0.0",
  "info": {
    "title": "GitLab API",
    "description": "API specification for GitLab, a web-based DevOps lifecycle tool",
    "version": "4.0.0",
    "contact": {
      "name": "GitLab",
      "url": "https://gitlab.com",
      "email": "support@gitlab.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://gitlab.com/api/v4",
      "description": "GitLab.com API"
    },
    {
      "url": "https://{custom_url}/api/v4",
      "description": "Self-hosted GitLab instance",
      "variables": {
        "custom_url": {
          "default": "gitlab.example.com",
          "description": "Your GitLab instance URL"
        }
      }
    }
  ],
  "paths": {
    "/projects": {
      "get": {
        "summary": "List projects",
        "description": "Get a list of projects accessible by the authenticated user",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "membership",
            "in": "query",
            "description": "Limit by projects that the current user is a member of",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of projects matching the search criteria",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create project",
        "description": "Creates a new project owned by the authenticated user",
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "summary": "Get project",
        "description": "Get a specific project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID or URL-encoded path of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project",
        "description": "Marks a project to be deleted",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID or URL-encoded path of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Project deletion scheduled"
          }
        }
      }
    },
    "/projects/{id}/repository/branches": {
      "get": {
        "summary": "List branches",
        "description": "Get a list of repository branches from a project",
        "tags": [
          "Branches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID or URL-encoded path of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Branch"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create branch",
        "description": "Creates a new branch in the repository",
        "tags": [
          "Branches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID or URL-encoded path of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BranchCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Branch created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/merge_requests": {
      "get": {
        "summary": "List merge requests",
        "description": "Get all merge requests for this project",
        "tags": [
          "Merge Requests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID or URL-encoded path of the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return all merge requests or just those that are opened, closed, or merged",
            "schema": {
              "type": "string",
              "enum": [
                "opened",
                "closed",
                "merged",
                "all"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MergeRequest"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create merge request",
        "description": "Creates a new merge request",
        "tags": [
          "Merge Requests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID or URL-encoded path of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeRequestCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Merge request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/issues": {
      "get": {
        "summary": "List project issues",
        "description": "Get a list of project issues",
        "tags": [
          "Issues"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID or URL-encoded path of the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return all issues or just those that are opened or closed",
            "schema": {
              "type": "string",
              "enum": [
                "opened",
                "closed",
                "all"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create issue",
        "description": "Creates a new project issue",
        "tags": [
          "Issues"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID or URL-encoded path of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Issue created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "star_count": {
            "type": "integer"
          },
          "forks_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectCreate": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "private",
              "internal",
              "public"
            ]
          },
          "initialize_with_readme": {
            "type": "boolean"
          }
        }
      },
      "Branch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "protected": {
            "type": "boolean"
          },
          "merged": {
            "type": "boolean"
          },
          "developers_can_push": {
            "type": "boolean"
          },
          "developers_can_merge": {
            "type": "boolean"
          },
          "commit": {
            "$ref": "#/components/schemas/Commit"
          }
        }
      },
      "BranchCreate": {
        "type": "object",
        "required": [
          "branch",
          "ref"
        ],
        "properties": {
          "branch": {
            "type": "string",
            "description": "The name of the new branch"
          },
          "ref": {
            "type": "string",
            "description": "The branch name or commit SHA to create branch from"
          }
        }
      },
      "Commit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "short_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "author_name": {
            "type": "string"
          },
          "author_email": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MergeRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "iid": {
            "type": "integer"
          },
          "project_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "opened",
              "closed",
              "merged"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "source_branch": {
            "type": "string"
          },
          "target_branch": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "MergeRequestCreate": {
        "type": "object",
        "required": [
          "source_branch",
          "target_branch",
          "title"
        ],
        "properties": {
          "source_branch": {
            "type": "string"
          },
          "target_branch": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "assignee_id": {
            "type": "integer"
          },
          "remove_source_branch": {
            "type": "boolean"
          }
        }
      },
      "Issue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "iid": {
            "type": "integer"
          },
          "project_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "opened",
              "closed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "IssueCreate": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "assignee_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "milestone_id": {
            "type": "integer"
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated label names"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}