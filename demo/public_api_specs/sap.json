{
  "openapi": "3.0.0",
  "info": {
    "title": "SAP API",
    "description": "API for interacting with SAP ERP system",
    "version": "1.0.0",
    "contact": {
      "name": "SAP API Support",
      "email": "api-support@sap.com",
      "url": "https://api.sap.com/support"
    }
  },
  "servers": [
    {
      "url": "https://api.sap.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://api-test.sap.com/v1",
      "description": "Test server"
    }
  ],
  "tags": [
    {
      "name": "Sales",
      "description": "Sales-related operations"
    },
    {
      "name": "Finance",
      "description": "Finance-related operations"
    },
    {
      "name": "HR",
      "description": "Human Resources operations"
    },
    {
      "name": "Inventory",
      "description": "Inventory management operations"
    }
  ],
  "paths": {
    "/sales/orders": {
      "get": {
        "summary": "List sales orders",
        "tags": [
          "Sales"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "cancelled"
              ]
            },
            "description": "Filter orders by status"
          },
          {
            "in": "query",
            "name": "dateFrom",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter orders from this date"
          },
          {
            "in": "query",
            "name": "dateTo",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter orders to this date"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesOrder"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new sales order",
        "tags": [
          "Sales"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sales order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesOrder"
                }
              }
            }
          }
        }
      }
    },
    "/sales/orders/{orderId}": {
      "get": {
        "summary": "Get a specific sales order",
        "tags": [
          "Sales"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the sales order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesOrder"
                }
              }
            }
          },
          "404": {
            "description": "Sales order not found"
          }
        }
      },
      "put": {
        "summary": "Update a sales order",
        "tags": [
          "Sales"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the sales order"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesOrderInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sales order updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesOrder"
                }
              }
            }
          },
          "404": {
            "description": "Sales order not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a sales order",
        "tags": [
          "Sales"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the sales order"
          }
        ],
        "responses": {
          "204": {
            "description": "Sales order deleted"
          },
          "404": {
            "description": "Sales order not found"
          }
        }
      }
    },
    "/finance/invoices": {
      "get": {
        "summary": "List invoices",
        "tags": [
          "Finance"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "paid",
                "unpaid",
                "overdue"
              ]
            },
            "description": "Filter invoices by status"
          },
          {
            "in": "query",
            "name": "dateFrom",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter invoices from this date"
          },
          {
            "in": "query",
            "name": "dateTo",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter invoices to this date"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new invoice",
        "tags": [
          "Finance"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invoice created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          }
        }
      }
    },
    "/finance/invoices/{invoiceId}": {
      "get": {
        "summary": "Get a specific invoice",
        "tags": [
          "Finance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the invoice"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "put": {
        "summary": "Update an invoice",
        "tags": [
          "Finance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the invoice"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invoice updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      }
    },
    "/hr/employees": {
      "get": {
        "summary": "List employees",
        "tags": [
          "HR"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "department",
            "schema": {
              "type": "string"
            },
            "description": "Filter employees by department"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "onLeave"
              ]
            },
            "description": "Filter employees by status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new employee",
        "tags": [
          "HR"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        }
      }
    },
    "/hr/employees/{employeeId}": {
      "get": {
        "summary": "Get a specific employee",
        "tags": [
          "HR"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "employeeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the employee"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        }
      },
      "put": {
        "summary": "Update an employee",
        "tags": [
          "HR"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "employeeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the employee"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        }
      }
    },
    "/inventory/products": {
      "get": {
        "summary": "List products",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter products by category"
          },
          {
            "in": "query",
            "name": "inStock",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter products by availability"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new product",
        "tags": [
          "Inventory"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/products/{productId}": {
      "get": {
        "summary": "Get a specific product",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "summary": "Update a product",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SalesOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "closed",
              "cancelled"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "totalAmount": {
            "type": "number"
          }
        }
      },
      "SalesOrderInput": {
        "type": "object",
        "required": [
          "customerId",
          "items"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1
          },
          "unitPrice": {
            "type": "number"
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "invoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "paid",
              "unpaid",
              "overdue"
            ]
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "InvoiceInput": {
        "type": "object",
        "required": [
          "customerId",
          "orderId",
          "amount"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Employee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "department": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "hireDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "onLeave"
            ]
          }
        }
      },
      "EmployeeInput": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "email",
          "department",
          "position"
        ],
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "department": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "hireDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "inStock": {
            "type": "boolean"
          },
          "quantity": {
            "type": "integer"
          }
        }
      },
      "ProductInput": {
        "type": "object",
        "required": [
          "name",
          "category",
          "price"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "integer"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}